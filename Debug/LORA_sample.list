
LORA_sample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041a4  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08004374  08004374  00014374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004428  08004428  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004428  08004428  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004428  08004428  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004428  08004428  00014428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800442c  0800442c  0001442c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004430  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000070  080044a0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  080044a0  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e2c4  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021ee  00000000  00000000  0002e35d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f90  00000000  00000000  00030550  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e78  00000000  00000000  000314e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000f30c  00000000  00000000  00032358  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b2a1  00000000  00000000  00041664  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00058d44  00000000  00000000  0004c905  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a5649  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004458  00000000  00000000  000a56c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800435c 	.word	0x0800435c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800435c 	.word	0x0800435c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <SX1278_hw_init>:

//////////////////////////////////
// logic
//////////////////////////////////

__weak void SX1278_hw_init(SX1278_hw_t * hw) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000228:	2101      	movs	r1, #1
 800022a:	6878      	ldr	r0, [r7, #4]
 800022c:	f000 f80d 	bl	800024a <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	6858      	ldr	r0, [r3, #4]
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	b29b      	uxth	r3, r3
 800023a:	2201      	movs	r2, #1
 800023c:	4619      	mov	r1, r3
 800023e:	f001 fcd5 	bl	8001bec <HAL_GPIO_WritePin>
}
 8000242:	bf00      	nop
 8000244:	3708      	adds	r7, #8
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}

0800024a <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t * hw, int value) {
 800024a:	b580      	push	{r7, lr}
 800024c:	b082      	sub	sp, #8
 800024e:	af00      	add	r7, sp, #0
 8000250:	6078      	str	r0, [r7, #4]
 8000252:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	6958      	ldr	r0, [r3, #20]
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	691b      	ldr	r3, [r3, #16]
 800025c:	b299      	uxth	r1, r3
 800025e:	683b      	ldr	r3, [r7, #0]
 8000260:	2b01      	cmp	r3, #1
 8000262:	bf0c      	ite	eq
 8000264:	2301      	moveq	r3, #1
 8000266:	2300      	movne	r3, #0
 8000268:	b2db      	uxtb	r3, r3
 800026a:	461a      	mov	r2, r3
 800026c:	f001 fcbe 	bl	8001bec <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000270:	bf00      	nop
 8000272:	3708      	adds	r7, #8
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}

08000278 <SX1278_hw_SPICommand>:
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);

	SX1278_hw_DelayMs(100);
}

__weak void SX1278_hw_SPICommand(SX1278_hw_t * hw, uint8_t cmd) {
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
 8000280:	460b      	mov	r3, r1
 8000282:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8000284:	2100      	movs	r1, #0
 8000286:	6878      	ldr	r0, [r7, #4]
 8000288:	f7ff ffdf 	bl	800024a <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	6998      	ldr	r0, [r3, #24]
 8000290:	1cf9      	adds	r1, r7, #3
 8000292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000296:	2201      	movs	r2, #1
 8000298:	f002 f9ab 	bl	80025f2 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 800029c:	bf00      	nop
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	699b      	ldr	r3, [r3, #24]
 80002a2:	4618      	mov	r0, r3
 80002a4:	f002 fc7b 	bl	8002b9e <HAL_SPI_GetState>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b01      	cmp	r3, #1
 80002ac:	d1f7      	bne.n	800029e <SX1278_hw_SPICommand+0x26>
		;
}
 80002ae:	bf00      	nop
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}

080002b6 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t * hw) {
 80002b6:	b580      	push	{r7, lr}
 80002b8:	b086      	sub	sp, #24
 80002ba:	af02      	add	r7, sp, #8
 80002bc:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 80002be:	2300      	movs	r3, #0
 80002c0:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 80002c2:	2300      	movs	r3, #0
 80002c4:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 80002c6:	2100      	movs	r1, #0
 80002c8:	6878      	ldr	r0, [r7, #4]
 80002ca:	f7ff ffbe 	bl	800024a <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	6998      	ldr	r0, [r3, #24]
 80002d2:	f107 020e 	add.w	r2, r7, #14
 80002d6:	f107 010f 	add.w	r1, r7, #15
 80002da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002de:	9300      	str	r3, [sp, #0]
 80002e0:	2301      	movs	r3, #1
 80002e2:	f002 faba 	bl	800285a <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 80002e6:	bf00      	nop
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	4618      	mov	r0, r3
 80002ee:	f002 fc56 	bl	8002b9e <HAL_SPI_GetState>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b01      	cmp	r3, #1
 80002f6:	d1f7      	bne.n	80002e8 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 80002f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80002fa:	4618      	mov	r0, r3
 80002fc:	3710      	adds	r7, #16
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}

08000302 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8000302:	b580      	push	{r7, lr}
 8000304:	b082      	sub	sp, #8
 8000306:	af00      	add	r7, sp, #0
 8000308:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 800030a:	6878      	ldr	r0, [r7, #4]
 800030c:	f001 f804 	bl	8001318 <HAL_Delay>
}
 8000310:	bf00      	nop
 8000312:	3708      	adds	r7, #8
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}

08000318 <SX1278_SPIRead>:

//////////////////////////////////
// logic
//////////////////////////////////

uint8_t SX1278_SPIRead(SX1278_t * module, uint8_t addr) {
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	460b      	mov	r3, r1
 8000322:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	78fa      	ldrb	r2, [r7, #3]
 800032a:	4611      	mov	r1, r2
 800032c:	4618      	mov	r0, r3
 800032e:	f7ff ffa3 	bl	8000278 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	4618      	mov	r0, r3
 8000338:	f7ff ffbd 	bl	80002b6 <SX1278_hw_SPIReadByte>
 800033c:	4603      	mov	r3, r0
 800033e:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	2101      	movs	r1, #1
 8000346:	4618      	mov	r0, r3
 8000348:	f7ff ff7f 	bl	800024a <SX1278_hw_SetNSS>
	return tmp;
 800034c:	7bfb      	ldrb	r3, [r7, #15]
}
 800034e:	4618      	mov	r0, r3
 8000350:	3710      	adds	r7, #16
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}

08000356 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t * module, uint8_t addr, uint8_t cmd) {
 8000356:	b580      	push	{r7, lr}
 8000358:	b082      	sub	sp, #8
 800035a:	af00      	add	r7, sp, #0
 800035c:	6078      	str	r0, [r7, #4]
 800035e:	460b      	mov	r3, r1
 8000360:	70fb      	strb	r3, [r7, #3]
 8000362:	4613      	mov	r3, r2
 8000364:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	2100      	movs	r1, #0
 800036c:	4618      	mov	r0, r3
 800036e:	f7ff ff6c 	bl	800024a <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	681a      	ldr	r2, [r3, #0]
 8000376:	78fb      	ldrb	r3, [r7, #3]
 8000378:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800037c:	b2db      	uxtb	r3, r3
 800037e:	4619      	mov	r1, r3
 8000380:	4610      	mov	r0, r2
 8000382:	f7ff ff79 	bl	8000278 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	78ba      	ldrb	r2, [r7, #2]
 800038c:	4611      	mov	r1, r2
 800038e:	4618      	mov	r0, r3
 8000390:	f7ff ff72 	bl	8000278 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	2101      	movs	r1, #1
 800039a:	4618      	mov	r0, r3
 800039c:	f7ff ff55 	bl	800024a <SX1278_hw_SetNSS>
}
 80003a0:	bf00      	nop
 80003a2:	3708      	adds	r7, #8
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}

080003a8 <SX1278_SPIBurstWrite>:
		SX1278_hw_SetNSS(module->hw, 1);
	}
}

void SX1278_SPIBurstWrite(SX1278_t * module, uint8_t addr, uint8_t* txBuf,
		uint8_t length) {
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b086      	sub	sp, #24
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	60f8      	str	r0, [r7, #12]
 80003b0:	607a      	str	r2, [r7, #4]
 80003b2:	461a      	mov	r2, r3
 80003b4:	460b      	mov	r3, r1
 80003b6:	72fb      	strb	r3, [r7, #11]
 80003b8:	4613      	mov	r3, r2
 80003ba:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 80003bc:	7abb      	ldrb	r3, [r7, #10]
 80003be:	2b01      	cmp	r3, #1
 80003c0:	d929      	bls.n	8000416 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	2100      	movs	r1, #0
 80003c8:	4618      	mov	r0, r3
 80003ca:	f7ff ff3e 	bl	800024a <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	7afb      	ldrb	r3, [r7, #11]
 80003d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	4619      	mov	r1, r3
 80003dc:	4610      	mov	r0, r2
 80003de:	f7ff ff4b 	bl	8000278 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80003e2:	2300      	movs	r3, #0
 80003e4:	75fb      	strb	r3, [r7, #23]
 80003e6:	e00b      	b.n	8000400 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	6818      	ldr	r0, [r3, #0]
 80003ec:	7dfb      	ldrb	r3, [r7, #23]
 80003ee:	687a      	ldr	r2, [r7, #4]
 80003f0:	4413      	add	r3, r2
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	4619      	mov	r1, r3
 80003f6:	f7ff ff3f 	bl	8000278 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80003fa:	7dfb      	ldrb	r3, [r7, #23]
 80003fc:	3301      	adds	r3, #1
 80003fe:	75fb      	strb	r3, [r7, #23]
 8000400:	7dfa      	ldrb	r2, [r7, #23]
 8000402:	7abb      	ldrb	r3, [r7, #10]
 8000404:	429a      	cmp	r2, r3
 8000406:	d3ef      	bcc.n	80003e8 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	2101      	movs	r1, #1
 800040e:	4618      	mov	r0, r3
 8000410:	f7ff ff1b 	bl	800024a <SX1278_hw_SetNSS>
 8000414:	e000      	b.n	8000418 <SX1278_SPIBurstWrite+0x70>
		return;
 8000416:	bf00      	nop
	}
}
 8000418:	3718      	adds	r7, #24
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}

0800041e <SX1278_defaultConfig>:

void SX1278_defaultConfig(SX1278_t * module) {
 800041e:	b580      	push	{r7, lr}
 8000420:	b084      	sub	sp, #16
 8000422:	af02      	add	r7, sp, #8
 8000424:	6078      	str	r0, [r7, #4]
	SX1278_config(module, module->frequency, module->power, module->LoRa_Rate,
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	7919      	ldrb	r1, [r3, #4]
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	795a      	ldrb	r2, [r3, #5]
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	7998      	ldrb	r0, [r3, #6]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	79db      	ldrb	r3, [r3, #7]
 8000436:	9300      	str	r3, [sp, #0]
 8000438:	4603      	mov	r3, r0
 800043a:	6878      	ldr	r0, [r7, #4]
 800043c:	f000 f804 	bl	8000448 <SX1278_config>
			module->LoRa_BW);
}
 8000440:	bf00      	nop
 8000442:	3708      	adds	r7, #8
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}

08000448 <SX1278_config>:

void SX1278_config(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW) {
 8000448:	b580      	push	{r7, lr}
 800044a:	b084      	sub	sp, #16
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	4608      	mov	r0, r1
 8000452:	4611      	mov	r1, r2
 8000454:	461a      	mov	r2, r3
 8000456:	4603      	mov	r3, r0
 8000458:	70fb      	strb	r3, [r7, #3]
 800045a:	460b      	mov	r3, r1
 800045c:	70bb      	strb	r3, [r7, #2]
 800045e:	4613      	mov	r3, r2
 8000460:	707b      	strb	r3, [r7, #1]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8000462:	6878      	ldr	r0, [r7, #4]
 8000464:	f000 f8aa 	bl	80005bc <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8000468:	200f      	movs	r0, #15
 800046a:	f7ff ff4a 	bl	8000302 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 800046e:	6878      	ldr	r0, [r7, #4]
 8000470:	f000 f8b4 	bl	80005dc <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
			(uint8_t*) SX1278_Frequency[frequency], 3); //setting  frequency parameter
 8000474:	78fa      	ldrb	r2, [r7, #3]
 8000476:	4613      	mov	r3, r2
 8000478:	005b      	lsls	r3, r3, #1
 800047a:	4413      	add	r3, r2
 800047c:	4a43      	ldr	r2, [pc, #268]	; (800058c <SX1278_config+0x144>)
 800047e:	441a      	add	r2, r3
	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
 8000480:	2303      	movs	r3, #3
 8000482:	2106      	movs	r1, #6
 8000484:	6878      	ldr	r0, [r7, #4]
 8000486:	f7ff ff8f 	bl	80003a8 <SX1278_SPIBurstWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[power]); //Setting output power parameter
 800048a:	78bb      	ldrb	r3, [r7, #2]
 800048c:	4a40      	ldr	r2, [pc, #256]	; (8000590 <SX1278_config+0x148>)
 800048e:	5cd3      	ldrb	r3, [r2, r3]
 8000490:	461a      	mov	r2, r3
 8000492:	2109      	movs	r1, #9
 8000494:	6878      	ldr	r0, [r7, #4]
 8000496:	f7ff ff5e 	bl	8000356 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 800049a:	220b      	movs	r2, #11
 800049c:	210b      	movs	r1, #11
 800049e:	6878      	ldr	r0, [r7, #4]
 80004a0:	f7ff ff59 	bl	8000356 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 80004a4:	2223      	movs	r2, #35	; 0x23
 80004a6:	210c      	movs	r1, #12
 80004a8:	6878      	ldr	r0, [r7, #4]
 80004aa:	f7ff ff54 	bl	8000356 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[LoRa_Rate] == 6) {	//SFactor=6
 80004ae:	787b      	ldrb	r3, [r7, #1]
 80004b0:	4a38      	ldr	r2, [pc, #224]	; (8000594 <SX1278_config+0x14c>)
 80004b2:	5cd3      	ldrb	r3, [r2, r3]
 80004b4:	2b06      	cmp	r3, #6
 80004b6:	d131      	bne.n	800051c <SX1278_config+0xd4>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80004b8:	7e3b      	ldrb	r3, [r7, #24]
 80004ba:	4a37      	ldr	r2, [pc, #220]	; (8000598 <SX1278_config+0x150>)
 80004bc:	5cd3      	ldrb	r3, [r2, r3]
 80004be:	011b      	lsls	r3, r3, #4
 80004c0:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80004c2:	3303      	adds	r3, #3
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	461a      	mov	r2, r3
 80004c8:	211d      	movs	r1, #29
 80004ca:	6878      	ldr	r0, [r7, #4]
 80004cc:	f7ff ff43 	bl	8000356 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 80004d0:	787b      	ldrb	r3, [r7, #1]
 80004d2:	4a30      	ldr	r2, [pc, #192]	; (8000594 <SX1278_config+0x14c>)
 80004d4:	5cd3      	ldrb	r3, [r2, r3]
 80004d6:	011b      	lsls	r3, r3, #4
 80004d8:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80004da:	3307      	adds	r3, #7
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	461a      	mov	r2, r3
 80004e0:	211e      	movs	r1, #30
 80004e2:	6878      	ldr	r0, [r7, #4]
 80004e4:	f7ff ff37 	bl	8000356 <SX1278_SPIWrite>
						+ 0x03));

		tmp = SX1278_SPIRead(module, 0x31);
 80004e8:	2131      	movs	r1, #49	; 0x31
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	f7ff ff14 	bl	8000318 <SX1278_SPIRead>
 80004f0:	4603      	mov	r3, r0
 80004f2:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 80004f4:	7bfb      	ldrb	r3, [r7, #15]
 80004f6:	f023 0307 	bic.w	r3, r3, #7
 80004fa:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 80004fc:	7bfb      	ldrb	r3, [r7, #15]
 80004fe:	f043 0305 	orr.w	r3, r3, #5
 8000502:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 8000504:	7bfb      	ldrb	r3, [r7, #15]
 8000506:	461a      	mov	r2, r3
 8000508:	2131      	movs	r1, #49	; 0x31
 800050a:	6878      	ldr	r0, [r7, #4]
 800050c:	f7ff ff23 	bl	8000356 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8000510:	220c      	movs	r2, #12
 8000512:	2137      	movs	r1, #55	; 0x37
 8000514:	6878      	ldr	r0, [r7, #4]
 8000516:	f7ff ff1e 	bl	8000356 <SX1278_SPIWrite>
 800051a:	e017      	b.n	800054c <SX1278_config+0x104>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 800051c:	7e3b      	ldrb	r3, [r7, #24]
 800051e:	4a1e      	ldr	r2, [pc, #120]	; (8000598 <SX1278_config+0x150>)
 8000520:	5cd3      	ldrb	r3, [r2, r3]
 8000522:	011b      	lsls	r3, r3, #4
 8000524:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000526:	3302      	adds	r3, #2
 8000528:	b2db      	uxtb	r3, r3
 800052a:	461a      	mov	r2, r3
 800052c:	211d      	movs	r1, #29
 800052e:	6878      	ldr	r0, [r7, #4]
 8000530:	f7ff ff11 	bl	8000356 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 8000534:	787b      	ldrb	r3, [r7, #1]
 8000536:	4a17      	ldr	r2, [pc, #92]	; (8000594 <SX1278_config+0x14c>)
 8000538:	5cd3      	ldrb	r3, [r2, r3]
 800053a:	011b      	lsls	r3, r3, #4
 800053c:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800053e:	3307      	adds	r3, #7
 8000540:	b2db      	uxtb	r3, r3
 8000542:	461a      	mov	r2, r3
 8000544:	211e      	movs	r1, #30
 8000546:	6878      	ldr	r0, [r7, #4]
 8000548:	f7ff ff05 	bl	8000356 <SX1278_SPIWrite>
						+ 0x03)); //SFactor &  LNA gain set by the internal AGC loop
	}

	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0xFF); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 800054c:	22ff      	movs	r2, #255	; 0xff
 800054e:	211f      	movs	r1, #31
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	f7ff ff00 	bl	8000356 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8000556:	2200      	movs	r2, #0
 8000558:	2120      	movs	r1, #32
 800055a:	6878      	ldr	r0, [r7, #4]
 800055c:	f7ff fefb 	bl	8000356 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 12); //RegPreambleLsb 8+4=12byte Preamble
 8000560:	220c      	movs	r2, #12
 8000562:	2121      	movs	r1, #33	; 0x21
 8000564:	6878      	ldr	r0, [r7, #4]
 8000566:	f7ff fef6 	bl	8000356 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 800056a:	2201      	movs	r2, #1
 800056c:	2141      	movs	r1, #65	; 0x41
 800056e:	6878      	ldr	r0, [r7, #4]
 8000570:	f7ff fef1 	bl	8000356 <SX1278_SPIWrite>
	module->readBytes = 0;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2200      	movs	r2, #0
 8000578:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	SX1278_standby(module); //Entry standby mode
 800057c:	6878      	ldr	r0, [r7, #4]
 800057e:	f000 f80d 	bl	800059c <SX1278_standby>
}
 8000582:	bf00      	nop
 8000584:	3710      	adds	r7, #16
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	080043bc 	.word	0x080043bc
 8000590:	080043c0 	.word	0x080043c0
 8000594:	080043c4 	.word	0x080043c4
 8000598:	080043cc 	.word	0x080043cc

0800059c <SX1278_standby>:

void SX1278_standby(SX1278_t * module) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80005a4:	2209      	movs	r2, #9
 80005a6:	2101      	movs	r1, #1
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f7ff fed4 	bl	8000356 <SX1278_SPIWrite>
	module->status = STANDBY;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2201      	movs	r2, #1
 80005b2:	725a      	strb	r2, [r3, #9]
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <SX1278_sleep>:

void SX1278_sleep(SX1278_t * module) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 80005c4:	2208      	movs	r2, #8
 80005c6:	2101      	movs	r1, #1
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f7ff fec4 	bl	8000356 <SX1278_SPIWrite>
	module->status = SLEEP;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2200      	movs	r2, #0
 80005d2:	725a      	strb	r2, [r3, #9]
}
 80005d4:	bf00      	nop
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t * module) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 80005e4:	2288      	movs	r2, #136	; 0x88
 80005e6:	2101      	movs	r1, #1
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f7ff feb4 	bl	8000356 <SX1278_SPIWrite>
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <SX1278_begin>:
		SX1278_hw_DelayMs(1);
	}
}

void SX1278_begin(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW, uint8_t packetLength) {
 80005f6:	b580      	push	{r7, lr}
 80005f8:	b082      	sub	sp, #8
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	6078      	str	r0, [r7, #4]
 80005fe:	4608      	mov	r0, r1
 8000600:	4611      	mov	r1, r2
 8000602:	461a      	mov	r2, r3
 8000604:	4603      	mov	r3, r0
 8000606:	70fb      	strb	r3, [r7, #3]
 8000608:	460b      	mov	r3, r1
 800060a:	70bb      	strb	r3, [r7, #2]
 800060c:	4613      	mov	r3, r2
 800060e:	707b      	strb	r3, [r7, #1]
	SX1278_hw_init(module->hw);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff fe03 	bl	8000220 <SX1278_hw_init>
	module->frequency = frequency;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	78fa      	ldrb	r2, [r7, #3]
 800061e:	711a      	strb	r2, [r3, #4]
	module->power = power;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	78ba      	ldrb	r2, [r7, #2]
 8000624:	715a      	strb	r2, [r3, #5]
	module->LoRa_Rate = LoRa_Rate;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	787a      	ldrb	r2, [r7, #1]
 800062a:	719a      	strb	r2, [r3, #6]
	module->LoRa_BW = LoRa_BW;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	7c3a      	ldrb	r2, [r7, #16]
 8000630:	71da      	strb	r2, [r3, #7]
	module->packetLength = packetLength;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	7d3a      	ldrb	r2, [r7, #20]
 8000636:	721a      	strb	r2, [r3, #8]
	SX1278_defaultConfig(module);
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	f7ff fef0 	bl	800041e <SX1278_defaultConfig>
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin)
{
 8000646:	b4b0      	push	{r4, r5, r7}
 8000648:	b08b      	sub	sp, #44	; 0x2c
 800064a:	af00      	add	r7, sp, #0
 800064c:	60f8      	str	r0, [r7, #12]
 800064e:	60b9      	str	r1, [r7, #8]
 8000650:	607a      	str	r2, [r7, #4]
 8000652:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.en_pin = en_pin;
 8000654:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000658:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 800065a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800065c:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 800065e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000660:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	613b      	str	r3, [r7, #16]

	return lcd;
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	461d      	mov	r5, r3
 8000672:	f107 0410 	add.w	r4, r7, #16
 8000676:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000678:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800067a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800067e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000682:	68f8      	ldr	r0, [r7, #12]
 8000684:	372c      	adds	r7, #44	; 0x2c
 8000686:	46bd      	mov	sp, r7
 8000688:	bcb0      	pop	{r4, r5, r7}
 800068a:	4770      	bx	lr

0800068c <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, 0x33);
 8000694:	2133      	movs	r1, #51	; 0x33
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f000 f884 	bl	80007a4 <lcd_write_command>
	lcd_write_command(lcd, 0x32);
 800069c:	2132      	movs	r1, #50	; 0x32
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f000 f880 	bl	80007a4 <lcd_write_command>
	lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 80006a4:	2128      	movs	r1, #40	; 0x28
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f000 f87c 	bl	80007a4 <lcd_write_command>

	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 80006ac:	2101      	movs	r1, #1
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f000 f878 	bl	80007a4 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 80006b4:	210c      	movs	r1, #12
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f000 f874 	bl	80007a4 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 80006bc:	2106      	movs	r1, #6
 80006be:	6878      	ldr	r0, [r7, #4]
 80006c0:	f000 f870 	bl	80007a4 <lcd_write_command>
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	460b      	mov	r3, r1
 80006d6:	70fb      	strb	r3, [r7, #3]
 80006d8:	4613      	mov	r3, r2
 80006da:	70bb      	strb	r3, [r7, #2]
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80006dc:	78fb      	ldrb	r3, [r7, #3]
 80006de:	4a07      	ldr	r2, [pc, #28]	; (80006fc <Lcd_cursor+0x30>)
 80006e0:	5cd2      	ldrb	r2, [r2, r3]
 80006e2:	78bb      	ldrb	r3, [r7, #2]
 80006e4:	4413      	add	r3, r2
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	3b80      	subs	r3, #128	; 0x80
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	4619      	mov	r1, r3
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f000 f858 	bl	80007a4 <lcd_write_command>
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	080043d8 	.word	0x080043d8

08000700 <Lcd_disable_cursor>:

void Lcd_no_blink(Lcd_HandleTypeDef * lcd){
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D | OPT_C);		// Lcd-on, cursor-on, no-blink
}

void Lcd_disable_cursor(Lcd_HandleTypeDef * lcd){
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000708:	210c      	movs	r1, #12
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f000 f84a 	bl	80007a4 <lcd_write_command>
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <Lcd_printf>:

/**
 * Printf() for lcd
 */
void Lcd_printf(Lcd_HandleTypeDef * lcd, char * format, ...) {
 8000718:	b40e      	push	{r1, r2, r3}
 800071a:	b580      	push	{r7, lr}
 800071c:	b08d      	sub	sp, #52	; 0x34
 800071e:	af00      	add	r7, sp, #0
 8000720:	6078      	str	r0, [r7, #4]
	char buf[PRINTF_BUF];
	va_list ap;
	va_start(ap, format);
 8000722:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000726:	60fb      	str	r3, [r7, #12]
    vsnprintf(buf, sizeof(buf), format, ap);
 8000728:	f107 0010 	add.w	r0, r7, #16
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000730:	2120      	movs	r1, #32
 8000732:	f003 fa1d 	bl	8003b70 <vsniprintf>
    Lcd_string(lcd, buf);
 8000736:	f107 0310 	add.w	r3, r7, #16
 800073a:	4619      	mov	r1, r3
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f000 f807 	bl	8000750 <Lcd_string>
    va_end(ap);
}
 8000742:	bf00      	nop
 8000744:	3734      	adds	r7, #52	; 0x34
 8000746:	46bd      	mov	sp, r7
 8000748:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800074c:	b003      	add	sp, #12
 800074e:	4770      	bx	lr

08000750 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000750:	b590      	push	{r4, r7, lr}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 800075a:	2300      	movs	r3, #0
 800075c:	73fb      	strb	r3, [r7, #15]
 800075e:	e00a      	b.n	8000776 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000760:	7bfb      	ldrb	r3, [r7, #15]
 8000762:	683a      	ldr	r2, [r7, #0]
 8000764:	4413      	add	r3, r2
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	4619      	mov	r1, r3
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f000 f83d 	bl	80007ea <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000770:	7bfb      	ldrb	r3, [r7, #15]
 8000772:	3301      	adds	r3, #1
 8000774:	73fb      	strb	r3, [r7, #15]
 8000776:	7bfc      	ldrb	r4, [r7, #15]
 8000778:	6838      	ldr	r0, [r7, #0]
 800077a:	f7ff fd49 	bl	8000210 <strlen>
 800077e:	4603      	mov	r3, r0
 8000780:	429c      	cmp	r4, r3
 8000782:	d3ed      	bcc.n	8000760 <Lcd_string+0x10>
	}
}
 8000784:	bf00      	nop
 8000786:	3714      	adds	r7, #20
 8000788:	46bd      	mov	sp, r7
 800078a:	bd90      	pop	{r4, r7, pc}

0800078c <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8000794:	2101      	movs	r1, #1
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f000 f804 	bl	80007a4 <lcd_write_command>
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	460b      	mov	r3, r1
 80007ae:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	6898      	ldr	r0, [r3, #8]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	899b      	ldrh	r3, [r3, #12]
 80007b8:	2200      	movs	r2, #0
 80007ba:	4619      	mov	r1, r3
 80007bc:	f001 fa16 	bl	8001bec <HAL_GPIO_WritePin>

	lcd_write(lcd, (command >> 4), LCD_NIB);
 80007c0:	78fb      	ldrb	r3, [r7, #3]
 80007c2:	091b      	lsrs	r3, r3, #4
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	2204      	movs	r2, #4
 80007c8:	4619      	mov	r1, r3
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f000 f830 	bl	8000830 <lcd_write>
	lcd_write(lcd, command & 0x0F, LCD_NIB);
 80007d0:	78fb      	ldrb	r3, [r7, #3]
 80007d2:	f003 030f 	and.w	r3, r3, #15
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	2204      	movs	r2, #4
 80007da:	4619      	mov	r1, r3
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f000 f827 	bl	8000830 <lcd_write>

}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b082      	sub	sp, #8
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
 80007f2:	460b      	mov	r3, r1
 80007f4:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6898      	ldr	r0, [r3, #8]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	899b      	ldrh	r3, [r3, #12]
 80007fe:	2201      	movs	r2, #1
 8000800:	4619      	mov	r1, r3
 8000802:	f001 f9f3 	bl	8001bec <HAL_GPIO_WritePin>

	lcd_write(lcd, data >> 4, LCD_NIB);
 8000806:	78fb      	ldrb	r3, [r7, #3]
 8000808:	091b      	lsrs	r3, r3, #4
 800080a:	b2db      	uxtb	r3, r3
 800080c:	2204      	movs	r2, #4
 800080e:	4619      	mov	r1, r3
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f000 f80d 	bl	8000830 <lcd_write>
	lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000816:	78fb      	ldrb	r3, [r7, #3]
 8000818:	f003 030f 	and.w	r3, r3, #15
 800081c:	b2db      	uxtb	r3, r3
 800081e:	2204      	movs	r2, #4
 8000820:	4619      	mov	r1, r3
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f000 f804 	bl	8000830 <lcd_write>

}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	460b      	mov	r3, r1
 800083a:	70fb      	strb	r3, [r7, #3]
 800083c:	4613      	mov	r3, r2
 800083e:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000840:	2300      	movs	r3, #0
 8000842:	73fb      	strb	r3, [r7, #15]
 8000844:	e019      	b.n	800087a <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	7bfb      	ldrb	r3, [r7, #15]
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	4413      	add	r3, r2
 8000850:	6818      	ldr	r0, [r3, #0]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	685a      	ldr	r2, [r3, #4]
 8000856:	7bfb      	ldrb	r3, [r7, #15]
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	4413      	add	r3, r2
 800085c:	8819      	ldrh	r1, [r3, #0]
 800085e:	78fa      	ldrb	r2, [r7, #3]
 8000860:	7bfb      	ldrb	r3, [r7, #15]
 8000862:	fa42 f303 	asr.w	r3, r2, r3
 8000866:	b2db      	uxtb	r3, r3
 8000868:	f003 0301 	and.w	r3, r3, #1
 800086c:	b2db      	uxtb	r3, r3
 800086e:	461a      	mov	r2, r3
 8000870:	f001 f9bc 	bl	8001bec <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000874:	7bfb      	ldrb	r3, [r7, #15]
 8000876:	3301      	adds	r3, #1
 8000878:	73fb      	strb	r3, [r7, #15]
 800087a:	7bfa      	ldrb	r2, [r7, #15]
 800087c:	78bb      	ldrb	r3, [r7, #2]
 800087e:	429a      	cmp	r2, r3
 8000880:	d3e1      	bcc.n	8000846 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6918      	ldr	r0, [r3, #16]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	8a9b      	ldrh	r3, [r3, #20]
 800088a:	2201      	movs	r2, #1
 800088c:	4619      	mov	r1, r3
 800088e:	f001 f9ad 	bl	8001bec <HAL_GPIO_WritePin>
	DELAY(1);
 8000892:	2001      	movs	r0, #1
 8000894:	f000 fd40 	bl	8001318 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	6918      	ldr	r0, [r3, #16]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	8a9b      	ldrh	r3, [r3, #20]
 80008a0:	2200      	movs	r2, #0
 80008a2:	4619      	mov	r1, r3
 80008a4:	f001 f9a2 	bl	8001bec <HAL_GPIO_WritePin>
}
 80008a8:	bf00      	nop
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b0:	b5b0      	push	{r4, r5, r7, lr}
 80008b2:	b0e0      	sub	sp, #384	; 0x180
 80008b4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
  Lcd_PortType ports[] = {
 80008b6:	4b56      	ldr	r3, [pc, #344]	; (8000a10 <main+0x160>)
 80008b8:	f507 74b0 	add.w	r4, r7, #352	; 0x160
 80008bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  GPIOA, GPIOB, GPIOB, GPIOB
  };

  Lcd_PinType pins[] = {LCD_DB4_Pin, LCD_DB5_Pin, LCD_DB6_Pin, LCD_DB7_Pin};
 80008c2:	4a54      	ldr	r2, [pc, #336]	; (8000a14 <main+0x164>)
 80008c4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80008c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008cc:	e883 0003 	stmia.w	r3, {r0, r1}

  Lcd_HandleTypeDef lcd;
  lcd = Lcd_create(ports, pins, GPIOA, LCD_A0_Pin, GPIOA, LCD_E_Pin);
 80008d0:	4638      	mov	r0, r7
 80008d2:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80008d6:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 80008da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008de:	9302      	str	r3, [sp, #8]
 80008e0:	4b4d      	ldr	r3, [pc, #308]	; (8000a18 <main+0x168>)
 80008e2:	9301      	str	r3, [sp, #4]
 80008e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008e8:	9300      	str	r3, [sp, #0]
 80008ea:	4b4b      	ldr	r3, [pc, #300]	; (8000a18 <main+0x168>)
 80008ec:	f7ff feab 	bl	8000646 <Lcd_create>
 80008f0:	463b      	mov	r3, r7
 80008f2:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 80008f6:	461d      	mov	r5, r3
 80008f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000900:	e884 0003 	stmia.w	r4, {r0, r1}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000904:	f000 fcaf 	bl	8001266 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000908:	f000 f890 	bl	8000a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800090c:	f000 f9f8 	bl	8000d00 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000910:	f000 f8e2 	bl	8000ad8 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000914:	f000 f91e 	bl	8000b54 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000918:	f000 f952 	bl	8000bc0 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 800091c:	f000 f9c6 	bl	8000cac <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  Lcd_init(&lcd);
 8000920:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff feb1 	bl	800068c <Lcd_init>
  Lcd_clear(&lcd);
 800092a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff ff2c 	bl	800078c <Lcd_clear>
  //Lcd_printf(&lcd, "Hello World %d%d", 9, 12);

  //Lcd_string(&lcd, "Hello World");
  Lcd_disable_cursor(&lcd);
 8000934:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fee1 	bl	8000700 <Lcd_disable_cursor>
  Lcd_cursor(&lcd, 0, 0);
 800093e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000942:	2200      	movs	r2, #0
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff fec0 	bl	80006cc <Lcd_cursor>


  SX1278_hw_t SX1278_hw;
  SX1278_t SX1278;

  SX1278_hw.dio0.pin = LORA_DIO0_Pin;
 800094c:	2308      	movs	r3, #8
 800094e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  SX1278_hw.dio0.port = GPIOA;
 8000952:	4b31      	ldr	r3, [pc, #196]	; (8000a18 <main+0x168>)
 8000954:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  SX1278_hw.nss.pin = LORA_NSS_Pin;
 8000958:	2310      	movs	r3, #16
 800095a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  SX1278_hw.nss.port = GPIOA;
 800095e:	4b2e      	ldr	r3, [pc, #184]	; (8000a18 <main+0x168>)
 8000960:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  SX1278_hw.reset.pin = LORA_RST_Pin;
 8000964:	2304      	movs	r3, #4
 8000966:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  SX1278_hw.reset.port = GPIOA;
 800096a:	4b2b      	ldr	r3, [pc, #172]	; (8000a18 <main+0x168>)
 800096c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  SX1278_hw.spi = &hspi1;
 8000970:	4b2a      	ldr	r3, [pc, #168]	; (8000a1c <main+0x16c>)
 8000972:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

  SX1278.hw = &SX1278_hw;
 8000976:	f107 0318 	add.w	r3, r7, #24
 800097a:	f507 7292 	add.w	r2, r7, #292	; 0x124
 800097e:	601a      	str	r2, [r3, #0]

  SX1278_begin(&SX1278, SX1278_433MHZ, SX1278_POWER_17DBM, SX1278_LORA_SF_8,
 8000980:	f107 0018 	add.w	r0, r7, #24
 8000984:	230a      	movs	r3, #10
 8000986:	9301      	str	r3, [sp, #4]
 8000988:	2303      	movs	r3, #3
 800098a:	9300      	str	r3, [sp, #0]
 800098c:	2302      	movs	r3, #2
 800098e:	2201      	movs	r2, #1
 8000990:	2100      	movs	r1, #0
 8000992:	f7ff fe30 	bl	80005f6 <SX1278_begin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Lcd_cursor(&lcd, 0, 0);
 8000996:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800099a:	2200      	movs	r2, #0
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fe94 	bl	80006cc <Lcd_cursor>
	  test = SX1278_SPIRead(&SX1278, 0x42);
 80009a4:	f107 0318 	add.w	r3, r7, #24
 80009a8:	2142      	movs	r1, #66	; 0x42
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff fcb4 	bl	8000318 <SX1278_SPIRead>
 80009b0:	4603      	mov	r3, r0
 80009b2:	461a      	mov	r2, r3
 80009b4:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <main+0x170>)
 80009b6:	701a      	strb	r2, [r3, #0]
	  Lcd_printf(&lcd, "Test reg: %d", test);
 80009b8:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <main+0x170>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	461a      	mov	r2, r3
 80009be:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80009c2:	4918      	ldr	r1, [pc, #96]	; (8000a24 <main+0x174>)
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fea7 	bl	8000718 <Lcd_printf>
	  HAL_GPIO_WritePin(GPIOB, HL4_Pin, GPIO_PIN_SET);
 80009ca:	2201      	movs	r2, #1
 80009cc:	2102      	movs	r1, #2
 80009ce:	4816      	ldr	r0, [pc, #88]	; (8000a28 <main+0x178>)
 80009d0:	f001 f90c 	bl	8001bec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, HL3_Pin, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2104      	movs	r1, #4
 80009d8:	4813      	ldr	r0, [pc, #76]	; (8000a28 <main+0x178>)
 80009da:	f001 f907 	bl	8001bec <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80009de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009e2:	f000 fc99 	bl	8001318 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, HL4_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2102      	movs	r1, #2
 80009ea:	480f      	ldr	r0, [pc, #60]	; (8000a28 <main+0x178>)
 80009ec:	f001 f8fe 	bl	8001bec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, HL3_Pin, GPIO_PIN_SET);
 80009f0:	2201      	movs	r2, #1
 80009f2:	2104      	movs	r1, #4
 80009f4:	480c      	ldr	r0, [pc, #48]	; (8000a28 <main+0x178>)
 80009f6:	f001 f8f9 	bl	8001bec <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80009fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009fe:	f000 fc8b 	bl	8001318 <HAL_Delay>
	  Lcd_clear(&lcd);
 8000a02:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fec0 	bl	800078c <Lcd_clear>
	  Lcd_cursor(&lcd, 0, 0);
 8000a0c:	e7c3      	b.n	8000996 <main+0xe6>
 8000a0e:	bf00      	nop
 8000a10:	08004384 	.word	0x08004384
 8000a14:	08004394 	.word	0x08004394
 8000a18:	40010800 	.word	0x40010800
 8000a1c:	2000010c 	.word	0x2000010c
 8000a20:	2000008c 	.word	0x2000008c
 8000a24:	08004374 	.word	0x08004374
 8000a28:	40010c00 	.word	0x40010c00

08000a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b092      	sub	sp, #72	; 0x48
 8000a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a32:	f107 0320 	add.w	r3, r7, #32
 8000a36:	2228      	movs	r2, #40	; 0x28
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f003 f863 	bl	8003b06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a50:	463b      	mov	r3, r7
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a70:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000a72:	2300      	movs	r3, #0
 8000a74:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a76:	f107 0320 	add.w	r3, r7, #32
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f001 f8ce 	bl	8001c1c <HAL_RCC_OscConfig>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000a86:	f000 f9c5 	bl	8000e14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a8a:	230f      	movs	r3, #15
 8000a8c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f001 fb39 	bl	800211c <HAL_RCC_ClockConfig>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000ab0:	f000 f9b0 	bl	8000e14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000abc:	463b      	mov	r3, r7
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f001 fc98 	bl	80023f4 <HAL_RCCEx_PeriphCLKConfig>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000aca:	f000 f9a3 	bl	8000e14 <Error_Handler>
  }
}
 8000ace:	bf00      	nop
 8000ad0:	3748      	adds	r7, #72	; 0x48
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ae8:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <MX_ADC1_Init+0x74>)
 8000aea:	4a19      	ldr	r2, [pc, #100]	; (8000b50 <MX_ADC1_Init+0x78>)
 8000aec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000aee:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <MX_ADC1_Init+0x74>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000af4:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <MX_ADC1_Init+0x74>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000afa:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <MX_ADC1_Init+0x74>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b00:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <MX_ADC1_Init+0x74>)
 8000b02:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b06:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b08:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <MX_ADC1_Init+0x74>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <MX_ADC1_Init+0x74>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b14:	480d      	ldr	r0, [pc, #52]	; (8000b4c <MX_ADC1_Init+0x74>)
 8000b16:	f000 fc21 	bl	800135c <HAL_ADC_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000b20:	f000 f978 	bl	8000e14 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b24:	2301      	movs	r3, #1
 8000b26:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	4619      	mov	r1, r3
 8000b34:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_ADC1_Init+0x74>)
 8000b36:	f000 fce9 	bl	800150c <HAL_ADC_ConfigChannel>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000b40:	f000 f968 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	200000dc 	.word	0x200000dc
 8000b50:	40012400 	.word	0x40012400

08000b54 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b58:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <MX_SPI1_Init+0x64>)
 8000b5a:	4a18      	ldr	r2, [pc, #96]	; (8000bbc <MX_SPI1_Init+0x68>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b5e:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <MX_SPI1_Init+0x64>)
 8000b60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b66:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <MX_SPI1_Init+0x64>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b6c:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <MX_SPI1_Init+0x64>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <MX_SPI1_Init+0x64>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b78:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <MX_SPI1_Init+0x64>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <MX_SPI1_Init+0x64>)
 8000b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b84:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b86:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <MX_SPI1_Init+0x64>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <MX_SPI1_Init+0x64>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <MX_SPI1_Init+0x64>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b98:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <MX_SPI1_Init+0x64>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <MX_SPI1_Init+0x64>)
 8000ba0:	220a      	movs	r2, #10
 8000ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ba4:	4804      	ldr	r0, [pc, #16]	; (8000bb8 <MX_SPI1_Init+0x64>)
 8000ba6:	f001 fccb 	bl	8002540 <HAL_SPI_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000bb0:	f000 f930 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	2000010c 	.word	0x2000010c
 8000bbc:	40013000 	.word	0x40013000

08000bc0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08e      	sub	sp, #56	; 0x38
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd4:	f107 0320 	add.w	r3, r7, #32
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
 8000bec:	615a      	str	r2, [r3, #20]
 8000bee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bf0:	4b2d      	ldr	r3, [pc, #180]	; (8000ca8 <MX_TIM2_Init+0xe8>)
 8000bf2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bf6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8000bf8:	4b2b      	ldr	r3, [pc, #172]	; (8000ca8 <MX_TIM2_Init+0xe8>)
 8000bfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bfe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c00:	4b29      	ldr	r3, [pc, #164]	; (8000ca8 <MX_TIM2_Init+0xe8>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8000c06:	4b28      	ldr	r3, [pc, #160]	; (8000ca8 <MX_TIM2_Init+0xe8>)
 8000c08:	220a      	movs	r2, #10
 8000c0a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c0c:	4b26      	ldr	r3, [pc, #152]	; (8000ca8 <MX_TIM2_Init+0xe8>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c12:	4b25      	ldr	r3, [pc, #148]	; (8000ca8 <MX_TIM2_Init+0xe8>)
 8000c14:	2280      	movs	r2, #128	; 0x80
 8000c16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c18:	4823      	ldr	r0, [pc, #140]	; (8000ca8 <MX_TIM2_Init+0xe8>)
 8000c1a:	f002 f855 	bl	8002cc8 <HAL_TIM_Base_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000c24:	f000 f8f6 	bl	8000e14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c32:	4619      	mov	r1, r3
 8000c34:	481c      	ldr	r0, [pc, #112]	; (8000ca8 <MX_TIM2_Init+0xe8>)
 8000c36:	f002 f96d 	bl	8002f14 <HAL_TIM_ConfigClockSource>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000c40:	f000 f8e8 	bl	8000e14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c44:	4818      	ldr	r0, [pc, #96]	; (8000ca8 <MX_TIM2_Init+0xe8>)
 8000c46:	f002 f86a 	bl	8002d1e <HAL_TIM_PWM_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000c50:	f000 f8e0 	bl	8000e14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c54:	2300      	movs	r3, #0
 8000c56:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c5c:	f107 0320 	add.w	r3, r7, #32
 8000c60:	4619      	mov	r1, r3
 8000c62:	4811      	ldr	r0, [pc, #68]	; (8000ca8 <MX_TIM2_Init+0xe8>)
 8000c64:	f002 fd00 	bl	8003668 <HAL_TIMEx_MasterConfigSynchronization>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000c6e:	f000 f8d1 	bl	8000e14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c72:	2360      	movs	r3, #96	; 0x60
 8000c74:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	2200      	movs	r2, #0
 8000c86:	4619      	mov	r1, r3
 8000c88:	4807      	ldr	r0, [pc, #28]	; (8000ca8 <MX_TIM2_Init+0xe8>)
 8000c8a:	f002 f87d 	bl	8002d88 <HAL_TIM_PWM_ConfigChannel>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000c94:	f000 f8be 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c98:	4803      	ldr	r0, [pc, #12]	; (8000ca8 <MX_TIM2_Init+0xe8>)
 8000c9a:	f000 f995 	bl	8000fc8 <HAL_TIM_MspPostInit>

}
 8000c9e:	bf00      	nop
 8000ca0:	3738      	adds	r7, #56	; 0x38
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000164 	.word	0x20000164

08000cac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cb0:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <MX_USART3_UART_Init+0x4c>)
 8000cb2:	4a12      	ldr	r2, [pc, #72]	; (8000cfc <MX_USART3_UART_Init+0x50>)
 8000cb4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cb6:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <MX_USART3_UART_Init+0x4c>)
 8000cb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cbc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <MX_USART3_UART_Init+0x4c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <MX_USART3_UART_Init+0x4c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cca:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <MX_USART3_UART_Init+0x4c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <MX_USART3_UART_Init+0x4c>)
 8000cd2:	220c      	movs	r2, #12
 8000cd4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cd6:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <MX_USART3_UART_Init+0x4c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <MX_USART3_UART_Init+0x4c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <MX_USART3_UART_Init+0x4c>)
 8000ce4:	f002 fd04 	bl	80036f0 <HAL_UART_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000cee:	f000 f891 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	2000009c 	.word	0x2000009c
 8000cfc:	40004800 	.word	0x40004800

08000d00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d06:	f107 0310 	add.w	r3, r7, #16
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d14:	4b3b      	ldr	r3, [pc, #236]	; (8000e04 <MX_GPIO_Init+0x104>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	4a3a      	ldr	r2, [pc, #232]	; (8000e04 <MX_GPIO_Init+0x104>)
 8000d1a:	f043 0310 	orr.w	r3, r3, #16
 8000d1e:	6193      	str	r3, [r2, #24]
 8000d20:	4b38      	ldr	r3, [pc, #224]	; (8000e04 <MX_GPIO_Init+0x104>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	f003 0310 	and.w	r3, r3, #16
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2c:	4b35      	ldr	r3, [pc, #212]	; (8000e04 <MX_GPIO_Init+0x104>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4a34      	ldr	r2, [pc, #208]	; (8000e04 <MX_GPIO_Init+0x104>)
 8000d32:	f043 0320 	orr.w	r3, r3, #32
 8000d36:	6193      	str	r3, [r2, #24]
 8000d38:	4b32      	ldr	r3, [pc, #200]	; (8000e04 <MX_GPIO_Init+0x104>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	f003 0320 	and.w	r3, r3, #32
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d44:	4b2f      	ldr	r3, [pc, #188]	; (8000e04 <MX_GPIO_Init+0x104>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	4a2e      	ldr	r2, [pc, #184]	; (8000e04 <MX_GPIO_Init+0x104>)
 8000d4a:	f043 0304 	orr.w	r3, r3, #4
 8000d4e:	6193      	str	r3, [r2, #24]
 8000d50:	4b2c      	ldr	r3, [pc, #176]	; (8000e04 <MX_GPIO_Init+0x104>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	f003 0304 	and.w	r3, r3, #4
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5c:	4b29      	ldr	r3, [pc, #164]	; (8000e04 <MX_GPIO_Init+0x104>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	4a28      	ldr	r2, [pc, #160]	; (8000e04 <MX_GPIO_Init+0x104>)
 8000d62:	f043 0308 	orr.w	r3, r3, #8
 8000d66:	6193      	str	r3, [r2, #24]
 8000d68:	4b26      	ldr	r3, [pc, #152]	; (8000e04 <MX_GPIO_Init+0x104>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f003 0308 	and.w	r3, r3, #8
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LORA_RST_Pin|LORA_DIO0_Pin|LORA_NSS_Pin|LCD_DB4_Pin
 8000d74:	2200      	movs	r2, #0
 8000d76:	f240 711c 	movw	r1, #1820	; 0x71c
 8000d7a:	4823      	ldr	r0, [pc, #140]	; (8000e08 <MX_GPIO_Init+0x108>)
 8000d7c:	f000 ff36 	bl	8001bec <HAL_GPIO_WritePin>
                          |LCD_E_Pin|LCD_A0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay_Pin|HL4_Pin|HL3_Pin|BL_E_Pin
 8000d80:	2200      	movs	r2, #0
 8000d82:	f24f 2107 	movw	r1, #61959	; 0xf207
 8000d86:	4821      	ldr	r0, [pc, #132]	; (8000e0c <MX_GPIO_Init+0x10c>)
 8000d88:	f000 ff30 	bl	8001bec <HAL_GPIO_WritePin>
                          |LCD_DB7_Pin|LCD_DB6_Pin|LCD_DB5_Pin|PB6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : but_1_Pin but_2_Pin */
  GPIO_InitStruct.Pin = but_1_Pin|but_2_Pin;
 8000d8c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000d90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d9a:	f107 0310 	add.w	r3, r7, #16
 8000d9e:	4619      	mov	r1, r3
 8000da0:	481b      	ldr	r0, [pc, #108]	; (8000e10 <MX_GPIO_Init+0x110>)
 8000da2:	f000 fdc9 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_RST_Pin LORA_DIO0_Pin LORA_NSS_Pin LCD_DB4_Pin
                           LCD_E_Pin LCD_A0_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|LORA_DIO0_Pin|LORA_NSS_Pin|LCD_DB4_Pin
 8000da6:	f240 731c 	movw	r3, #1820	; 0x71c
 8000daa:	613b      	str	r3, [r7, #16]
                          |LCD_E_Pin|LCD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2302      	movs	r3, #2
 8000db6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	f107 0310 	add.w	r3, r7, #16
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4812      	ldr	r0, [pc, #72]	; (8000e08 <MX_GPIO_Init+0x108>)
 8000dc0:	f000 fdba 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay_Pin HL4_Pin HL3_Pin BL_E_Pin
                           LCD_DB7_Pin LCD_DB6_Pin LCD_DB5_Pin PB6_Pin */
  GPIO_InitStruct.Pin = Relay_Pin|HL4_Pin|HL3_Pin|BL_E_Pin
 8000dc4:	f24f 2307 	movw	r3, #61959	; 0xf207
 8000dc8:	613b      	str	r3, [r7, #16]
                          |LCD_DB7_Pin|LCD_DB6_Pin|LCD_DB5_Pin|PB6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd6:	f107 0310 	add.w	r3, r7, #16
 8000dda:	4619      	mov	r1, r3
 8000ddc:	480b      	ldr	r0, [pc, #44]	; (8000e0c <MX_GPIO_Init+0x10c>)
 8000dde:	f000 fdab 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12_Pin PA11_Pin PB5_Pin PB8_Pin
                           PB7_Pin */
  GPIO_InitStruct.Pin = PA12_Pin|PA11_Pin|PB5_Pin|PB8_Pin
 8000de2:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8000de6:	613b      	str	r3, [r7, #16]
                          |PB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df0:	f107 0310 	add.w	r3, r7, #16
 8000df4:	4619      	mov	r1, r3
 8000df6:	4805      	ldr	r0, [pc, #20]	; (8000e0c <MX_GPIO_Init+0x10c>)
 8000df8:	f000 fd9e 	bl	8001938 <HAL_GPIO_Init>

}
 8000dfc:	bf00      	nop
 8000dfe:	3720      	adds	r7, #32
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40021000 	.word	0x40021000
 8000e08:	40010800 	.word	0x40010800
 8000e0c:	40010c00 	.word	0x40010c00
 8000e10:	40011000 	.word	0x40011000

08000e14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr

08000e20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e26:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <HAL_MspInit+0x5c>)
 8000e28:	699b      	ldr	r3, [r3, #24]
 8000e2a:	4a14      	ldr	r2, [pc, #80]	; (8000e7c <HAL_MspInit+0x5c>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6193      	str	r3, [r2, #24]
 8000e32:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_MspInit+0x5c>)
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <HAL_MspInit+0x5c>)
 8000e40:	69db      	ldr	r3, [r3, #28]
 8000e42:	4a0e      	ldr	r2, [pc, #56]	; (8000e7c <HAL_MspInit+0x5c>)
 8000e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e48:	61d3      	str	r3, [r2, #28]
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <HAL_MspInit+0x5c>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <HAL_MspInit+0x60>)
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <HAL_MspInit+0x60>)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e72:	bf00      	nop
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	40010000 	.word	0x40010000

08000e84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a14      	ldr	r2, [pc, #80]	; (8000ef0 <HAL_ADC_MspInit+0x6c>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d121      	bne.n	8000ee8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ea4:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <HAL_ADC_MspInit+0x70>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <HAL_ADC_MspInit+0x70>)
 8000eaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eae:	6193      	str	r3, [r2, #24]
 8000eb0:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <HAL_ADC_MspInit+0x70>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebc:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <HAL_ADC_MspInit+0x70>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	4a0c      	ldr	r2, [pc, #48]	; (8000ef4 <HAL_ADC_MspInit+0x70>)
 8000ec2:	f043 0304 	orr.w	r3, r3, #4
 8000ec6:	6193      	str	r3, [r2, #24]
 8000ec8:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <HAL_ADC_MspInit+0x70>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	f003 0304 	and.w	r3, r3, #4
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = TEMP_Pin|Cell_Voltage_Pin;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <HAL_ADC_MspInit+0x74>)
 8000ee4:	f000 fd28 	bl	8001938 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ee8:	bf00      	nop
 8000eea:	3720      	adds	r7, #32
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40012400 	.word	0x40012400
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	40010800 	.word	0x40010800

08000efc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 0310 	add.w	r3, r7, #16
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a1b      	ldr	r2, [pc, #108]	; (8000f84 <HAL_SPI_MspInit+0x88>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d12f      	bne.n	8000f7c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f1c:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <HAL_SPI_MspInit+0x8c>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	4a19      	ldr	r2, [pc, #100]	; (8000f88 <HAL_SPI_MspInit+0x8c>)
 8000f22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f26:	6193      	str	r3, [r2, #24]
 8000f28:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <HAL_SPI_MspInit+0x8c>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f34:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <HAL_SPI_MspInit+0x8c>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	4a13      	ldr	r2, [pc, #76]	; (8000f88 <HAL_SPI_MspInit+0x8c>)
 8000f3a:	f043 0304 	orr.w	r3, r3, #4
 8000f3e:	6193      	str	r3, [r2, #24]
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <HAL_SPI_MspInit+0x8c>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	f003 0304 	and.w	r3, r3, #4
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f4c:	23a0      	movs	r3, #160	; 0xa0
 8000f4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f50:	2302      	movs	r3, #2
 8000f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f54:	2303      	movs	r3, #3
 8000f56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f58:	f107 0310 	add.w	r3, r7, #16
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	480b      	ldr	r0, [pc, #44]	; (8000f8c <HAL_SPI_MspInit+0x90>)
 8000f60:	f000 fcea 	bl	8001938 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f64:	2340      	movs	r3, #64	; 0x40
 8000f66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f70:	f107 0310 	add.w	r3, r7, #16
 8000f74:	4619      	mov	r1, r3
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <HAL_SPI_MspInit+0x90>)
 8000f78:	f000 fcde 	bl	8001938 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f7c:	bf00      	nop
 8000f7e:	3720      	adds	r7, #32
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40013000 	.word	0x40013000
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	40010800 	.word	0x40010800

08000f90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fa0:	d10b      	bne.n	8000fba <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fa2:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <HAL_TIM_Base_MspInit+0x34>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	4a07      	ldr	r2, [pc, #28]	; (8000fc4 <HAL_TIM_Base_MspInit+0x34>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	61d3      	str	r3, [r2, #28]
 8000fae:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <HAL_TIM_Base_MspInit+0x34>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fba:	bf00      	nop
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	40021000 	.word	0x40021000

08000fc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 030c 	add.w	r3, r7, #12
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fe6:	d12a      	bne.n	800103e <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe8:	4b17      	ldr	r3, [pc, #92]	; (8001048 <HAL_TIM_MspPostInit+0x80>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	4a16      	ldr	r2, [pc, #88]	; (8001048 <HAL_TIM_MspPostInit+0x80>)
 8000fee:	f043 0304 	orr.w	r3, r3, #4
 8000ff2:	6193      	str	r3, [r2, #24]
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <HAL_TIM_MspPostInit+0x80>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	f003 0304 	and.w	r3, r3, #4
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001000:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001004:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2302      	movs	r3, #2
 800100c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100e:	f107 030c 	add.w	r3, r7, #12
 8001012:	4619      	mov	r1, r3
 8001014:	480d      	ldr	r0, [pc, #52]	; (800104c <HAL_TIM_MspPostInit+0x84>)
 8001016:	f000 fc8f 	bl	8001938 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800101a:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <HAL_TIM_MspPostInit+0x88>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	61fb      	str	r3, [r7, #28]
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001026:	61fb      	str	r3, [r7, #28]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800102e:	61fb      	str	r3, [r7, #28]
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001036:	61fb      	str	r3, [r7, #28]
 8001038:	4a05      	ldr	r2, [pc, #20]	; (8001050 <HAL_TIM_MspPostInit+0x88>)
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800103e:	bf00      	nop
 8001040:	3720      	adds	r7, #32
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40021000 	.word	0x40021000
 800104c:	40010800 	.word	0x40010800
 8001050:	40010000 	.word	0x40010000

08001054 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 0310 	add.w	r3, r7, #16
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a1c      	ldr	r2, [pc, #112]	; (80010e0 <HAL_UART_MspInit+0x8c>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d131      	bne.n	80010d8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001074:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <HAL_UART_MspInit+0x90>)
 8001076:	69db      	ldr	r3, [r3, #28]
 8001078:	4a1a      	ldr	r2, [pc, #104]	; (80010e4 <HAL_UART_MspInit+0x90>)
 800107a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800107e:	61d3      	str	r3, [r2, #28]
 8001080:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <HAL_UART_MspInit+0x90>)
 8001082:	69db      	ldr	r3, [r3, #28]
 8001084:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108c:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <HAL_UART_MspInit+0x90>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4a14      	ldr	r2, [pc, #80]	; (80010e4 <HAL_UART_MspInit+0x90>)
 8001092:	f043 0308 	orr.w	r3, r3, #8
 8001096:	6193      	str	r3, [r2, #24]
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <HAL_UART_MspInit+0x90>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f003 0308 	and.w	r3, r3, #8
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	2302      	movs	r3, #2
 80010ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ae:	2303      	movs	r3, #3
 80010b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b2:	f107 0310 	add.w	r3, r7, #16
 80010b6:	4619      	mov	r1, r3
 80010b8:	480b      	ldr	r0, [pc, #44]	; (80010e8 <HAL_UART_MspInit+0x94>)
 80010ba:	f000 fc3d 	bl	8001938 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80010be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010cc:	f107 0310 	add.w	r3, r7, #16
 80010d0:	4619      	mov	r1, r3
 80010d2:	4805      	ldr	r0, [pc, #20]	; (80010e8 <HAL_UART_MspInit+0x94>)
 80010d4:	f000 fc30 	bl	8001938 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010d8:	bf00      	nop
 80010da:	3720      	adds	r7, #32
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40004800 	.word	0x40004800
 80010e4:	40021000 	.word	0x40021000
 80010e8:	40010c00 	.word	0x40010c00

080010ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr

080010f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <HardFault_Handler+0x4>

080010fe <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001102:	e7fe      	b.n	8001102 <MemManage_Handler+0x4>

08001104 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001108:	e7fe      	b.n	8001108 <BusFault_Handler+0x4>

0800110a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800110e:	e7fe      	b.n	800110e <UsageFault_Handler+0x4>

08001110 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr

0800111c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr

08001128 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr

08001134 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001138:	f000 f8d2 	bl	80012e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}

08001140 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001148:	4a14      	ldr	r2, [pc, #80]	; (800119c <_sbrk+0x5c>)
 800114a:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <_sbrk+0x60>)
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001154:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <_sbrk+0x64>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d102      	bne.n	8001162 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <_sbrk+0x64>)
 800115e:	4a12      	ldr	r2, [pc, #72]	; (80011a8 <_sbrk+0x68>)
 8001160:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <_sbrk+0x64>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	429a      	cmp	r2, r3
 800116e:	d207      	bcs.n	8001180 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001170:	f002 fc94 	bl	8003a9c <__errno>
 8001174:	4602      	mov	r2, r0
 8001176:	230c      	movs	r3, #12
 8001178:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800117a:	f04f 33ff 	mov.w	r3, #4294967295
 800117e:	e009      	b.n	8001194 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <_sbrk+0x64>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001186:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <_sbrk+0x64>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	4a05      	ldr	r2, [pc, #20]	; (80011a4 <_sbrk+0x64>)
 8001190:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001192:	68fb      	ldr	r3, [r7, #12]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20002000 	.word	0x20002000
 80011a0:	00000400 	.word	0x00000400
 80011a4:	20000090 	.word	0x20000090
 80011a8:	200001b0 	.word	0x200001b0

080011ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80011b0:	4b17      	ldr	r3, [pc, #92]	; (8001210 <SystemInit+0x64>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a16      	ldr	r2, [pc, #88]	; (8001210 <SystemInit+0x64>)
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80011bc:	4b14      	ldr	r3, [pc, #80]	; (8001210 <SystemInit+0x64>)
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	4913      	ldr	r1, [pc, #76]	; (8001210 <SystemInit+0x64>)
 80011c2:	4b14      	ldr	r3, [pc, #80]	; (8001214 <SystemInit+0x68>)
 80011c4:	4013      	ands	r3, r2
 80011c6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <SystemInit+0x64>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a10      	ldr	r2, [pc, #64]	; (8001210 <SystemInit+0x64>)
 80011ce:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80011d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011d6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011d8:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <SystemInit+0x64>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a0c      	ldr	r2, [pc, #48]	; (8001210 <SystemInit+0x64>)
 80011de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011e2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80011e4:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <SystemInit+0x64>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	4a09      	ldr	r2, [pc, #36]	; (8001210 <SystemInit+0x64>)
 80011ea:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80011ee:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
#elif defined(STM32F100xB) || defined(STM32F100xE)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80011f0:	4b07      	ldr	r3, [pc, #28]	; (8001210 <SystemInit+0x64>)
 80011f2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80011f6:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <SystemInit+0x64>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <SystemInit+0x6c>)
 8001200:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001204:	609a      	str	r2, [r3, #8]
#endif 
}
 8001206:	bf00      	nop
 8001208:	46bd      	mov	sp, r7
 800120a:	bc80      	pop	{r7}
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40021000 	.word	0x40021000
 8001214:	f8ff0000 	.word	0xf8ff0000
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800121c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800121e:	e003      	b.n	8001228 <LoopCopyDataInit>

08001220 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001222:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001224:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001226:	3104      	adds	r1, #4

08001228 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001228:	480a      	ldr	r0, [pc, #40]	; (8001254 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800122c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800122e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001230:	d3f6      	bcc.n	8001220 <CopyDataInit>
  ldr r2, =_sbss
 8001232:	4a0a      	ldr	r2, [pc, #40]	; (800125c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001234:	e002      	b.n	800123c <LoopFillZerobss>

08001236 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001236:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001238:	f842 3b04 	str.w	r3, [r2], #4

0800123c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800123e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001240:	d3f9      	bcc.n	8001236 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001242:	f7ff ffb3 	bl	80011ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001246:	f002 fc2f 	bl	8003aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800124a:	f7ff fb31 	bl	80008b0 <main>
  bx lr
 800124e:	4770      	bx	lr
  ldr r3, =_sidata
 8001250:	08004430 	.word	0x08004430
  ldr r0, =_sdata
 8001254:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001258:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800125c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001260:	200001ac 	.word	0x200001ac

08001264 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001264:	e7fe      	b.n	8001264 <ADC1_IRQHandler>

08001266 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800126a:	2003      	movs	r0, #3
 800126c:	f000 fb30 	bl	80018d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001270:	2000      	movs	r0, #0
 8001272:	f000 f805 	bl	8001280 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001276:	f7ff fdd3 	bl	8000e20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	bd80      	pop	{r7, pc}

08001280 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <HAL_InitTick+0x54>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <HAL_InitTick+0x58>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	4619      	mov	r1, r3
 8001292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001296:	fbb3 f3f1 	udiv	r3, r3, r1
 800129a:	fbb2 f3f3 	udiv	r3, r2, r3
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 fb3d 	bl	800191e <HAL_SYSTICK_Config>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e00e      	b.n	80012cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b0f      	cmp	r3, #15
 80012b2:	d80a      	bhi.n	80012ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b4:	2200      	movs	r2, #0
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295
 80012bc:	f000 fb13 	bl	80018e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012c0:	4a06      	ldr	r2, [pc, #24]	; (80012dc <HAL_InitTick+0x5c>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012c6:	2300      	movs	r3, #0
 80012c8:	e000      	b.n	80012cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000000 	.word	0x20000000
 80012d8:	20000008 	.word	0x20000008
 80012dc:	20000004 	.word	0x20000004

080012e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <HAL_IncTick+0x1c>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b05      	ldr	r3, [pc, #20]	; (8001300 <HAL_IncTick+0x20>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4413      	add	r3, r2
 80012f0:	4a03      	ldr	r2, [pc, #12]	; (8001300 <HAL_IncTick+0x20>)
 80012f2:	6013      	str	r3, [r2, #0]
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr
 80012fc:	20000008 	.word	0x20000008
 8001300:	200001a4 	.word	0x200001a4

08001304 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return uwTick;
 8001308:	4b02      	ldr	r3, [pc, #8]	; (8001314 <HAL_GetTick+0x10>)
 800130a:	681b      	ldr	r3, [r3, #0]
}
 800130c:	4618      	mov	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr
 8001314:	200001a4 	.word	0x200001a4

08001318 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001320:	f7ff fff0 	bl	8001304 <HAL_GetTick>
 8001324:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001330:	d005      	beq.n	800133e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <HAL_Delay+0x40>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	461a      	mov	r2, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4413      	add	r3, r2
 800133c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800133e:	bf00      	nop
 8001340:	f7ff ffe0 	bl	8001304 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	429a      	cmp	r2, r3
 800134e:	d8f7      	bhi.n	8001340 <HAL_Delay+0x28>
  {
  }
}
 8001350:	bf00      	nop
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000008 	.word	0x20000008

0800135c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001364:	2300      	movs	r3, #0
 8001366:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001368:	2300      	movs	r3, #0
 800136a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800136c:	2300      	movs	r3, #0
 800136e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e0be      	b.n	80014fc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001388:	2b00      	cmp	r3, #0
 800138a:	d109      	bne.n	80013a0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff fd72 	bl	8000e84 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 f9ab 	bl	80016fc <ADC_ConversionStop_Disable>
 80013a6:	4603      	mov	r3, r0
 80013a8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ae:	f003 0310 	and.w	r3, r3, #16
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f040 8099 	bne.w	80014ea <HAL_ADC_Init+0x18e>
 80013b8:	7dfb      	ldrb	r3, [r7, #23]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f040 8095 	bne.w	80014ea <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013c8:	f023 0302 	bic.w	r3, r3, #2
 80013cc:	f043 0202 	orr.w	r2, r3, #2
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013dc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	7b1b      	ldrb	r3, [r3, #12]
 80013e2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013e4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013f4:	d003      	beq.n	80013fe <HAL_ADC_Init+0xa2>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d102      	bne.n	8001404 <HAL_ADC_Init+0xa8>
 80013fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001402:	e000      	b.n	8001406 <HAL_ADC_Init+0xaa>
 8001404:	2300      	movs	r3, #0
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	7d1b      	ldrb	r3, [r3, #20]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d119      	bne.n	8001448 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	7b1b      	ldrb	r3, [r3, #12]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d109      	bne.n	8001430 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	3b01      	subs	r3, #1
 8001422:	035a      	lsls	r2, r3, #13
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4313      	orrs	r3, r2
 8001428:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	e00b      	b.n	8001448 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001434:	f043 0220 	orr.w	r2, r3, #32
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001440:	f043 0201 	orr.w	r2, r3, #1
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	430a      	orrs	r2, r1
 800145a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	4b28      	ldr	r3, [pc, #160]	; (8001504 <HAL_ADC_Init+0x1a8>)
 8001464:	4013      	ands	r3, r2
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	6812      	ldr	r2, [r2, #0]
 800146a:	68b9      	ldr	r1, [r7, #8]
 800146c:	430b      	orrs	r3, r1
 800146e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001478:	d003      	beq.n	8001482 <HAL_ADC_Init+0x126>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d104      	bne.n	800148c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	691b      	ldr	r3, [r3, #16]
 8001486:	3b01      	subs	r3, #1
 8001488:	051b      	lsls	r3, r3, #20
 800148a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001492:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	430a      	orrs	r2, r1
 800149e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	4b18      	ldr	r3, [pc, #96]	; (8001508 <HAL_ADC_Init+0x1ac>)
 80014a8:	4013      	ands	r3, r2
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d10b      	bne.n	80014c8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ba:	f023 0303 	bic.w	r3, r3, #3
 80014be:	f043 0201 	orr.w	r2, r3, #1
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014c6:	e018      	b.n	80014fa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014cc:	f023 0312 	bic.w	r3, r3, #18
 80014d0:	f043 0210 	orr.w	r2, r3, #16
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014dc:	f043 0201 	orr.w	r2, r3, #1
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014e8:	e007      	b.n	80014fa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ee:	f043 0210 	orr.w	r2, r3, #16
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	ffe1f7fd 	.word	0xffe1f7fd
 8001508:	ff1f0efe 	.word	0xff1f0efe

0800150c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800151a:	2300      	movs	r3, #0
 800151c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001524:	2b01      	cmp	r3, #1
 8001526:	d101      	bne.n	800152c <HAL_ADC_ConfigChannel+0x20>
 8001528:	2302      	movs	r3, #2
 800152a:	e0dc      	b.n	80016e6 <HAL_ADC_ConfigChannel+0x1da>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2201      	movs	r2, #1
 8001530:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b06      	cmp	r3, #6
 800153a:	d81c      	bhi.n	8001576 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	4613      	mov	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4413      	add	r3, r2
 800154c:	3b05      	subs	r3, #5
 800154e:	221f      	movs	r2, #31
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	43db      	mvns	r3, r3
 8001556:	4019      	ands	r1, r3
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	6818      	ldr	r0, [r3, #0]
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	3b05      	subs	r3, #5
 8001568:	fa00 f203 	lsl.w	r2, r0, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	430a      	orrs	r2, r1
 8001572:	635a      	str	r2, [r3, #52]	; 0x34
 8001574:	e03c      	b.n	80015f0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2b0c      	cmp	r3, #12
 800157c:	d81c      	bhi.n	80015b8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685a      	ldr	r2, [r3, #4]
 8001588:	4613      	mov	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	3b23      	subs	r3, #35	; 0x23
 8001590:	221f      	movs	r2, #31
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43db      	mvns	r3, r3
 8001598:	4019      	ands	r1, r3
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	6818      	ldr	r0, [r3, #0]
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	3b23      	subs	r3, #35	; 0x23
 80015aa:	fa00 f203 	lsl.w	r2, r0, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	631a      	str	r2, [r3, #48]	; 0x30
 80015b6:	e01b      	b.n	80015f0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	4613      	mov	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	3b41      	subs	r3, #65	; 0x41
 80015ca:	221f      	movs	r2, #31
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	4019      	ands	r1, r3
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	6818      	ldr	r0, [r3, #0]
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	4613      	mov	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	3b41      	subs	r3, #65	; 0x41
 80015e4:	fa00 f203 	lsl.w	r2, r0, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	430a      	orrs	r2, r1
 80015ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b09      	cmp	r3, #9
 80015f6:	d91c      	bls.n	8001632 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	68d9      	ldr	r1, [r3, #12]
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	4613      	mov	r3, r2
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	4413      	add	r3, r2
 8001608:	3b1e      	subs	r3, #30
 800160a:	2207      	movs	r2, #7
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	4019      	ands	r1, r3
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	6898      	ldr	r0, [r3, #8]
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4613      	mov	r3, r2
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	4413      	add	r3, r2
 8001622:	3b1e      	subs	r3, #30
 8001624:	fa00 f203 	lsl.w	r2, r0, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	430a      	orrs	r2, r1
 800162e:	60da      	str	r2, [r3, #12]
 8001630:	e019      	b.n	8001666 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6919      	ldr	r1, [r3, #16]
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4613      	mov	r3, r2
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	4413      	add	r3, r2
 8001642:	2207      	movs	r2, #7
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	4019      	ands	r1, r3
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	6898      	ldr	r0, [r3, #8]
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4613      	mov	r3, r2
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	4413      	add	r3, r2
 800165a:	fa00 f203 	lsl.w	r2, r0, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	430a      	orrs	r2, r1
 8001664:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b10      	cmp	r3, #16
 800166c:	d003      	beq.n	8001676 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001672:	2b11      	cmp	r3, #17
 8001674:	d132      	bne.n	80016dc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a1d      	ldr	r2, [pc, #116]	; (80016f0 <HAL_ADC_ConfigChannel+0x1e4>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d125      	bne.n	80016cc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d126      	bne.n	80016dc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800169c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2b10      	cmp	r3, #16
 80016a4:	d11a      	bne.n	80016dc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016a6:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <HAL_ADC_ConfigChannel+0x1e8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a13      	ldr	r2, [pc, #76]	; (80016f8 <HAL_ADC_ConfigChannel+0x1ec>)
 80016ac:	fba2 2303 	umull	r2, r3, r2, r3
 80016b0:	0c9a      	lsrs	r2, r3, #18
 80016b2:	4613      	mov	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016bc:	e002      	b.n	80016c4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	3b01      	subs	r3, #1
 80016c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f9      	bne.n	80016be <HAL_ADC_ConfigChannel+0x1b2>
 80016ca:	e007      	b.n	80016dc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d0:	f043 0220 	orr.w	r2, r3, #32
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr
 80016f0:	40012400 	.word	0x40012400
 80016f4:	20000000 	.word	0x20000000
 80016f8:	431bde83 	.word	0x431bde83

080016fc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001704:	2300      	movs	r3, #0
 8001706:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b01      	cmp	r3, #1
 8001714:	d127      	bne.n	8001766 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0201 	bic.w	r2, r2, #1
 8001724:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001726:	f7ff fded 	bl	8001304 <HAL_GetTick>
 800172a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800172c:	e014      	b.n	8001758 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800172e:	f7ff fde9 	bl	8001304 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d90d      	bls.n	8001758 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001740:	f043 0210 	orr.w	r2, r3, #16
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174c:	f043 0201 	orr.w	r2, r3, #1
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e007      	b.n	8001768 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b01      	cmp	r3, #1
 8001764:	d0e3      	beq.n	800172e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800178c:	4013      	ands	r3, r2
 800178e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001798:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800179c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017a2:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <__NVIC_SetPriorityGrouping+0x44>)
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	60d3      	str	r3, [r2, #12]
}
 80017a8:	bf00      	nop
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017bc:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <__NVIC_GetPriorityGrouping+0x18>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	0a1b      	lsrs	r3, r3, #8
 80017c2:	f003 0307 	and.w	r3, r3, #7
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	6039      	str	r1, [r7, #0]
 80017de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	db0a      	blt.n	80017fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	490c      	ldr	r1, [pc, #48]	; (8001820 <__NVIC_SetPriority+0x4c>)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	0112      	lsls	r2, r2, #4
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	440b      	add	r3, r1
 80017f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017fc:	e00a      	b.n	8001814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	b2da      	uxtb	r2, r3
 8001802:	4908      	ldr	r1, [pc, #32]	; (8001824 <__NVIC_SetPriority+0x50>)
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	f003 030f 	and.w	r3, r3, #15
 800180a:	3b04      	subs	r3, #4
 800180c:	0112      	lsls	r2, r2, #4
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	440b      	add	r3, r1
 8001812:	761a      	strb	r2, [r3, #24]
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000e100 	.word	0xe000e100
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001828:	b480      	push	{r7}
 800182a:	b089      	sub	sp, #36	; 0x24
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f1c3 0307 	rsb	r3, r3, #7
 8001842:	2b04      	cmp	r3, #4
 8001844:	bf28      	it	cs
 8001846:	2304      	movcs	r3, #4
 8001848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	3304      	adds	r3, #4
 800184e:	2b06      	cmp	r3, #6
 8001850:	d902      	bls.n	8001858 <NVIC_EncodePriority+0x30>
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	3b03      	subs	r3, #3
 8001856:	e000      	b.n	800185a <NVIC_EncodePriority+0x32>
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800185c:	f04f 32ff 	mov.w	r2, #4294967295
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43da      	mvns	r2, r3
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	401a      	ands	r2, r3
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001870:	f04f 31ff 	mov.w	r1, #4294967295
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	fa01 f303 	lsl.w	r3, r1, r3
 800187a:	43d9      	mvns	r1, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001880:	4313      	orrs	r3, r2
         );
}
 8001882:	4618      	mov	r0, r3
 8001884:	3724      	adds	r7, #36	; 0x24
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr

0800188c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3b01      	subs	r3, #1
 8001898:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800189c:	d301      	bcc.n	80018a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800189e:	2301      	movs	r3, #1
 80018a0:	e00f      	b.n	80018c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018a2:	4a0a      	ldr	r2, [pc, #40]	; (80018cc <SysTick_Config+0x40>)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018aa:	210f      	movs	r1, #15
 80018ac:	f04f 30ff 	mov.w	r0, #4294967295
 80018b0:	f7ff ff90 	bl	80017d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <SysTick_Config+0x40>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ba:	4b04      	ldr	r3, [pc, #16]	; (80018cc <SysTick_Config+0x40>)
 80018bc:	2207      	movs	r2, #7
 80018be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	e000e010 	.word	0xe000e010

080018d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff ff49 	bl	8001770 <__NVIC_SetPriorityGrouping>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b086      	sub	sp, #24
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	4603      	mov	r3, r0
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
 80018f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018f8:	f7ff ff5e 	bl	80017b8 <__NVIC_GetPriorityGrouping>
 80018fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	68b9      	ldr	r1, [r7, #8]
 8001902:	6978      	ldr	r0, [r7, #20]
 8001904:	f7ff ff90 	bl	8001828 <NVIC_EncodePriority>
 8001908:	4602      	mov	r2, r0
 800190a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800190e:	4611      	mov	r1, r2
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ff5f 	bl	80017d4 <__NVIC_SetPriority>
}
 8001916:	bf00      	nop
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7ff ffb0 	bl	800188c <SysTick_Config>
 800192c:	4603      	mov	r3, r0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
	...

08001938 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001938:	b480      	push	{r7}
 800193a:	b08b      	sub	sp, #44	; 0x2c
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001942:	2300      	movs	r3, #0
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001946:	2300      	movs	r3, #0
 8001948:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800194a:	e127      	b.n	8001b9c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800194c:	2201      	movs	r2, #1
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	69fa      	ldr	r2, [r7, #28]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	429a      	cmp	r2, r3
 8001966:	f040 8116 	bne.w	8001b96 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b12      	cmp	r3, #18
 8001970:	d034      	beq.n	80019dc <HAL_GPIO_Init+0xa4>
 8001972:	2b12      	cmp	r3, #18
 8001974:	d80d      	bhi.n	8001992 <HAL_GPIO_Init+0x5a>
 8001976:	2b02      	cmp	r3, #2
 8001978:	d02b      	beq.n	80019d2 <HAL_GPIO_Init+0x9a>
 800197a:	2b02      	cmp	r3, #2
 800197c:	d804      	bhi.n	8001988 <HAL_GPIO_Init+0x50>
 800197e:	2b00      	cmp	r3, #0
 8001980:	d031      	beq.n	80019e6 <HAL_GPIO_Init+0xae>
 8001982:	2b01      	cmp	r3, #1
 8001984:	d01c      	beq.n	80019c0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001986:	e048      	b.n	8001a1a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001988:	2b03      	cmp	r3, #3
 800198a:	d043      	beq.n	8001a14 <HAL_GPIO_Init+0xdc>
 800198c:	2b11      	cmp	r3, #17
 800198e:	d01b      	beq.n	80019c8 <HAL_GPIO_Init+0x90>
          break;
 8001990:	e043      	b.n	8001a1a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001992:	4a89      	ldr	r2, [pc, #548]	; (8001bb8 <HAL_GPIO_Init+0x280>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d026      	beq.n	80019e6 <HAL_GPIO_Init+0xae>
 8001998:	4a87      	ldr	r2, [pc, #540]	; (8001bb8 <HAL_GPIO_Init+0x280>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d806      	bhi.n	80019ac <HAL_GPIO_Init+0x74>
 800199e:	4a87      	ldr	r2, [pc, #540]	; (8001bbc <HAL_GPIO_Init+0x284>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d020      	beq.n	80019e6 <HAL_GPIO_Init+0xae>
 80019a4:	4a86      	ldr	r2, [pc, #536]	; (8001bc0 <HAL_GPIO_Init+0x288>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d01d      	beq.n	80019e6 <HAL_GPIO_Init+0xae>
          break;
 80019aa:	e036      	b.n	8001a1a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019ac:	4a85      	ldr	r2, [pc, #532]	; (8001bc4 <HAL_GPIO_Init+0x28c>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d019      	beq.n	80019e6 <HAL_GPIO_Init+0xae>
 80019b2:	4a85      	ldr	r2, [pc, #532]	; (8001bc8 <HAL_GPIO_Init+0x290>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d016      	beq.n	80019e6 <HAL_GPIO_Init+0xae>
 80019b8:	4a84      	ldr	r2, [pc, #528]	; (8001bcc <HAL_GPIO_Init+0x294>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d013      	beq.n	80019e6 <HAL_GPIO_Init+0xae>
          break;
 80019be:	e02c      	b.n	8001a1a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	623b      	str	r3, [r7, #32]
          break;
 80019c6:	e028      	b.n	8001a1a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	3304      	adds	r3, #4
 80019ce:	623b      	str	r3, [r7, #32]
          break;
 80019d0:	e023      	b.n	8001a1a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	3308      	adds	r3, #8
 80019d8:	623b      	str	r3, [r7, #32]
          break;
 80019da:	e01e      	b.n	8001a1a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	330c      	adds	r3, #12
 80019e2:	623b      	str	r3, [r7, #32]
          break;
 80019e4:	e019      	b.n	8001a1a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d102      	bne.n	80019f4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019ee:	2304      	movs	r3, #4
 80019f0:	623b      	str	r3, [r7, #32]
          break;
 80019f2:	e012      	b.n	8001a1a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d105      	bne.n	8001a08 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019fc:	2308      	movs	r3, #8
 80019fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	69fa      	ldr	r2, [r7, #28]
 8001a04:	611a      	str	r2, [r3, #16]
          break;
 8001a06:	e008      	b.n	8001a1a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a08:	2308      	movs	r3, #8
 8001a0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69fa      	ldr	r2, [r7, #28]
 8001a10:	615a      	str	r2, [r3, #20]
          break;
 8001a12:	e002      	b.n	8001a1a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a14:	2300      	movs	r3, #0
 8001a16:	623b      	str	r3, [r7, #32]
          break;
 8001a18:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	2bff      	cmp	r3, #255	; 0xff
 8001a1e:	d801      	bhi.n	8001a24 <HAL_GPIO_Init+0xec>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	e001      	b.n	8001a28 <HAL_GPIO_Init+0xf0>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3304      	adds	r3, #4
 8001a28:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	2bff      	cmp	r3, #255	; 0xff
 8001a2e:	d802      	bhi.n	8001a36 <HAL_GPIO_Init+0xfe>
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	e002      	b.n	8001a3c <HAL_GPIO_Init+0x104>
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	3b08      	subs	r3, #8
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	210f      	movs	r1, #15
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	401a      	ands	r2, r3
 8001a4e:	6a39      	ldr	r1, [r7, #32]
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	fa01 f303 	lsl.w	r3, r1, r3
 8001a56:	431a      	orrs	r2, r3
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 8096 	beq.w	8001b96 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a6a:	4b59      	ldr	r3, [pc, #356]	; (8001bd0 <HAL_GPIO_Init+0x298>)
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	4a58      	ldr	r2, [pc, #352]	; (8001bd0 <HAL_GPIO_Init+0x298>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6193      	str	r3, [r2, #24]
 8001a76:	4b56      	ldr	r3, [pc, #344]	; (8001bd0 <HAL_GPIO_Init+0x298>)
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a82:	4a54      	ldr	r2, [pc, #336]	; (8001bd4 <HAL_GPIO_Init+0x29c>)
 8001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a86:	089b      	lsrs	r3, r3, #2
 8001a88:	3302      	adds	r3, #2
 8001a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	f003 0303 	and.w	r3, r3, #3
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	220f      	movs	r2, #15
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	68fa      	ldr	r2, [r7, #12]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a4b      	ldr	r2, [pc, #300]	; (8001bd8 <HAL_GPIO_Init+0x2a0>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d013      	beq.n	8001ad6 <HAL_GPIO_Init+0x19e>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a4a      	ldr	r2, [pc, #296]	; (8001bdc <HAL_GPIO_Init+0x2a4>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d00d      	beq.n	8001ad2 <HAL_GPIO_Init+0x19a>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a49      	ldr	r2, [pc, #292]	; (8001be0 <HAL_GPIO_Init+0x2a8>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d007      	beq.n	8001ace <HAL_GPIO_Init+0x196>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a48      	ldr	r2, [pc, #288]	; (8001be4 <HAL_GPIO_Init+0x2ac>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d101      	bne.n	8001aca <HAL_GPIO_Init+0x192>
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e006      	b.n	8001ad8 <HAL_GPIO_Init+0x1a0>
 8001aca:	2304      	movs	r3, #4
 8001acc:	e004      	b.n	8001ad8 <HAL_GPIO_Init+0x1a0>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e002      	b.n	8001ad8 <HAL_GPIO_Init+0x1a0>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <HAL_GPIO_Init+0x1a0>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ada:	f002 0203 	and.w	r2, r2, #3
 8001ade:	0092      	lsls	r2, r2, #2
 8001ae0:	4093      	lsls	r3, r2
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ae8:	493a      	ldr	r1, [pc, #232]	; (8001bd4 <HAL_GPIO_Init+0x29c>)
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	089b      	lsrs	r3, r3, #2
 8001aee:	3302      	adds	r3, #2
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d006      	beq.n	8001b10 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b02:	4b39      	ldr	r3, [pc, #228]	; (8001be8 <HAL_GPIO_Init+0x2b0>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	4938      	ldr	r1, [pc, #224]	; (8001be8 <HAL_GPIO_Init+0x2b0>)
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	600b      	str	r3, [r1, #0]
 8001b0e:	e006      	b.n	8001b1e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b10:	4b35      	ldr	r3, [pc, #212]	; (8001be8 <HAL_GPIO_Init+0x2b0>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	43db      	mvns	r3, r3
 8001b18:	4933      	ldr	r1, [pc, #204]	; (8001be8 <HAL_GPIO_Init+0x2b0>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d006      	beq.n	8001b38 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b2a:	4b2f      	ldr	r3, [pc, #188]	; (8001be8 <HAL_GPIO_Init+0x2b0>)
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	492e      	ldr	r1, [pc, #184]	; (8001be8 <HAL_GPIO_Init+0x2b0>)
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	604b      	str	r3, [r1, #4]
 8001b36:	e006      	b.n	8001b46 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b38:	4b2b      	ldr	r3, [pc, #172]	; (8001be8 <HAL_GPIO_Init+0x2b0>)
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	4929      	ldr	r1, [pc, #164]	; (8001be8 <HAL_GPIO_Init+0x2b0>)
 8001b42:	4013      	ands	r3, r2
 8001b44:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d006      	beq.n	8001b60 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b52:	4b25      	ldr	r3, [pc, #148]	; (8001be8 <HAL_GPIO_Init+0x2b0>)
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	4924      	ldr	r1, [pc, #144]	; (8001be8 <HAL_GPIO_Init+0x2b0>)
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	608b      	str	r3, [r1, #8]
 8001b5e:	e006      	b.n	8001b6e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b60:	4b21      	ldr	r3, [pc, #132]	; (8001be8 <HAL_GPIO_Init+0x2b0>)
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	43db      	mvns	r3, r3
 8001b68:	491f      	ldr	r1, [pc, #124]	; (8001be8 <HAL_GPIO_Init+0x2b0>)
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d006      	beq.n	8001b88 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b7a:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <HAL_GPIO_Init+0x2b0>)
 8001b7c:	68da      	ldr	r2, [r3, #12]
 8001b7e:	491a      	ldr	r1, [pc, #104]	; (8001be8 <HAL_GPIO_Init+0x2b0>)
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	60cb      	str	r3, [r1, #12]
 8001b86:	e006      	b.n	8001b96 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b88:	4b17      	ldr	r3, [pc, #92]	; (8001be8 <HAL_GPIO_Init+0x2b0>)
 8001b8a:	68da      	ldr	r2, [r3, #12]
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	4915      	ldr	r1, [pc, #84]	; (8001be8 <HAL_GPIO_Init+0x2b0>)
 8001b92:	4013      	ands	r3, r2
 8001b94:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	3301      	adds	r3, #1
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f47f aed0 	bne.w	800194c <HAL_GPIO_Init+0x14>
  }
}
 8001bac:	bf00      	nop
 8001bae:	372c      	adds	r7, #44	; 0x2c
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	10210000 	.word	0x10210000
 8001bbc:	10110000 	.word	0x10110000
 8001bc0:	10120000 	.word	0x10120000
 8001bc4:	10310000 	.word	0x10310000
 8001bc8:	10320000 	.word	0x10320000
 8001bcc:	10220000 	.word	0x10220000
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40010000 	.word	0x40010000
 8001bd8:	40010800 	.word	0x40010800
 8001bdc:	40010c00 	.word	0x40010c00
 8001be0:	40011000 	.word	0x40011000
 8001be4:	40011400 	.word	0x40011400
 8001be8:	40010400 	.word	0x40010400

08001bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	807b      	strh	r3, [r7, #2]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bfc:	787b      	ldrb	r3, [r7, #1]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c02:	887a      	ldrh	r2, [r7, #2]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c08:	e003      	b.n	8001c12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c0a:	887b      	ldrh	r3, [r7, #2]
 8001c0c:	041a      	lsls	r2, r3, #16
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	611a      	str	r2, [r3, #16]
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr

08001c1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e26c      	b.n	8002108 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f000 8087 	beq.w	8001d4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c3c:	4b92      	ldr	r3, [pc, #584]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 030c 	and.w	r3, r3, #12
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	d00c      	beq.n	8001c62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c48:	4b8f      	ldr	r3, [pc, #572]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 030c 	and.w	r3, r3, #12
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d112      	bne.n	8001c7a <HAL_RCC_OscConfig+0x5e>
 8001c54:	4b8c      	ldr	r3, [pc, #560]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c60:	d10b      	bne.n	8001c7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c62:	4b89      	ldr	r3, [pc, #548]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d06c      	beq.n	8001d48 <HAL_RCC_OscConfig+0x12c>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d168      	bne.n	8001d48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e246      	b.n	8002108 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c82:	d106      	bne.n	8001c92 <HAL_RCC_OscConfig+0x76>
 8001c84:	4b80      	ldr	r3, [pc, #512]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a7f      	ldr	r2, [pc, #508]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c8e:	6013      	str	r3, [r2, #0]
 8001c90:	e02e      	b.n	8001cf0 <HAL_RCC_OscConfig+0xd4>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10c      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x98>
 8001c9a:	4b7b      	ldr	r3, [pc, #492]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a7a      	ldr	r2, [pc, #488]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	4b78      	ldr	r3, [pc, #480]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a77      	ldr	r2, [pc, #476]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	e01d      	b.n	8001cf0 <HAL_RCC_OscConfig+0xd4>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cbc:	d10c      	bne.n	8001cd8 <HAL_RCC_OscConfig+0xbc>
 8001cbe:	4b72      	ldr	r3, [pc, #456]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a71      	ldr	r2, [pc, #452]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	4b6f      	ldr	r3, [pc, #444]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a6e      	ldr	r2, [pc, #440]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	e00b      	b.n	8001cf0 <HAL_RCC_OscConfig+0xd4>
 8001cd8:	4b6b      	ldr	r3, [pc, #428]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a6a      	ldr	r2, [pc, #424]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	4b68      	ldr	r3, [pc, #416]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a67      	ldr	r2, [pc, #412]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d013      	beq.n	8001d20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf8:	f7ff fb04 	bl	8001304 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d00:	f7ff fb00 	bl	8001304 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b64      	cmp	r3, #100	; 0x64
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e1fa      	b.n	8002108 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d12:	4b5d      	ldr	r3, [pc, #372]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCC_OscConfig+0xe4>
 8001d1e:	e014      	b.n	8001d4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d20:	f7ff faf0 	bl	8001304 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d28:	f7ff faec 	bl	8001304 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b64      	cmp	r3, #100	; 0x64
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e1e6      	b.n	8002108 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3a:	4b53      	ldr	r3, [pc, #332]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x10c>
 8001d46:	e000      	b.n	8001d4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d063      	beq.n	8001e1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d56:	4b4c      	ldr	r3, [pc, #304]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 030c 	and.w	r3, r3, #12
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00b      	beq.n	8001d7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d62:	4b49      	ldr	r3, [pc, #292]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 030c 	and.w	r3, r3, #12
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d11c      	bne.n	8001da8 <HAL_RCC_OscConfig+0x18c>
 8001d6e:	4b46      	ldr	r3, [pc, #280]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d116      	bne.n	8001da8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d7a:	4b43      	ldr	r3, [pc, #268]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d005      	beq.n	8001d92 <HAL_RCC_OscConfig+0x176>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d001      	beq.n	8001d92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e1ba      	b.n	8002108 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d92:	4b3d      	ldr	r3, [pc, #244]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	4939      	ldr	r1, [pc, #228]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da6:	e03a      	b.n	8001e1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d020      	beq.n	8001df2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db0:	4b36      	ldr	r3, [pc, #216]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db6:	f7ff faa5 	bl	8001304 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dbe:	f7ff faa1 	bl	8001304 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e19b      	b.n	8002108 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd0:	4b2d      	ldr	r3, [pc, #180]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0f0      	beq.n	8001dbe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ddc:	4b2a      	ldr	r3, [pc, #168]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	4927      	ldr	r1, [pc, #156]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	600b      	str	r3, [r1, #0]
 8001df0:	e015      	b.n	8001e1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001df2:	4b26      	ldr	r3, [pc, #152]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df8:	f7ff fa84 	bl	8001304 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e00:	f7ff fa80 	bl	8001304 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e17a      	b.n	8002108 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e12:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f0      	bne.n	8001e00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d03a      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d019      	beq.n	8001e66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e32:	4b17      	ldr	r3, [pc, #92]	; (8001e90 <HAL_RCC_OscConfig+0x274>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e38:	f7ff fa64 	bl	8001304 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e40:	f7ff fa60 	bl	8001304 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e15a      	b.n	8002108 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e52:	4b0d      	ldr	r3, [pc, #52]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0f0      	beq.n	8001e40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e5e:	2001      	movs	r0, #1
 8001e60:	f000 faaa 	bl	80023b8 <RCC_Delay>
 8001e64:	e01c      	b.n	8001ea0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e66:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <HAL_RCC_OscConfig+0x274>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6c:	f7ff fa4a 	bl	8001304 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e72:	e00f      	b.n	8001e94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e74:	f7ff fa46 	bl	8001304 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d908      	bls.n	8001e94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e140      	b.n	8002108 <HAL_RCC_OscConfig+0x4ec>
 8001e86:	bf00      	nop
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	42420000 	.word	0x42420000
 8001e90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e94:	4b9e      	ldr	r3, [pc, #632]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1e9      	bne.n	8001e74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 80a6 	beq.w	8001ffa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eb2:	4b97      	ldr	r3, [pc, #604]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10d      	bne.n	8001eda <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ebe:	4b94      	ldr	r3, [pc, #592]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	4a93      	ldr	r2, [pc, #588]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	61d3      	str	r3, [r2, #28]
 8001eca:	4b91      	ldr	r3, [pc, #580]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	60bb      	str	r3, [r7, #8]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eda:	4b8e      	ldr	r3, [pc, #568]	; (8002114 <HAL_RCC_OscConfig+0x4f8>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d118      	bne.n	8001f18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ee6:	4b8b      	ldr	r3, [pc, #556]	; (8002114 <HAL_RCC_OscConfig+0x4f8>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a8a      	ldr	r2, [pc, #552]	; (8002114 <HAL_RCC_OscConfig+0x4f8>)
 8001eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ef2:	f7ff fa07 	bl	8001304 <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef8:	e008      	b.n	8001f0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001efa:	f7ff fa03 	bl	8001304 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b64      	cmp	r3, #100	; 0x64
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e0fd      	b.n	8002108 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0c:	4b81      	ldr	r3, [pc, #516]	; (8002114 <HAL_RCC_OscConfig+0x4f8>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d0f0      	beq.n	8001efa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d106      	bne.n	8001f2e <HAL_RCC_OscConfig+0x312>
 8001f20:	4b7b      	ldr	r3, [pc, #492]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	4a7a      	ldr	r2, [pc, #488]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	6213      	str	r3, [r2, #32]
 8001f2c:	e02d      	b.n	8001f8a <HAL_RCC_OscConfig+0x36e>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10c      	bne.n	8001f50 <HAL_RCC_OscConfig+0x334>
 8001f36:	4b76      	ldr	r3, [pc, #472]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	4a75      	ldr	r2, [pc, #468]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001f3c:	f023 0301 	bic.w	r3, r3, #1
 8001f40:	6213      	str	r3, [r2, #32]
 8001f42:	4b73      	ldr	r3, [pc, #460]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	4a72      	ldr	r2, [pc, #456]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001f48:	f023 0304 	bic.w	r3, r3, #4
 8001f4c:	6213      	str	r3, [r2, #32]
 8001f4e:	e01c      	b.n	8001f8a <HAL_RCC_OscConfig+0x36e>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	2b05      	cmp	r3, #5
 8001f56:	d10c      	bne.n	8001f72 <HAL_RCC_OscConfig+0x356>
 8001f58:	4b6d      	ldr	r3, [pc, #436]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	4a6c      	ldr	r2, [pc, #432]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001f5e:	f043 0304 	orr.w	r3, r3, #4
 8001f62:	6213      	str	r3, [r2, #32]
 8001f64:	4b6a      	ldr	r3, [pc, #424]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	4a69      	ldr	r2, [pc, #420]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001f6a:	f043 0301 	orr.w	r3, r3, #1
 8001f6e:	6213      	str	r3, [r2, #32]
 8001f70:	e00b      	b.n	8001f8a <HAL_RCC_OscConfig+0x36e>
 8001f72:	4b67      	ldr	r3, [pc, #412]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	4a66      	ldr	r2, [pc, #408]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001f78:	f023 0301 	bic.w	r3, r3, #1
 8001f7c:	6213      	str	r3, [r2, #32]
 8001f7e:	4b64      	ldr	r3, [pc, #400]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	4a63      	ldr	r2, [pc, #396]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001f84:	f023 0304 	bic.w	r3, r3, #4
 8001f88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d015      	beq.n	8001fbe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f92:	f7ff f9b7 	bl	8001304 <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f98:	e00a      	b.n	8001fb0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f9a:	f7ff f9b3 	bl	8001304 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e0ab      	b.n	8002108 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb0:	4b57      	ldr	r3, [pc, #348]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0ee      	beq.n	8001f9a <HAL_RCC_OscConfig+0x37e>
 8001fbc:	e014      	b.n	8001fe8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fbe:	f7ff f9a1 	bl	8001304 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc4:	e00a      	b.n	8001fdc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc6:	f7ff f99d 	bl	8001304 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e095      	b.n	8002108 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fdc:	4b4c      	ldr	r3, [pc, #304]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1ee      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fe8:	7dfb      	ldrb	r3, [r7, #23]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d105      	bne.n	8001ffa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fee:	4b48      	ldr	r3, [pc, #288]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	4a47      	ldr	r2, [pc, #284]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001ff4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ff8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 8081 	beq.w	8002106 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002004:	4b42      	ldr	r3, [pc, #264]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 030c 	and.w	r3, r3, #12
 800200c:	2b08      	cmp	r3, #8
 800200e:	d061      	beq.n	80020d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	2b02      	cmp	r3, #2
 8002016:	d146      	bne.n	80020a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002018:	4b3f      	ldr	r3, [pc, #252]	; (8002118 <HAL_RCC_OscConfig+0x4fc>)
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201e:	f7ff f971 	bl	8001304 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002026:	f7ff f96d 	bl	8001304 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e067      	b.n	8002108 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002038:	4b35      	ldr	r3, [pc, #212]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1f0      	bne.n	8002026 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800204c:	d108      	bne.n	8002060 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800204e:	4b30      	ldr	r3, [pc, #192]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8002050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002052:	f023 020f 	bic.w	r2, r3, #15
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	492d      	ldr	r1, [pc, #180]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 800205c:	4313      	orrs	r3, r2
 800205e:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002060:	4b2b      	ldr	r3, [pc, #172]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a19      	ldr	r1, [r3, #32]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002070:	430b      	orrs	r3, r1
 8002072:	4927      	ldr	r1, [pc, #156]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8002074:	4313      	orrs	r3, r2
 8002076:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002078:	4b27      	ldr	r3, [pc, #156]	; (8002118 <HAL_RCC_OscConfig+0x4fc>)
 800207a:	2201      	movs	r2, #1
 800207c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207e:	f7ff f941 	bl	8001304 <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002086:	f7ff f93d 	bl	8001304 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e037      	b.n	8002108 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002098:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0f0      	beq.n	8002086 <HAL_RCC_OscConfig+0x46a>
 80020a4:	e02f      	b.n	8002106 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a6:	4b1c      	ldr	r3, [pc, #112]	; (8002118 <HAL_RCC_OscConfig+0x4fc>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ac:	f7ff f92a 	bl	8001304 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b4:	f7ff f926 	bl	8001304 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e020      	b.n	8002108 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020c6:	4b12      	ldr	r3, [pc, #72]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f0      	bne.n	80020b4 <HAL_RCC_OscConfig+0x498>
 80020d2:	e018      	b.n	8002106 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69db      	ldr	r3, [r3, #28]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e013      	b.n	8002108 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020e0:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d106      	bne.n	8002102 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020fe:	429a      	cmp	r2, r3
 8002100:	d001      	beq.n	8002106 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40021000 	.word	0x40021000
 8002114:	40007000 	.word	0x40007000
 8002118:	42420060 	.word	0x42420060

0800211c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0a0      	b.n	8002272 <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d020      	beq.n	800217e <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	d005      	beq.n	8002154 <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002148:	4b4c      	ldr	r3, [pc, #304]	; (800227c <HAL_RCC_ClockConfig+0x160>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	4a4b      	ldr	r2, [pc, #300]	; (800227c <HAL_RCC_ClockConfig+0x160>)
 800214e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002152:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002160:	4b46      	ldr	r3, [pc, #280]	; (800227c <HAL_RCC_ClockConfig+0x160>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	4a45      	ldr	r2, [pc, #276]	; (800227c <HAL_RCC_ClockConfig+0x160>)
 8002166:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800216a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800216c:	4b43      	ldr	r3, [pc, #268]	; (800227c <HAL_RCC_ClockConfig+0x160>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	4940      	ldr	r1, [pc, #256]	; (800227c <HAL_RCC_ClockConfig+0x160>)
 800217a:	4313      	orrs	r3, r2
 800217c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d040      	beq.n	800220c <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d107      	bne.n	80021a2 <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002192:	4b3a      	ldr	r3, [pc, #232]	; (800227c <HAL_RCC_ClockConfig+0x160>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d115      	bne.n	80021ca <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e067      	b.n	8002272 <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d107      	bne.n	80021ba <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021aa:	4b34      	ldr	r3, [pc, #208]	; (800227c <HAL_RCC_ClockConfig+0x160>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d109      	bne.n	80021ca <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e05b      	b.n	8002272 <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ba:	4b30      	ldr	r3, [pc, #192]	; (800227c <HAL_RCC_ClockConfig+0x160>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e053      	b.n	8002272 <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ca:	4b2c      	ldr	r3, [pc, #176]	; (800227c <HAL_RCC_ClockConfig+0x160>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f023 0203 	bic.w	r2, r3, #3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	4929      	ldr	r1, [pc, #164]	; (800227c <HAL_RCC_ClockConfig+0x160>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021dc:	f7ff f892 	bl	8001304 <HAL_GetTick>
 80021e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e2:	e00a      	b.n	80021fa <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e4:	f7ff f88e 	bl	8001304 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e03b      	b.n	8002272 <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fa:	4b20      	ldr	r3, [pc, #128]	; (800227c <HAL_RCC_ClockConfig+0x160>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 020c 	and.w	r2, r3, #12
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	429a      	cmp	r2, r3
 800220a:	d1eb      	bne.n	80021e4 <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b00      	cmp	r3, #0
 8002216:	d008      	beq.n	800222a <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002218:	4b18      	ldr	r3, [pc, #96]	; (800227c <HAL_RCC_ClockConfig+0x160>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	4915      	ldr	r1, [pc, #84]	; (800227c <HAL_RCC_ClockConfig+0x160>)
 8002226:	4313      	orrs	r3, r2
 8002228:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b00      	cmp	r3, #0
 8002234:	d009      	beq.n	800224a <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002236:	4b11      	ldr	r3, [pc, #68]	; (800227c <HAL_RCC_ClockConfig+0x160>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	490d      	ldr	r1, [pc, #52]	; (800227c <HAL_RCC_ClockConfig+0x160>)
 8002246:	4313      	orrs	r3, r2
 8002248:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800224a:	f000 f81f 	bl	800228c <HAL_RCC_GetSysClockFreq>
 800224e:	4601      	mov	r1, r0
 8002250:	4b0a      	ldr	r3, [pc, #40]	; (800227c <HAL_RCC_ClockConfig+0x160>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	091b      	lsrs	r3, r3, #4
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	4a09      	ldr	r2, [pc, #36]	; (8002280 <HAL_RCC_ClockConfig+0x164>)
 800225c:	5cd3      	ldrb	r3, [r2, r3]
 800225e:	fa21 f303 	lsr.w	r3, r1, r3
 8002262:	4a08      	ldr	r2, [pc, #32]	; (8002284 <HAL_RCC_ClockConfig+0x168>)
 8002264:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002266:	4b08      	ldr	r3, [pc, #32]	; (8002288 <HAL_RCC_ClockConfig+0x16c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff f808 	bl	8001280 <HAL_InitTick>

  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40021000 	.word	0x40021000
 8002280:	080043dc 	.word	0x080043dc
 8002284:	20000000 	.word	0x20000000
 8002288:	20000004 	.word	0x20000004

0800228c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800228c:	b490      	push	{r4, r7}
 800228e:	b08e      	sub	sp, #56	; 0x38
 8002290:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002292:	4b2b      	ldr	r3, [pc, #172]	; (8002340 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002294:	f107 0414 	add.w	r4, r7, #20
 8002298:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800229a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 800229e:	4b29      	ldr	r3, [pc, #164]	; (8002344 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022a0:	1d3c      	adds	r4, r7, #4
 80022a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022a8:	2300      	movs	r3, #0
 80022aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022ac:	2300      	movs	r3, #0
 80022ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80022b0:	2300      	movs	r3, #0
 80022b2:	637b      	str	r3, [r7, #52]	; 0x34
 80022b4:	2300      	movs	r3, #0
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80022b8:	2300      	movs	r3, #0
 80022ba:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022bc:	4b22      	ldr	r3, [pc, #136]	; (8002348 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c4:	f003 030c 	and.w	r3, r3, #12
 80022c8:	2b04      	cmp	r3, #4
 80022ca:	d002      	beq.n	80022d2 <HAL_RCC_GetSysClockFreq+0x46>
 80022cc:	2b08      	cmp	r3, #8
 80022ce:	d003      	beq.n	80022d8 <HAL_RCC_GetSysClockFreq+0x4c>
 80022d0:	e02c      	b.n	800232c <HAL_RCC_GetSysClockFreq+0xa0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022d2:	4b1e      	ldr	r3, [pc, #120]	; (800234c <HAL_RCC_GetSysClockFreq+0xc0>)
 80022d4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022d6:	e02c      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022da:	0c9b      	lsrs	r3, r3, #18
 80022dc:	f003 030f 	and.w	r3, r3, #15
 80022e0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022e4:	4413      	add	r3, r2
 80022e6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022ea:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d012      	beq.n	800231c <HAL_RCC_GetSysClockFreq+0x90>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80022f6:	4b14      	ldr	r3, [pc, #80]	; (8002348 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002302:	4413      	add	r3, r2
 8002304:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8002308:	62bb      	str	r3, [r7, #40]	; 0x28
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	4a0f      	ldr	r2, [pc, #60]	; (800234c <HAL_RCC_GetSysClockFreq+0xc0>)
 800230e:	fb02 f203 	mul.w	r2, r2, r3
 8002312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002314:	fbb2 f3f3 	udiv	r3, r2, r3
 8002318:	637b      	str	r3, [r7, #52]	; 0x34
 800231a:	e004      	b.n	8002326 <HAL_RCC_GetSysClockFreq+0x9a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231e:	4a0c      	ldr	r2, [pc, #48]	; (8002350 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002320:	fb02 f303 	mul.w	r3, r2, r3
 8002324:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 8002326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002328:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800232a:	e002      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800232c:	4b07      	ldr	r3, [pc, #28]	; (800234c <HAL_RCC_GetSysClockFreq+0xc0>)
 800232e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002330:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002334:	4618      	mov	r0, r3
 8002336:	3738      	adds	r7, #56	; 0x38
 8002338:	46bd      	mov	sp, r7
 800233a:	bc90      	pop	{r4, r7}
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	0800439c 	.word	0x0800439c
 8002344:	080043ac 	.word	0x080043ac
 8002348:	40021000 	.word	0x40021000
 800234c:	007a1200 	.word	0x007a1200
 8002350:	003d0900 	.word	0x003d0900

08002354 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002358:	4b02      	ldr	r3, [pc, #8]	; (8002364 <HAL_RCC_GetHCLKFreq+0x10>)
 800235a:	681b      	ldr	r3, [r3, #0]
}
 800235c:	4618      	mov	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr
 8002364:	20000000 	.word	0x20000000

08002368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800236c:	f7ff fff2 	bl	8002354 <HAL_RCC_GetHCLKFreq>
 8002370:	4601      	mov	r1, r0
 8002372:	4b05      	ldr	r3, [pc, #20]	; (8002388 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	0a1b      	lsrs	r3, r3, #8
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	4a03      	ldr	r2, [pc, #12]	; (800238c <HAL_RCC_GetPCLK1Freq+0x24>)
 800237e:	5cd3      	ldrb	r3, [r2, r3]
 8002380:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002384:	4618      	mov	r0, r3
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40021000 	.word	0x40021000
 800238c:	080043ec 	.word	0x080043ec

08002390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002394:	f7ff ffde 	bl	8002354 <HAL_RCC_GetHCLKFreq>
 8002398:	4601      	mov	r1, r0
 800239a:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	0adb      	lsrs	r3, r3, #11
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	4a03      	ldr	r2, [pc, #12]	; (80023b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023a6:	5cd3      	ldrb	r3, [r2, r3]
 80023a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40021000 	.word	0x40021000
 80023b4:	080043ec 	.word	0x080043ec

080023b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023c0:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <RCC_Delay+0x34>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a0a      	ldr	r2, [pc, #40]	; (80023f0 <RCC_Delay+0x38>)
 80023c6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ca:	0a5b      	lsrs	r3, r3, #9
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	fb02 f303 	mul.w	r3, r2, r3
 80023d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023d4:	bf00      	nop
  }
  while (Delay --);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	1e5a      	subs	r2, r3, #1
 80023da:	60fa      	str	r2, [r7, #12]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1f9      	bne.n	80023d4 <RCC_Delay+0x1c>
}
 80023e0:	bf00      	nop
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc80      	pop	{r7}
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	20000000 	.word	0x20000000
 80023f0:	10624dd3 	.word	0x10624dd3

080023f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	2300      	movs	r3, #0
 8002402:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b00      	cmp	r3, #0
 800240e:	d07d      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002410:	2300      	movs	r3, #0
 8002412:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002414:	4b47      	ldr	r3, [pc, #284]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10d      	bne.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002420:	4b44      	ldr	r3, [pc, #272]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	4a43      	ldr	r2, [pc, #268]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800242a:	61d3      	str	r3, [r2, #28]
 800242c:	4b41      	ldr	r3, [pc, #260]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002434:	60bb      	str	r3, [r7, #8]
 8002436:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002438:	2301      	movs	r3, #1
 800243a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800243c:	4b3e      	ldr	r3, [pc, #248]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002444:	2b00      	cmp	r3, #0
 8002446:	d118      	bne.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002448:	4b3b      	ldr	r3, [pc, #236]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a3a      	ldr	r2, [pc, #232]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 800244e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002452:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002454:	f7fe ff56 	bl	8001304 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800245a:	e008      	b.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800245c:	f7fe ff52 	bl	8001304 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b64      	cmp	r3, #100	; 0x64
 8002468:	d901      	bls.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e05e      	b.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x138>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800246e:	4b32      	ldr	r3, [pc, #200]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002476:	2b00      	cmp	r3, #0
 8002478:	d0f0      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800247a:	4b2e      	ldr	r3, [pc, #184]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002482:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d02e      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	429a      	cmp	r2, r3
 8002496:	d027      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002498:	4b26      	ldr	r3, [pc, #152]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024a0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024a2:	4b26      	ldr	r3, [pc, #152]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024a8:	4b24      	ldr	r3, [pc, #144]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80024ae:	4a21      	ldr	r2, [pc, #132]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d014      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024be:	f7fe ff21 	bl	8001304 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c4:	e00a      	b.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c6:	f7fe ff1d 	bl	8001304 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d901      	bls.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e027      	b.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x138>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024dc:	4b15      	ldr	r3, [pc, #84]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0ee      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024e8:	4b12      	ldr	r3, [pc, #72]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	490f      	ldr	r1, [pc, #60]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024fa:	7dfb      	ldrb	r3, [r7, #23]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d105      	bne.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002500:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002502:	69db      	ldr	r3, [r3, #28]
 8002504:	4a0b      	ldr	r2, [pc, #44]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002506:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800250a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d008      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002518:	4b06      	ldr	r3, [pc, #24]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	4903      	ldr	r1, [pc, #12]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002526:	4313      	orrs	r3, r2
 8002528:	604b      	str	r3, [r1, #4]
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40021000 	.word	0x40021000
 8002538:	40007000 	.word	0x40007000
 800253c:	42420440 	.word	0x42420440

08002540 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e04b      	b.n	80025ea <HAL_SPI_Init+0xaa>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	d106      	bne.n	8002572 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7fe fcc5 	bl	8000efc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2202      	movs	r2, #2
 8002576:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002588:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	431a      	orrs	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	431a      	orrs	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	431a      	orrs	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	431a      	orrs	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	ea42 0103 	orr.w	r1, r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	0c1a      	lsrs	r2, r3, #16
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f002 0204 	and.w	r2, r2, #4
 80025d8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b088      	sub	sp, #32
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	60f8      	str	r0, [r7, #12]
 80025fa:	60b9      	str	r1, [r7, #8]
 80025fc:	603b      	str	r3, [r7, #0]
 80025fe:	4613      	mov	r3, r2
 8002600:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800260c:	2b01      	cmp	r3, #1
 800260e:	d101      	bne.n	8002614 <HAL_SPI_Transmit+0x22>
 8002610:	2302      	movs	r3, #2
 8002612:	e11e      	b.n	8002852 <HAL_SPI_Transmit+0x260>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800261c:	f7fe fe72 	bl	8001304 <HAL_GetTick>
 8002620:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002622:	88fb      	ldrh	r3, [r7, #6]
 8002624:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b01      	cmp	r3, #1
 8002630:	d002      	beq.n	8002638 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002632:	2302      	movs	r3, #2
 8002634:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002636:	e103      	b.n	8002840 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <HAL_SPI_Transmit+0x52>
 800263e:	88fb      	ldrh	r3, [r7, #6]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d102      	bne.n	800264a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002648:	e0fa      	b.n	8002840 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2203      	movs	r2, #3
 800264e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	88fa      	ldrh	r2, [r7, #6]
 8002662:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	88fa      	ldrh	r2, [r7, #6]
 8002668:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002690:	d107      	bne.n	80026a2 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ac:	2b40      	cmp	r3, #64	; 0x40
 80026ae:	d007      	beq.n	80026c0 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026c8:	d14b      	bne.n	8002762 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d002      	beq.n	80026d8 <HAL_SPI_Transmit+0xe6>
 80026d2:	8afb      	ldrh	r3, [r7, #22]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d13e      	bne.n	8002756 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026dc:	881a      	ldrh	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e8:	1c9a      	adds	r2, r3, #2
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	3b01      	subs	r3, #1
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80026fc:	e02b      	b.n	8002756 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b02      	cmp	r3, #2
 800270a:	d112      	bne.n	8002732 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002710:	881a      	ldrh	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271c:	1c9a      	adds	r2, r3, #2
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002726:	b29b      	uxth	r3, r3
 8002728:	3b01      	subs	r3, #1
 800272a:	b29a      	uxth	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002730:	e011      	b.n	8002756 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002732:	f7fe fde7 	bl	8001304 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d803      	bhi.n	800274a <HAL_SPI_Transmit+0x158>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002748:	d102      	bne.n	8002750 <HAL_SPI_Transmit+0x15e>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d102      	bne.n	8002756 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002754:	e074      	b.n	8002840 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800275a:	b29b      	uxth	r3, r3
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1ce      	bne.n	80026fe <HAL_SPI_Transmit+0x10c>
 8002760:	e04c      	b.n	80027fc <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d002      	beq.n	8002770 <HAL_SPI_Transmit+0x17e>
 800276a:	8afb      	ldrh	r3, [r7, #22]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d140      	bne.n	80027f2 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	330c      	adds	r3, #12
 800277a:	7812      	ldrb	r2, [r2, #0]
 800277c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	1c5a      	adds	r2, r3, #1
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800278c:	b29b      	uxth	r3, r3
 800278e:	3b01      	subs	r3, #1
 8002790:	b29a      	uxth	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002796:	e02c      	b.n	80027f2 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d113      	bne.n	80027ce <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	330c      	adds	r3, #12
 80027b0:	7812      	ldrb	r2, [r2, #0]
 80027b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b8:	1c5a      	adds	r2, r3, #1
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	3b01      	subs	r3, #1
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	86da      	strh	r2, [r3, #54]	; 0x36
 80027cc:	e011      	b.n	80027f2 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027ce:	f7fe fd99 	bl	8001304 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d803      	bhi.n	80027e6 <HAL_SPI_Transmit+0x1f4>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e4:	d102      	bne.n	80027ec <HAL_SPI_Transmit+0x1fa>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d102      	bne.n	80027f2 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80027f0:	e026      	b.n	8002840 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1cd      	bne.n	8002798 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	6839      	ldr	r1, [r7, #0]
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f000 fa43 	bl	8002c8c <SPI_EndRxTxTransaction>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d002      	beq.n	8002812 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2220      	movs	r2, #32
 8002810:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10a      	bne.n	8002830 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800281a:	2300      	movs	r3, #0
 800281c:	613b      	str	r3, [r7, #16]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	613b      	str	r3, [r7, #16]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	613b      	str	r3, [r7, #16]
 800282e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002834:	2b00      	cmp	r3, #0
 8002836:	d002      	beq.n	800283e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	77fb      	strb	r3, [r7, #31]
 800283c:	e000      	b.n	8002840 <HAL_SPI_Transmit+0x24e>
  }

error:
 800283e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002850:	7ffb      	ldrb	r3, [r7, #31]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3720      	adds	r7, #32
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b08c      	sub	sp, #48	; 0x30
 800285e:	af00      	add	r7, sp, #0
 8002860:	60f8      	str	r0, [r7, #12]
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	607a      	str	r2, [r7, #4]
 8002866:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002868:	2301      	movs	r3, #1
 800286a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800286c:	2300      	movs	r3, #0
 800286e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002878:	2b01      	cmp	r3, #1
 800287a:	d101      	bne.n	8002880 <HAL_SPI_TransmitReceive+0x26>
 800287c:	2302      	movs	r3, #2
 800287e:	e18a      	b.n	8002b96 <HAL_SPI_TransmitReceive+0x33c>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002888:	f7fe fd3c 	bl	8001304 <HAL_GetTick>
 800288c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002894:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800289e:	887b      	ldrh	r3, [r7, #2]
 80028a0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80028a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d00f      	beq.n	80028ca <HAL_SPI_TransmitReceive+0x70>
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028b0:	d107      	bne.n	80028c2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d103      	bne.n	80028c2 <HAL_SPI_TransmitReceive+0x68>
 80028ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d003      	beq.n	80028ca <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80028c2:	2302      	movs	r3, #2
 80028c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80028c8:	e15b      	b.n	8002b82 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d005      	beq.n	80028dc <HAL_SPI_TransmitReceive+0x82>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d002      	beq.n	80028dc <HAL_SPI_TransmitReceive+0x82>
 80028d6:	887b      	ldrh	r3, [r7, #2]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d103      	bne.n	80028e4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80028e2:	e14e      	b.n	8002b82 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b04      	cmp	r3, #4
 80028ee:	d003      	beq.n	80028f8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2205      	movs	r2, #5
 80028f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	887a      	ldrh	r2, [r7, #2]
 8002908:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	887a      	ldrh	r2, [r7, #2]
 800290e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	68ba      	ldr	r2, [r7, #8]
 8002914:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	887a      	ldrh	r2, [r7, #2]
 800291a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	887a      	ldrh	r2, [r7, #2]
 8002920:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002938:	2b40      	cmp	r3, #64	; 0x40
 800293a:	d007      	beq.n	800294c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800294a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002954:	d178      	bne.n	8002a48 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d002      	beq.n	8002964 <HAL_SPI_TransmitReceive+0x10a>
 800295e:	8b7b      	ldrh	r3, [r7, #26]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d166      	bne.n	8002a32 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002968:	881a      	ldrh	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002974:	1c9a      	adds	r2, r3, #2
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800297e:	b29b      	uxth	r3, r3
 8002980:	3b01      	subs	r3, #1
 8002982:	b29a      	uxth	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002988:	e053      	b.n	8002a32 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b02      	cmp	r3, #2
 8002996:	d11b      	bne.n	80029d0 <HAL_SPI_TransmitReceive+0x176>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800299c:	b29b      	uxth	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d016      	beq.n	80029d0 <HAL_SPI_TransmitReceive+0x176>
 80029a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d113      	bne.n	80029d0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ac:	881a      	ldrh	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b8:	1c9a      	adds	r2, r3, #2
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	3b01      	subs	r3, #1
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d119      	bne.n	8002a12 <HAL_SPI_TransmitReceive+0x1b8>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d014      	beq.n	8002a12 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68da      	ldr	r2, [r3, #12]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f2:	b292      	uxth	r2, r2
 80029f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fa:	1c9a      	adds	r2, r3, #2
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	3b01      	subs	r3, #1
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002a12:	f7fe fc77 	bl	8001304 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d807      	bhi.n	8002a32 <HAL_SPI_TransmitReceive+0x1d8>
 8002a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a28:	d003      	beq.n	8002a32 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002a30:	e0a7      	b.n	8002b82 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1a6      	bne.n	800298a <HAL_SPI_TransmitReceive+0x130>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1a1      	bne.n	800298a <HAL_SPI_TransmitReceive+0x130>
 8002a46:	e07c      	b.n	8002b42 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d002      	beq.n	8002a56 <HAL_SPI_TransmitReceive+0x1fc>
 8002a50:	8b7b      	ldrh	r3, [r7, #26]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d16b      	bne.n	8002b2e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	330c      	adds	r3, #12
 8002a60:	7812      	ldrb	r2, [r2, #0]
 8002a62:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	1c5a      	adds	r2, r3, #1
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a7c:	e057      	b.n	8002b2e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d11c      	bne.n	8002ac6 <HAL_SPI_TransmitReceive+0x26c>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d017      	beq.n	8002ac6 <HAL_SPI_TransmitReceive+0x26c>
 8002a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d114      	bne.n	8002ac6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	330c      	adds	r3, #12
 8002aa6:	7812      	ldrb	r2, [r2, #0]
 8002aa8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	1c5a      	adds	r2, r3, #1
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	3b01      	subs	r3, #1
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d119      	bne.n	8002b08 <HAL_SPI_TransmitReceive+0x2ae>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d014      	beq.n	8002b08 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68da      	ldr	r2, [r3, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af0:	1c5a      	adds	r2, r3, #1
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	3b01      	subs	r3, #1
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b04:	2301      	movs	r3, #1
 8002b06:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002b08:	f7fe fbfc 	bl	8001304 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d803      	bhi.n	8002b20 <HAL_SPI_TransmitReceive+0x2c6>
 8002b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1e:	d102      	bne.n	8002b26 <HAL_SPI_TransmitReceive+0x2cc>
 8002b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d103      	bne.n	8002b2e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002b2c:	e029      	b.n	8002b82 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1a2      	bne.n	8002a7e <HAL_SPI_TransmitReceive+0x224>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d19d      	bne.n	8002a7e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 f8a0 	bl	8002c8c <SPI_EndRxTxTransaction>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d006      	beq.n	8002b60 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002b5e:	e010      	b.n	8002b82 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10b      	bne.n	8002b80 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b68:	2300      	movs	r3, #0
 8002b6a:	617b      	str	r3, [r7, #20]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	617b      	str	r3, [r7, #20]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	e000      	b.n	8002b82 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002b80:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3730      	adds	r7, #48	; 0x30
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bac:	b2db      	uxtb	r3, r3
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr

08002bb8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	603b      	str	r3, [r7, #0]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bc8:	e04c      	b.n	8002c64 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd0:	d048      	beq.n	8002c64 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002bd2:	f7fe fb97 	bl	8001304 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d902      	bls.n	8002be8 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d13d      	bne.n	8002c64 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002bf6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c00:	d111      	bne.n	8002c26 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c0a:	d004      	beq.n	8002c16 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c14:	d107      	bne.n	8002c26 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c24:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c2e:	d10f      	bne.n	8002c50 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c4e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e00f      	b.n	8002c84 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	68ba      	ldr	r2, [r7, #8]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	bf0c      	ite	eq
 8002c74:	2301      	moveq	r3, #1
 8002c76:	2300      	movne	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	79fb      	ldrb	r3, [r7, #7]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d1a3      	bne.n	8002bca <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af02      	add	r7, sp, #8
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	2180      	movs	r1, #128	; 0x80
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f7ff ff88 	bl	8002bb8 <SPI_WaitFlagStateUntilTimeout>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d007      	beq.n	8002cbe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb2:	f043 0220 	orr.w	r2, r3, #32
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e000      	b.n	8002cc0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e01d      	b.n	8002d16 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d106      	bne.n	8002cf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7fe f94e 	bl	8000f90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3304      	adds	r3, #4
 8002d04:	4619      	mov	r1, r3
 8002d06:	4610      	mov	r0, r2
 8002d08:	f000 f9bc 	bl	8003084 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b082      	sub	sp, #8
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e01d      	b.n	8002d6c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d106      	bne.n	8002d4a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 f815 	bl	8002d74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	3304      	adds	r3, #4
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4610      	mov	r0, r2
 8002d5e:	f000 f991 	bl	8003084 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr
	...

08002d88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d101      	bne.n	8002da2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e0b4      	b.n	8002f0c <HAL_TIM_PWM_ConfigChannel+0x184>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2202      	movs	r2, #2
 8002dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b0c      	cmp	r3, #12
 8002db6:	f200 809f 	bhi.w	8002ef8 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002dba:	a201      	add	r2, pc, #4	; (adr r2, 8002dc0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc0:	08002df5 	.word	0x08002df5
 8002dc4:	08002ef9 	.word	0x08002ef9
 8002dc8:	08002ef9 	.word	0x08002ef9
 8002dcc:	08002ef9 	.word	0x08002ef9
 8002dd0:	08002e35 	.word	0x08002e35
 8002dd4:	08002ef9 	.word	0x08002ef9
 8002dd8:	08002ef9 	.word	0x08002ef9
 8002ddc:	08002ef9 	.word	0x08002ef9
 8002de0:	08002e77 	.word	0x08002e77
 8002de4:	08002ef9 	.word	0x08002ef9
 8002de8:	08002ef9 	.word	0x08002ef9
 8002dec:	08002ef9 	.word	0x08002ef9
 8002df0:	08002eb7 	.word	0x08002eb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68b9      	ldr	r1, [r7, #8]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 f9c2 	bl	8003184 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	699a      	ldr	r2, [r3, #24]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0208 	orr.w	r2, r2, #8
 8002e0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	699a      	ldr	r2, [r3, #24]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0204 	bic.w	r2, r2, #4
 8002e1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6999      	ldr	r1, [r3, #24]
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	691a      	ldr	r2, [r3, #16]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	619a      	str	r2, [r3, #24]
      break;
 8002e32:	e062      	b.n	8002efa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68b9      	ldr	r1, [r7, #8]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 fa26 	bl	800328c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	699a      	ldr	r2, [r3, #24]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699a      	ldr	r2, [r3, #24]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6999      	ldr	r1, [r3, #24]
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	021a      	lsls	r2, r3, #8
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	619a      	str	r2, [r3, #24]
      break;
 8002e74:	e041      	b.n	8002efa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68b9      	ldr	r1, [r7, #8]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 fa81 	bl	8003384 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	69da      	ldr	r2, [r3, #28]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f042 0208 	orr.w	r2, r2, #8
 8002e90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	69da      	ldr	r2, [r3, #28]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0204 	bic.w	r2, r2, #4
 8002ea0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	69d9      	ldr	r1, [r3, #28]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	691a      	ldr	r2, [r3, #16]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	61da      	str	r2, [r3, #28]
      break;
 8002eb4:	e021      	b.n	8002efa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68b9      	ldr	r1, [r7, #8]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 fadd 	bl	800347c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	69da      	ldr	r2, [r3, #28]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ed0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	69da      	ldr	r2, [r3, #28]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ee0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	69d9      	ldr	r1, [r3, #28]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	021a      	lsls	r2, r3, #8
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	61da      	str	r2, [r3, #28]
      break;
 8002ef6:	e000      	b.n	8002efa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002ef8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d101      	bne.n	8002f2c <HAL_TIM_ConfigClockSource+0x18>
 8002f28:	2302      	movs	r3, #2
 8002f2a:	e0a6      	b.n	800307a <HAL_TIM_ConfigClockSource+0x166>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2202      	movs	r2, #2
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f52:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b40      	cmp	r3, #64	; 0x40
 8002f62:	d067      	beq.n	8003034 <HAL_TIM_ConfigClockSource+0x120>
 8002f64:	2b40      	cmp	r3, #64	; 0x40
 8002f66:	d80b      	bhi.n	8002f80 <HAL_TIM_ConfigClockSource+0x6c>
 8002f68:	2b10      	cmp	r3, #16
 8002f6a:	d073      	beq.n	8003054 <HAL_TIM_ConfigClockSource+0x140>
 8002f6c:	2b10      	cmp	r3, #16
 8002f6e:	d802      	bhi.n	8002f76 <HAL_TIM_ConfigClockSource+0x62>
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d06f      	beq.n	8003054 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002f74:	e078      	b.n	8003068 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002f76:	2b20      	cmp	r3, #32
 8002f78:	d06c      	beq.n	8003054 <HAL_TIM_ConfigClockSource+0x140>
 8002f7a:	2b30      	cmp	r3, #48	; 0x30
 8002f7c:	d06a      	beq.n	8003054 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002f7e:	e073      	b.n	8003068 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002f80:	2b70      	cmp	r3, #112	; 0x70
 8002f82:	d00d      	beq.n	8002fa0 <HAL_TIM_ConfigClockSource+0x8c>
 8002f84:	2b70      	cmp	r3, #112	; 0x70
 8002f86:	d804      	bhi.n	8002f92 <HAL_TIM_ConfigClockSource+0x7e>
 8002f88:	2b50      	cmp	r3, #80	; 0x50
 8002f8a:	d033      	beq.n	8002ff4 <HAL_TIM_ConfigClockSource+0xe0>
 8002f8c:	2b60      	cmp	r3, #96	; 0x60
 8002f8e:	d041      	beq.n	8003014 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002f90:	e06a      	b.n	8003068 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f96:	d066      	beq.n	8003066 <HAL_TIM_ConfigClockSource+0x152>
 8002f98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f9c:	d017      	beq.n	8002fce <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002f9e:	e063      	b.n	8003068 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6818      	ldr	r0, [r3, #0]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	6899      	ldr	r1, [r3, #8]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f000 fb3b 	bl	800362a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002fc2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	609a      	str	r2, [r3, #8]
      break;
 8002fcc:	e04c      	b.n	8003068 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6818      	ldr	r0, [r3, #0]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	6899      	ldr	r1, [r3, #8]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	f000 fb24 	bl	800362a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ff0:	609a      	str	r2, [r3, #8]
      break;
 8002ff2:	e039      	b.n	8003068 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6818      	ldr	r0, [r3, #0]
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	6859      	ldr	r1, [r3, #4]
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	461a      	mov	r2, r3
 8003002:	f000 fa9b 	bl	800353c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2150      	movs	r1, #80	; 0x50
 800300c:	4618      	mov	r0, r3
 800300e:	f000 faf2 	bl	80035f6 <TIM_ITRx_SetConfig>
      break;
 8003012:	e029      	b.n	8003068 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6818      	ldr	r0, [r3, #0]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	6859      	ldr	r1, [r3, #4]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	461a      	mov	r2, r3
 8003022:	f000 fab9 	bl	8003598 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2160      	movs	r1, #96	; 0x60
 800302c:	4618      	mov	r0, r3
 800302e:	f000 fae2 	bl	80035f6 <TIM_ITRx_SetConfig>
      break;
 8003032:	e019      	b.n	8003068 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6818      	ldr	r0, [r3, #0]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	6859      	ldr	r1, [r3, #4]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	461a      	mov	r2, r3
 8003042:	f000 fa7b 	bl	800353c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2140      	movs	r1, #64	; 0x40
 800304c:	4618      	mov	r0, r3
 800304e:	f000 fad2 	bl	80035f6 <TIM_ITRx_SetConfig>
      break;
 8003052:	e009      	b.n	8003068 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4619      	mov	r1, r3
 800305e:	4610      	mov	r0, r2
 8003060:	f000 fac9 	bl	80035f6 <TIM_ITRx_SetConfig>
      break;
 8003064:	e000      	b.n	8003068 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003066:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
	...

08003084 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a35      	ldr	r2, [pc, #212]	; (800316c <TIM_Base_SetConfig+0xe8>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d00b      	beq.n	80030b4 <TIM_Base_SetConfig+0x30>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030a2:	d007      	beq.n	80030b4 <TIM_Base_SetConfig+0x30>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a32      	ldr	r2, [pc, #200]	; (8003170 <TIM_Base_SetConfig+0xec>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d003      	beq.n	80030b4 <TIM_Base_SetConfig+0x30>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a31      	ldr	r2, [pc, #196]	; (8003174 <TIM_Base_SetConfig+0xf0>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d108      	bne.n	80030c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a28      	ldr	r2, [pc, #160]	; (800316c <TIM_Base_SetConfig+0xe8>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d017      	beq.n	80030fe <TIM_Base_SetConfig+0x7a>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d4:	d013      	beq.n	80030fe <TIM_Base_SetConfig+0x7a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a25      	ldr	r2, [pc, #148]	; (8003170 <TIM_Base_SetConfig+0xec>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d00f      	beq.n	80030fe <TIM_Base_SetConfig+0x7a>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a24      	ldr	r2, [pc, #144]	; (8003174 <TIM_Base_SetConfig+0xf0>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d00b      	beq.n	80030fe <TIM_Base_SetConfig+0x7a>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a23      	ldr	r2, [pc, #140]	; (8003178 <TIM_Base_SetConfig+0xf4>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d007      	beq.n	80030fe <TIM_Base_SetConfig+0x7a>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a22      	ldr	r2, [pc, #136]	; (800317c <TIM_Base_SetConfig+0xf8>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d003      	beq.n	80030fe <TIM_Base_SetConfig+0x7a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a21      	ldr	r2, [pc, #132]	; (8003180 <TIM_Base_SetConfig+0xfc>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d108      	bne.n	8003110 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003104:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	4313      	orrs	r3, r2
 800310e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	4313      	orrs	r3, r2
 800311c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a0d      	ldr	r2, [pc, #52]	; (800316c <TIM_Base_SetConfig+0xe8>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d00b      	beq.n	8003154 <TIM_Base_SetConfig+0xd0>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a0e      	ldr	r2, [pc, #56]	; (8003178 <TIM_Base_SetConfig+0xf4>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d007      	beq.n	8003154 <TIM_Base_SetConfig+0xd0>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a0d      	ldr	r2, [pc, #52]	; (800317c <TIM_Base_SetConfig+0xf8>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d003      	beq.n	8003154 <TIM_Base_SetConfig+0xd0>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a0c      	ldr	r2, [pc, #48]	; (8003180 <TIM_Base_SetConfig+0xfc>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d103      	bne.n	800315c <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	691a      	ldr	r2, [r3, #16]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	615a      	str	r2, [r3, #20]
}
 8003162:	bf00      	nop
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr
 800316c:	40012c00 	.word	0x40012c00
 8003170:	40000400 	.word	0x40000400
 8003174:	40000800 	.word	0x40000800
 8003178:	40014000 	.word	0x40014000
 800317c:	40014400 	.word	0x40014400
 8003180:	40014800 	.word	0x40014800

08003184 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003184:	b480      	push	{r7}
 8003186:	b087      	sub	sp, #28
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	f023 0201 	bic.w	r2, r3, #1
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f023 0303 	bic.w	r3, r3, #3
 80031ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	f023 0302 	bic.w	r3, r3, #2
 80031cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a28      	ldr	r2, [pc, #160]	; (800327c <TIM_OC1_SetConfig+0xf8>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d00b      	beq.n	80031f8 <TIM_OC1_SetConfig+0x74>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a27      	ldr	r2, [pc, #156]	; (8003280 <TIM_OC1_SetConfig+0xfc>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d007      	beq.n	80031f8 <TIM_OC1_SetConfig+0x74>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a26      	ldr	r2, [pc, #152]	; (8003284 <TIM_OC1_SetConfig+0x100>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d003      	beq.n	80031f8 <TIM_OC1_SetConfig+0x74>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a25      	ldr	r2, [pc, #148]	; (8003288 <TIM_OC1_SetConfig+0x104>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d10c      	bne.n	8003212 <TIM_OC1_SetConfig+0x8e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	f023 0308 	bic.w	r3, r3, #8
 80031fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	4313      	orrs	r3, r2
 8003208:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f023 0304 	bic.w	r3, r3, #4
 8003210:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a19      	ldr	r2, [pc, #100]	; (800327c <TIM_OC1_SetConfig+0xf8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d00b      	beq.n	8003232 <TIM_OC1_SetConfig+0xae>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a18      	ldr	r2, [pc, #96]	; (8003280 <TIM_OC1_SetConfig+0xfc>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d007      	beq.n	8003232 <TIM_OC1_SetConfig+0xae>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a17      	ldr	r2, [pc, #92]	; (8003284 <TIM_OC1_SetConfig+0x100>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d003      	beq.n	8003232 <TIM_OC1_SetConfig+0xae>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a16      	ldr	r2, [pc, #88]	; (8003288 <TIM_OC1_SetConfig+0x104>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d111      	bne.n	8003256 <TIM_OC1_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003238:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003240:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	4313      	orrs	r3, r2
 800324a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	4313      	orrs	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	621a      	str	r2, [r3, #32]
}
 8003270:	bf00      	nop
 8003272:	371c      	adds	r7, #28
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40012c00 	.word	0x40012c00
 8003280:	40014000 	.word	0x40014000
 8003284:	40014400 	.word	0x40014400
 8003288:	40014800 	.word	0x40014800

0800328c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800328c:	b480      	push	{r7}
 800328e:	b087      	sub	sp, #28
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	f023 0210 	bic.w	r2, r3, #16
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	021b      	lsls	r3, r3, #8
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f023 0320 	bic.w	r3, r3, #32
 80032d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a23      	ldr	r2, [pc, #140]	; (8003374 <TIM_OC2_SetConfig+0xe8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d10d      	bne.n	8003308 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	011b      	lsls	r3, r3, #4
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003306:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a1a      	ldr	r2, [pc, #104]	; (8003374 <TIM_OC2_SetConfig+0xe8>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d00b      	beq.n	8003328 <TIM_OC2_SetConfig+0x9c>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a19      	ldr	r2, [pc, #100]	; (8003378 <TIM_OC2_SetConfig+0xec>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d007      	beq.n	8003328 <TIM_OC2_SetConfig+0x9c>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a18      	ldr	r2, [pc, #96]	; (800337c <TIM_OC2_SetConfig+0xf0>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d003      	beq.n	8003328 <TIM_OC2_SetConfig+0x9c>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a17      	ldr	r2, [pc, #92]	; (8003380 <TIM_OC2_SetConfig+0xf4>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d113      	bne.n	8003350 <TIM_OC2_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800332e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003336:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	4313      	orrs	r3, r2
 8003342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	4313      	orrs	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	621a      	str	r2, [r3, #32]
}
 800336a:	bf00      	nop
 800336c:	371c      	adds	r7, #28
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr
 8003374:	40012c00 	.word	0x40012c00
 8003378:	40014000 	.word	0x40014000
 800337c:	40014400 	.word	0x40014400
 8003380:	40014800 	.word	0x40014800

08003384 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003384:	b480      	push	{r7}
 8003386:	b087      	sub	sp, #28
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f023 0303 	bic.w	r3, r3, #3
 80033ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	021b      	lsls	r3, r3, #8
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a23      	ldr	r2, [pc, #140]	; (800346c <TIM_OC3_SetConfig+0xe8>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d10d      	bne.n	80033fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	021b      	lsls	r3, r3, #8
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a1a      	ldr	r2, [pc, #104]	; (800346c <TIM_OC3_SetConfig+0xe8>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d00b      	beq.n	800341e <TIM_OC3_SetConfig+0x9a>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a19      	ldr	r2, [pc, #100]	; (8003470 <TIM_OC3_SetConfig+0xec>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d007      	beq.n	800341e <TIM_OC3_SetConfig+0x9a>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a18      	ldr	r2, [pc, #96]	; (8003474 <TIM_OC3_SetConfig+0xf0>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d003      	beq.n	800341e <TIM_OC3_SetConfig+0x9a>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a17      	ldr	r2, [pc, #92]	; (8003478 <TIM_OC3_SetConfig+0xf4>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d113      	bne.n	8003446 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003424:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800342c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	011b      	lsls	r3, r3, #4
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	4313      	orrs	r3, r2
 8003438:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4313      	orrs	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	621a      	str	r2, [r3, #32]
}
 8003460:	bf00      	nop
 8003462:	371c      	adds	r7, #28
 8003464:	46bd      	mov	sp, r7
 8003466:	bc80      	pop	{r7}
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	40012c00 	.word	0x40012c00
 8003470:	40014000 	.word	0x40014000
 8003474:	40014400 	.word	0x40014400
 8003478:	40014800 	.word	0x40014800

0800347c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800347c:	b480      	push	{r7}
 800347e:	b087      	sub	sp, #28
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	021b      	lsls	r3, r3, #8
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	4313      	orrs	r3, r2
 80034be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	031b      	lsls	r3, r3, #12
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a15      	ldr	r2, [pc, #84]	; (800352c <TIM_OC4_SetConfig+0xb0>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d00b      	beq.n	80034f4 <TIM_OC4_SetConfig+0x78>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a14      	ldr	r2, [pc, #80]	; (8003530 <TIM_OC4_SetConfig+0xb4>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d007      	beq.n	80034f4 <TIM_OC4_SetConfig+0x78>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a13      	ldr	r2, [pc, #76]	; (8003534 <TIM_OC4_SetConfig+0xb8>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d003      	beq.n	80034f4 <TIM_OC4_SetConfig+0x78>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a12      	ldr	r2, [pc, #72]	; (8003538 <TIM_OC4_SetConfig+0xbc>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d109      	bne.n	8003508 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	019b      	lsls	r3, r3, #6
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	4313      	orrs	r3, r2
 8003506:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	621a      	str	r2, [r3, #32]
}
 8003522:	bf00      	nop
 8003524:	371c      	adds	r7, #28
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr
 800352c:	40012c00 	.word	0x40012c00
 8003530:	40014000 	.word	0x40014000
 8003534:	40014400 	.word	0x40014400
 8003538:	40014800 	.word	0x40014800

0800353c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800353c:	b480      	push	{r7}
 800353e:	b087      	sub	sp, #28
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	f023 0201 	bic.w	r2, r3, #1
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003566:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	4313      	orrs	r3, r2
 8003570:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f023 030a 	bic.w	r3, r3, #10
 8003578:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	4313      	orrs	r3, r2
 8003580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	621a      	str	r2, [r3, #32]
}
 800358e:	bf00      	nop
 8003590:	371c      	adds	r7, #28
 8003592:	46bd      	mov	sp, r7
 8003594:	bc80      	pop	{r7}
 8003596:	4770      	bx	lr

08003598 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003598:	b480      	push	{r7}
 800359a:	b087      	sub	sp, #28
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	f023 0210 	bic.w	r2, r3, #16
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	031b      	lsls	r3, r3, #12
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	621a      	str	r2, [r3, #32]
}
 80035ec:	bf00      	nop
 80035ee:	371c      	adds	r7, #28
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bc80      	pop	{r7}
 80035f4:	4770      	bx	lr

080035f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b085      	sub	sp, #20
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
 80035fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	4313      	orrs	r3, r2
 8003614:	f043 0307 	orr.w	r3, r3, #7
 8003618:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	609a      	str	r2, [r3, #8]
}
 8003620:	bf00      	nop
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	bc80      	pop	{r7}
 8003628:	4770      	bx	lr

0800362a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800362a:	b480      	push	{r7}
 800362c:	b087      	sub	sp, #28
 800362e:	af00      	add	r7, sp, #0
 8003630:	60f8      	str	r0, [r7, #12]
 8003632:	60b9      	str	r1, [r7, #8]
 8003634:	607a      	str	r2, [r7, #4]
 8003636:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003644:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	021a      	lsls	r2, r3, #8
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	431a      	orrs	r2, r3
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	4313      	orrs	r3, r2
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	4313      	orrs	r3, r2
 8003656:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	609a      	str	r2, [r3, #8]
}
 800365e:	bf00      	nop
 8003660:	371c      	adds	r7, #28
 8003662:	46bd      	mov	sp, r7
 8003664:	bc80      	pop	{r7}
 8003666:	4770      	bx	lr

08003668 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003678:	2b01      	cmp	r3, #1
 800367a:	d101      	bne.n	8003680 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800367c:	2302      	movs	r3, #2
 800367e:	e032      	b.n	80036e6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2202      	movs	r2, #2
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036b8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr

080036f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e03f      	b.n	8003782 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d106      	bne.n	800371c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7fd fc9c 	bl	8001054 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2224      	movs	r2, #36	; 0x24
 8003720:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68da      	ldr	r2, [r3, #12]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003732:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f829 	bl	800378c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	691a      	ldr	r2, [r3, #16]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003748:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	695a      	ldr	r2, [r3, #20]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003758:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68da      	ldr	r2, [r3, #12]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003768:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
	...

0800378c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68da      	ldr	r2, [r3, #12]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	611a      	str	r2, [r3, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

#if defined(USART_CR1_OVER8)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	431a      	orrs	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	431a      	orrs	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	4313      	orrs	r3, r2
 80037c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80037cc:	f023 030c 	bic.w	r3, r3, #12
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6812      	ldr	r2, [r2, #0]
 80037d4:	68f9      	ldr	r1, [r7, #12]
 80037d6:	430b      	orrs	r3, r1
 80037d8:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	699a      	ldr	r2, [r3, #24]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	615a      	str	r2, [r3, #20]

#if defined(USART_CR1_OVER8)
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037f8:	f040 80a5 	bne.w	8003946 <UART_SetConfig+0x1ba>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if(huart->Instance == USART1)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4aa4      	ldr	r2, [pc, #656]	; (8003a94 <UART_SetConfig+0x308>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d14f      	bne.n	80038a6 <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003806:	f7fe fdc3 	bl	8002390 <HAL_RCC_GetPCLK2Freq>
 800380a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	4613      	mov	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	009a      	lsls	r2, r3, #2
 8003816:	441a      	add	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003822:	4a9d      	ldr	r2, [pc, #628]	; (8003a98 <UART_SetConfig+0x30c>)
 8003824:	fba2 2303 	umull	r2, r3, r2, r3
 8003828:	095b      	lsrs	r3, r3, #5
 800382a:	0119      	lsls	r1, r3, #4
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	4613      	mov	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4413      	add	r3, r2
 8003834:	009a      	lsls	r2, r3, #2
 8003836:	441a      	add	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003842:	4b95      	ldr	r3, [pc, #596]	; (8003a98 <UART_SetConfig+0x30c>)
 8003844:	fba3 0302 	umull	r0, r3, r3, r2
 8003848:	095b      	lsrs	r3, r3, #5
 800384a:	2064      	movs	r0, #100	; 0x64
 800384c:	fb00 f303 	mul.w	r3, r0, r3
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	3332      	adds	r3, #50	; 0x32
 8003856:	4a90      	ldr	r2, [pc, #576]	; (8003a98 <UART_SetConfig+0x30c>)
 8003858:	fba2 2303 	umull	r2, r3, r2, r3
 800385c:	095b      	lsrs	r3, r3, #5
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003864:	4419      	add	r1, r3
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	4613      	mov	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4413      	add	r3, r2
 800386e:	009a      	lsls	r2, r3, #2
 8003870:	441a      	add	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	fbb2 f2f3 	udiv	r2, r2, r3
 800387c:	4b86      	ldr	r3, [pc, #536]	; (8003a98 <UART_SetConfig+0x30c>)
 800387e:	fba3 0302 	umull	r0, r3, r3, r2
 8003882:	095b      	lsrs	r3, r3, #5
 8003884:	2064      	movs	r0, #100	; 0x64
 8003886:	fb00 f303 	mul.w	r3, r0, r3
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	3332      	adds	r3, #50	; 0x32
 8003890:	4a81      	ldr	r2, [pc, #516]	; (8003a98 <UART_SetConfig+0x30c>)
 8003892:	fba2 2303 	umull	r2, r3, r2, r3
 8003896:	095b      	lsrs	r3, r3, #5
 8003898:	f003 0207 	and.w	r2, r3, #7
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	440a      	add	r2, r1
 80038a2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80038a4:	e0f1      	b.n	8003a8a <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 80038a6:	f7fe fd5f 	bl	8002368 <HAL_RCC_GetPCLK1Freq>
 80038aa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	4613      	mov	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4413      	add	r3, r2
 80038b4:	009a      	lsls	r2, r3, #2
 80038b6:	441a      	add	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c2:	4a75      	ldr	r2, [pc, #468]	; (8003a98 <UART_SetConfig+0x30c>)
 80038c4:	fba2 2303 	umull	r2, r3, r2, r3
 80038c8:	095b      	lsrs	r3, r3, #5
 80038ca:	0119      	lsls	r1, r3, #4
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	4613      	mov	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4413      	add	r3, r2
 80038d4:	009a      	lsls	r2, r3, #2
 80038d6:	441a      	add	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	fbb2 f2f3 	udiv	r2, r2, r3
 80038e2:	4b6d      	ldr	r3, [pc, #436]	; (8003a98 <UART_SetConfig+0x30c>)
 80038e4:	fba3 0302 	umull	r0, r3, r3, r2
 80038e8:	095b      	lsrs	r3, r3, #5
 80038ea:	2064      	movs	r0, #100	; 0x64
 80038ec:	fb00 f303 	mul.w	r3, r0, r3
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	3332      	adds	r3, #50	; 0x32
 80038f6:	4a68      	ldr	r2, [pc, #416]	; (8003a98 <UART_SetConfig+0x30c>)
 80038f8:	fba2 2303 	umull	r2, r3, r2, r3
 80038fc:	095b      	lsrs	r3, r3, #5
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003904:	4419      	add	r1, r3
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	4613      	mov	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	009a      	lsls	r2, r3, #2
 8003910:	441a      	add	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	fbb2 f2f3 	udiv	r2, r2, r3
 800391c:	4b5e      	ldr	r3, [pc, #376]	; (8003a98 <UART_SetConfig+0x30c>)
 800391e:	fba3 0302 	umull	r0, r3, r3, r2
 8003922:	095b      	lsrs	r3, r3, #5
 8003924:	2064      	movs	r0, #100	; 0x64
 8003926:	fb00 f303 	mul.w	r3, r0, r3
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	00db      	lsls	r3, r3, #3
 800392e:	3332      	adds	r3, #50	; 0x32
 8003930:	4a59      	ldr	r2, [pc, #356]	; (8003a98 <UART_SetConfig+0x30c>)
 8003932:	fba2 2303 	umull	r2, r3, r2, r3
 8003936:	095b      	lsrs	r3, r3, #5
 8003938:	f003 0207 	and.w	r2, r3, #7
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	440a      	add	r2, r1
 8003942:	609a      	str	r2, [r3, #8]
}
 8003944:	e0a1      	b.n	8003a8a <UART_SetConfig+0x2fe>
    if(huart->Instance == USART1)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a52      	ldr	r2, [pc, #328]	; (8003a94 <UART_SetConfig+0x308>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d14e      	bne.n	80039ee <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003950:	f7fe fd1e 	bl	8002390 <HAL_RCC_GetPCLK2Freq>
 8003954:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	4613      	mov	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4413      	add	r3, r2
 800395e:	009a      	lsls	r2, r3, #2
 8003960:	441a      	add	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	fbb2 f3f3 	udiv	r3, r2, r3
 800396c:	4a4a      	ldr	r2, [pc, #296]	; (8003a98 <UART_SetConfig+0x30c>)
 800396e:	fba2 2303 	umull	r2, r3, r2, r3
 8003972:	095b      	lsrs	r3, r3, #5
 8003974:	0119      	lsls	r1, r3, #4
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	4613      	mov	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4413      	add	r3, r2
 800397e:	009a      	lsls	r2, r3, #2
 8003980:	441a      	add	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	fbb2 f2f3 	udiv	r2, r2, r3
 800398c:	4b42      	ldr	r3, [pc, #264]	; (8003a98 <UART_SetConfig+0x30c>)
 800398e:	fba3 0302 	umull	r0, r3, r3, r2
 8003992:	095b      	lsrs	r3, r3, #5
 8003994:	2064      	movs	r0, #100	; 0x64
 8003996:	fb00 f303 	mul.w	r3, r0, r3
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	011b      	lsls	r3, r3, #4
 800399e:	3332      	adds	r3, #50	; 0x32
 80039a0:	4a3d      	ldr	r2, [pc, #244]	; (8003a98 <UART_SetConfig+0x30c>)
 80039a2:	fba2 2303 	umull	r2, r3, r2, r3
 80039a6:	095b      	lsrs	r3, r3, #5
 80039a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039ac:	4419      	add	r1, r3
 80039ae:	68ba      	ldr	r2, [r7, #8]
 80039b0:	4613      	mov	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	009a      	lsls	r2, r3, #2
 80039b8:	441a      	add	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80039c4:	4b34      	ldr	r3, [pc, #208]	; (8003a98 <UART_SetConfig+0x30c>)
 80039c6:	fba3 0302 	umull	r0, r3, r3, r2
 80039ca:	095b      	lsrs	r3, r3, #5
 80039cc:	2064      	movs	r0, #100	; 0x64
 80039ce:	fb00 f303 	mul.w	r3, r0, r3
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	011b      	lsls	r3, r3, #4
 80039d6:	3332      	adds	r3, #50	; 0x32
 80039d8:	4a2f      	ldr	r2, [pc, #188]	; (8003a98 <UART_SetConfig+0x30c>)
 80039da:	fba2 2303 	umull	r2, r3, r2, r3
 80039de:	095b      	lsrs	r3, r3, #5
 80039e0:	f003 020f 	and.w	r2, r3, #15
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	440a      	add	r2, r1
 80039ea:	609a      	str	r2, [r3, #8]
}
 80039ec:	e04d      	b.n	8003a8a <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 80039ee:	f7fe fcbb 	bl	8002368 <HAL_RCC_GetPCLK1Freq>
 80039f2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	4613      	mov	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	009a      	lsls	r2, r3, #2
 80039fe:	441a      	add	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0a:	4a23      	ldr	r2, [pc, #140]	; (8003a98 <UART_SetConfig+0x30c>)
 8003a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a10:	095b      	lsrs	r3, r3, #5
 8003a12:	0119      	lsls	r1, r3, #4
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	4613      	mov	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	009a      	lsls	r2, r3, #2
 8003a1e:	441a      	add	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a2a:	4b1b      	ldr	r3, [pc, #108]	; (8003a98 <UART_SetConfig+0x30c>)
 8003a2c:	fba3 0302 	umull	r0, r3, r3, r2
 8003a30:	095b      	lsrs	r3, r3, #5
 8003a32:	2064      	movs	r0, #100	; 0x64
 8003a34:	fb00 f303 	mul.w	r3, r0, r3
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	011b      	lsls	r3, r3, #4
 8003a3c:	3332      	adds	r3, #50	; 0x32
 8003a3e:	4a16      	ldr	r2, [pc, #88]	; (8003a98 <UART_SetConfig+0x30c>)
 8003a40:	fba2 2303 	umull	r2, r3, r2, r3
 8003a44:	095b      	lsrs	r3, r3, #5
 8003a46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a4a:	4419      	add	r1, r3
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4413      	add	r3, r2
 8003a54:	009a      	lsls	r2, r3, #2
 8003a56:	441a      	add	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a62:	4b0d      	ldr	r3, [pc, #52]	; (8003a98 <UART_SetConfig+0x30c>)
 8003a64:	fba3 0302 	umull	r0, r3, r3, r2
 8003a68:	095b      	lsrs	r3, r3, #5
 8003a6a:	2064      	movs	r0, #100	; 0x64
 8003a6c:	fb00 f303 	mul.w	r3, r0, r3
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	011b      	lsls	r3, r3, #4
 8003a74:	3332      	adds	r3, #50	; 0x32
 8003a76:	4a08      	ldr	r2, [pc, #32]	; (8003a98 <UART_SetConfig+0x30c>)
 8003a78:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7c:	095b      	lsrs	r3, r3, #5
 8003a7e:	f003 020f 	and.w	r2, r3, #15
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	440a      	add	r2, r1
 8003a88:	609a      	str	r2, [r3, #8]
}
 8003a8a:	bf00      	nop
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	40013800 	.word	0x40013800
 8003a98:	51eb851f 	.word	0x51eb851f

08003a9c <__errno>:
 8003a9c:	4b01      	ldr	r3, [pc, #4]	; (8003aa4 <__errno+0x8>)
 8003a9e:	6818      	ldr	r0, [r3, #0]
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	2000000c 	.word	0x2000000c

08003aa8 <__libc_init_array>:
 8003aa8:	b570      	push	{r4, r5, r6, lr}
 8003aaa:	2500      	movs	r5, #0
 8003aac:	4e0c      	ldr	r6, [pc, #48]	; (8003ae0 <__libc_init_array+0x38>)
 8003aae:	4c0d      	ldr	r4, [pc, #52]	; (8003ae4 <__libc_init_array+0x3c>)
 8003ab0:	1ba4      	subs	r4, r4, r6
 8003ab2:	10a4      	asrs	r4, r4, #2
 8003ab4:	42a5      	cmp	r5, r4
 8003ab6:	d109      	bne.n	8003acc <__libc_init_array+0x24>
 8003ab8:	f000 fc50 	bl	800435c <_init>
 8003abc:	2500      	movs	r5, #0
 8003abe:	4e0a      	ldr	r6, [pc, #40]	; (8003ae8 <__libc_init_array+0x40>)
 8003ac0:	4c0a      	ldr	r4, [pc, #40]	; (8003aec <__libc_init_array+0x44>)
 8003ac2:	1ba4      	subs	r4, r4, r6
 8003ac4:	10a4      	asrs	r4, r4, #2
 8003ac6:	42a5      	cmp	r5, r4
 8003ac8:	d105      	bne.n	8003ad6 <__libc_init_array+0x2e>
 8003aca:	bd70      	pop	{r4, r5, r6, pc}
 8003acc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ad0:	4798      	blx	r3
 8003ad2:	3501      	adds	r5, #1
 8003ad4:	e7ee      	b.n	8003ab4 <__libc_init_array+0xc>
 8003ad6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ada:	4798      	blx	r3
 8003adc:	3501      	adds	r5, #1
 8003ade:	e7f2      	b.n	8003ac6 <__libc_init_array+0x1e>
 8003ae0:	08004428 	.word	0x08004428
 8003ae4:	08004428 	.word	0x08004428
 8003ae8:	08004428 	.word	0x08004428
 8003aec:	0800442c 	.word	0x0800442c

08003af0 <memcpy>:
 8003af0:	b510      	push	{r4, lr}
 8003af2:	1e43      	subs	r3, r0, #1
 8003af4:	440a      	add	r2, r1
 8003af6:	4291      	cmp	r1, r2
 8003af8:	d100      	bne.n	8003afc <memcpy+0xc>
 8003afa:	bd10      	pop	{r4, pc}
 8003afc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b04:	e7f7      	b.n	8003af6 <memcpy+0x6>

08003b06 <memset>:
 8003b06:	4603      	mov	r3, r0
 8003b08:	4402      	add	r2, r0
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d100      	bne.n	8003b10 <memset+0xa>
 8003b0e:	4770      	bx	lr
 8003b10:	f803 1b01 	strb.w	r1, [r3], #1
 8003b14:	e7f9      	b.n	8003b0a <memset+0x4>

08003b16 <_vsniprintf_r>:
 8003b16:	b530      	push	{r4, r5, lr}
 8003b18:	1e14      	subs	r4, r2, #0
 8003b1a:	4605      	mov	r5, r0
 8003b1c:	b09b      	sub	sp, #108	; 0x6c
 8003b1e:	4618      	mov	r0, r3
 8003b20:	da05      	bge.n	8003b2e <_vsniprintf_r+0x18>
 8003b22:	238b      	movs	r3, #139	; 0x8b
 8003b24:	f04f 30ff 	mov.w	r0, #4294967295
 8003b28:	602b      	str	r3, [r5, #0]
 8003b2a:	b01b      	add	sp, #108	; 0x6c
 8003b2c:	bd30      	pop	{r4, r5, pc}
 8003b2e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003b32:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003b36:	bf0c      	ite	eq
 8003b38:	4623      	moveq	r3, r4
 8003b3a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003b3e:	9302      	str	r3, [sp, #8]
 8003b40:	9305      	str	r3, [sp, #20]
 8003b42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b46:	9100      	str	r1, [sp, #0]
 8003b48:	9104      	str	r1, [sp, #16]
 8003b4a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8003b4e:	4602      	mov	r2, r0
 8003b50:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003b52:	4669      	mov	r1, sp
 8003b54:	4628      	mov	r0, r5
 8003b56:	f000 f873 	bl	8003c40 <_svfiprintf_r>
 8003b5a:	1c43      	adds	r3, r0, #1
 8003b5c:	bfbc      	itt	lt
 8003b5e:	238b      	movlt	r3, #139	; 0x8b
 8003b60:	602b      	strlt	r3, [r5, #0]
 8003b62:	2c00      	cmp	r4, #0
 8003b64:	d0e1      	beq.n	8003b2a <_vsniprintf_r+0x14>
 8003b66:	2200      	movs	r2, #0
 8003b68:	9b00      	ldr	r3, [sp, #0]
 8003b6a:	701a      	strb	r2, [r3, #0]
 8003b6c:	e7dd      	b.n	8003b2a <_vsniprintf_r+0x14>
	...

08003b70 <vsniprintf>:
 8003b70:	b507      	push	{r0, r1, r2, lr}
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	4613      	mov	r3, r2
 8003b76:	460a      	mov	r2, r1
 8003b78:	4601      	mov	r1, r0
 8003b7a:	4803      	ldr	r0, [pc, #12]	; (8003b88 <vsniprintf+0x18>)
 8003b7c:	6800      	ldr	r0, [r0, #0]
 8003b7e:	f7ff ffca 	bl	8003b16 <_vsniprintf_r>
 8003b82:	b003      	add	sp, #12
 8003b84:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b88:	2000000c 	.word	0x2000000c

08003b8c <__ssputs_r>:
 8003b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b90:	688e      	ldr	r6, [r1, #8]
 8003b92:	4682      	mov	sl, r0
 8003b94:	429e      	cmp	r6, r3
 8003b96:	460c      	mov	r4, r1
 8003b98:	4690      	mov	r8, r2
 8003b9a:	4699      	mov	r9, r3
 8003b9c:	d837      	bhi.n	8003c0e <__ssputs_r+0x82>
 8003b9e:	898a      	ldrh	r2, [r1, #12]
 8003ba0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ba4:	d031      	beq.n	8003c0a <__ssputs_r+0x7e>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	6825      	ldr	r5, [r4, #0]
 8003baa:	6909      	ldr	r1, [r1, #16]
 8003bac:	1a6f      	subs	r7, r5, r1
 8003bae:	6965      	ldr	r5, [r4, #20]
 8003bb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003bb4:	fb95 f5f3 	sdiv	r5, r5, r3
 8003bb8:	f109 0301 	add.w	r3, r9, #1
 8003bbc:	443b      	add	r3, r7
 8003bbe:	429d      	cmp	r5, r3
 8003bc0:	bf38      	it	cc
 8003bc2:	461d      	movcc	r5, r3
 8003bc4:	0553      	lsls	r3, r2, #21
 8003bc6:	d530      	bpl.n	8003c2a <__ssputs_r+0x9e>
 8003bc8:	4629      	mov	r1, r5
 8003bca:	f000 fb2d 	bl	8004228 <_malloc_r>
 8003bce:	4606      	mov	r6, r0
 8003bd0:	b950      	cbnz	r0, 8003be8 <__ssputs_r+0x5c>
 8003bd2:	230c      	movs	r3, #12
 8003bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd8:	f8ca 3000 	str.w	r3, [sl]
 8003bdc:	89a3      	ldrh	r3, [r4, #12]
 8003bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003be2:	81a3      	strh	r3, [r4, #12]
 8003be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003be8:	463a      	mov	r2, r7
 8003bea:	6921      	ldr	r1, [r4, #16]
 8003bec:	f7ff ff80 	bl	8003af0 <memcpy>
 8003bf0:	89a3      	ldrh	r3, [r4, #12]
 8003bf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bfa:	81a3      	strh	r3, [r4, #12]
 8003bfc:	6126      	str	r6, [r4, #16]
 8003bfe:	443e      	add	r6, r7
 8003c00:	6026      	str	r6, [r4, #0]
 8003c02:	464e      	mov	r6, r9
 8003c04:	6165      	str	r5, [r4, #20]
 8003c06:	1bed      	subs	r5, r5, r7
 8003c08:	60a5      	str	r5, [r4, #8]
 8003c0a:	454e      	cmp	r6, r9
 8003c0c:	d900      	bls.n	8003c10 <__ssputs_r+0x84>
 8003c0e:	464e      	mov	r6, r9
 8003c10:	4632      	mov	r2, r6
 8003c12:	4641      	mov	r1, r8
 8003c14:	6820      	ldr	r0, [r4, #0]
 8003c16:	f000 faa1 	bl	800415c <memmove>
 8003c1a:	68a3      	ldr	r3, [r4, #8]
 8003c1c:	2000      	movs	r0, #0
 8003c1e:	1b9b      	subs	r3, r3, r6
 8003c20:	60a3      	str	r3, [r4, #8]
 8003c22:	6823      	ldr	r3, [r4, #0]
 8003c24:	441e      	add	r6, r3
 8003c26:	6026      	str	r6, [r4, #0]
 8003c28:	e7dc      	b.n	8003be4 <__ssputs_r+0x58>
 8003c2a:	462a      	mov	r2, r5
 8003c2c:	f000 fb56 	bl	80042dc <_realloc_r>
 8003c30:	4606      	mov	r6, r0
 8003c32:	2800      	cmp	r0, #0
 8003c34:	d1e2      	bne.n	8003bfc <__ssputs_r+0x70>
 8003c36:	6921      	ldr	r1, [r4, #16]
 8003c38:	4650      	mov	r0, sl
 8003c3a:	f000 faa9 	bl	8004190 <_free_r>
 8003c3e:	e7c8      	b.n	8003bd2 <__ssputs_r+0x46>

08003c40 <_svfiprintf_r>:
 8003c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c44:	461d      	mov	r5, r3
 8003c46:	898b      	ldrh	r3, [r1, #12]
 8003c48:	b09d      	sub	sp, #116	; 0x74
 8003c4a:	061f      	lsls	r7, r3, #24
 8003c4c:	4680      	mov	r8, r0
 8003c4e:	460c      	mov	r4, r1
 8003c50:	4616      	mov	r6, r2
 8003c52:	d50f      	bpl.n	8003c74 <_svfiprintf_r+0x34>
 8003c54:	690b      	ldr	r3, [r1, #16]
 8003c56:	b96b      	cbnz	r3, 8003c74 <_svfiprintf_r+0x34>
 8003c58:	2140      	movs	r1, #64	; 0x40
 8003c5a:	f000 fae5 	bl	8004228 <_malloc_r>
 8003c5e:	6020      	str	r0, [r4, #0]
 8003c60:	6120      	str	r0, [r4, #16]
 8003c62:	b928      	cbnz	r0, 8003c70 <_svfiprintf_r+0x30>
 8003c64:	230c      	movs	r3, #12
 8003c66:	f8c8 3000 	str.w	r3, [r8]
 8003c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c6e:	e0c8      	b.n	8003e02 <_svfiprintf_r+0x1c2>
 8003c70:	2340      	movs	r3, #64	; 0x40
 8003c72:	6163      	str	r3, [r4, #20]
 8003c74:	2300      	movs	r3, #0
 8003c76:	9309      	str	r3, [sp, #36]	; 0x24
 8003c78:	2320      	movs	r3, #32
 8003c7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c7e:	2330      	movs	r3, #48	; 0x30
 8003c80:	f04f 0b01 	mov.w	fp, #1
 8003c84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c88:	9503      	str	r5, [sp, #12]
 8003c8a:	4637      	mov	r7, r6
 8003c8c:	463d      	mov	r5, r7
 8003c8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003c92:	b10b      	cbz	r3, 8003c98 <_svfiprintf_r+0x58>
 8003c94:	2b25      	cmp	r3, #37	; 0x25
 8003c96:	d13e      	bne.n	8003d16 <_svfiprintf_r+0xd6>
 8003c98:	ebb7 0a06 	subs.w	sl, r7, r6
 8003c9c:	d00b      	beq.n	8003cb6 <_svfiprintf_r+0x76>
 8003c9e:	4653      	mov	r3, sl
 8003ca0:	4632      	mov	r2, r6
 8003ca2:	4621      	mov	r1, r4
 8003ca4:	4640      	mov	r0, r8
 8003ca6:	f7ff ff71 	bl	8003b8c <__ssputs_r>
 8003caa:	3001      	adds	r0, #1
 8003cac:	f000 80a4 	beq.w	8003df8 <_svfiprintf_r+0x1b8>
 8003cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cb2:	4453      	add	r3, sl
 8003cb4:	9309      	str	r3, [sp, #36]	; 0x24
 8003cb6:	783b      	ldrb	r3, [r7, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 809d 	beq.w	8003df8 <_svfiprintf_r+0x1b8>
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003cc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cc8:	9304      	str	r3, [sp, #16]
 8003cca:	9307      	str	r3, [sp, #28]
 8003ccc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003cd0:	931a      	str	r3, [sp, #104]	; 0x68
 8003cd2:	462f      	mov	r7, r5
 8003cd4:	2205      	movs	r2, #5
 8003cd6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003cda:	4850      	ldr	r0, [pc, #320]	; (8003e1c <_svfiprintf_r+0x1dc>)
 8003cdc:	f000 fa30 	bl	8004140 <memchr>
 8003ce0:	9b04      	ldr	r3, [sp, #16]
 8003ce2:	b9d0      	cbnz	r0, 8003d1a <_svfiprintf_r+0xda>
 8003ce4:	06d9      	lsls	r1, r3, #27
 8003ce6:	bf44      	itt	mi
 8003ce8:	2220      	movmi	r2, #32
 8003cea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003cee:	071a      	lsls	r2, r3, #28
 8003cf0:	bf44      	itt	mi
 8003cf2:	222b      	movmi	r2, #43	; 0x2b
 8003cf4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003cf8:	782a      	ldrb	r2, [r5, #0]
 8003cfa:	2a2a      	cmp	r2, #42	; 0x2a
 8003cfc:	d015      	beq.n	8003d2a <_svfiprintf_r+0xea>
 8003cfe:	462f      	mov	r7, r5
 8003d00:	2000      	movs	r0, #0
 8003d02:	250a      	movs	r5, #10
 8003d04:	9a07      	ldr	r2, [sp, #28]
 8003d06:	4639      	mov	r1, r7
 8003d08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d0c:	3b30      	subs	r3, #48	; 0x30
 8003d0e:	2b09      	cmp	r3, #9
 8003d10:	d94d      	bls.n	8003dae <_svfiprintf_r+0x16e>
 8003d12:	b1b8      	cbz	r0, 8003d44 <_svfiprintf_r+0x104>
 8003d14:	e00f      	b.n	8003d36 <_svfiprintf_r+0xf6>
 8003d16:	462f      	mov	r7, r5
 8003d18:	e7b8      	b.n	8003c8c <_svfiprintf_r+0x4c>
 8003d1a:	4a40      	ldr	r2, [pc, #256]	; (8003e1c <_svfiprintf_r+0x1dc>)
 8003d1c:	463d      	mov	r5, r7
 8003d1e:	1a80      	subs	r0, r0, r2
 8003d20:	fa0b f000 	lsl.w	r0, fp, r0
 8003d24:	4318      	orrs	r0, r3
 8003d26:	9004      	str	r0, [sp, #16]
 8003d28:	e7d3      	b.n	8003cd2 <_svfiprintf_r+0x92>
 8003d2a:	9a03      	ldr	r2, [sp, #12]
 8003d2c:	1d11      	adds	r1, r2, #4
 8003d2e:	6812      	ldr	r2, [r2, #0]
 8003d30:	9103      	str	r1, [sp, #12]
 8003d32:	2a00      	cmp	r2, #0
 8003d34:	db01      	blt.n	8003d3a <_svfiprintf_r+0xfa>
 8003d36:	9207      	str	r2, [sp, #28]
 8003d38:	e004      	b.n	8003d44 <_svfiprintf_r+0x104>
 8003d3a:	4252      	negs	r2, r2
 8003d3c:	f043 0302 	orr.w	r3, r3, #2
 8003d40:	9207      	str	r2, [sp, #28]
 8003d42:	9304      	str	r3, [sp, #16]
 8003d44:	783b      	ldrb	r3, [r7, #0]
 8003d46:	2b2e      	cmp	r3, #46	; 0x2e
 8003d48:	d10c      	bne.n	8003d64 <_svfiprintf_r+0x124>
 8003d4a:	787b      	ldrb	r3, [r7, #1]
 8003d4c:	2b2a      	cmp	r3, #42	; 0x2a
 8003d4e:	d133      	bne.n	8003db8 <_svfiprintf_r+0x178>
 8003d50:	9b03      	ldr	r3, [sp, #12]
 8003d52:	3702      	adds	r7, #2
 8003d54:	1d1a      	adds	r2, r3, #4
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	9203      	str	r2, [sp, #12]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	bfb8      	it	lt
 8003d5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d62:	9305      	str	r3, [sp, #20]
 8003d64:	4d2e      	ldr	r5, [pc, #184]	; (8003e20 <_svfiprintf_r+0x1e0>)
 8003d66:	2203      	movs	r2, #3
 8003d68:	7839      	ldrb	r1, [r7, #0]
 8003d6a:	4628      	mov	r0, r5
 8003d6c:	f000 f9e8 	bl	8004140 <memchr>
 8003d70:	b138      	cbz	r0, 8003d82 <_svfiprintf_r+0x142>
 8003d72:	2340      	movs	r3, #64	; 0x40
 8003d74:	1b40      	subs	r0, r0, r5
 8003d76:	fa03 f000 	lsl.w	r0, r3, r0
 8003d7a:	9b04      	ldr	r3, [sp, #16]
 8003d7c:	3701      	adds	r7, #1
 8003d7e:	4303      	orrs	r3, r0
 8003d80:	9304      	str	r3, [sp, #16]
 8003d82:	7839      	ldrb	r1, [r7, #0]
 8003d84:	2206      	movs	r2, #6
 8003d86:	4827      	ldr	r0, [pc, #156]	; (8003e24 <_svfiprintf_r+0x1e4>)
 8003d88:	1c7e      	adds	r6, r7, #1
 8003d8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d8e:	f000 f9d7 	bl	8004140 <memchr>
 8003d92:	2800      	cmp	r0, #0
 8003d94:	d038      	beq.n	8003e08 <_svfiprintf_r+0x1c8>
 8003d96:	4b24      	ldr	r3, [pc, #144]	; (8003e28 <_svfiprintf_r+0x1e8>)
 8003d98:	bb13      	cbnz	r3, 8003de0 <_svfiprintf_r+0x1a0>
 8003d9a:	9b03      	ldr	r3, [sp, #12]
 8003d9c:	3307      	adds	r3, #7
 8003d9e:	f023 0307 	bic.w	r3, r3, #7
 8003da2:	3308      	adds	r3, #8
 8003da4:	9303      	str	r3, [sp, #12]
 8003da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003da8:	444b      	add	r3, r9
 8003daa:	9309      	str	r3, [sp, #36]	; 0x24
 8003dac:	e76d      	b.n	8003c8a <_svfiprintf_r+0x4a>
 8003dae:	fb05 3202 	mla	r2, r5, r2, r3
 8003db2:	2001      	movs	r0, #1
 8003db4:	460f      	mov	r7, r1
 8003db6:	e7a6      	b.n	8003d06 <_svfiprintf_r+0xc6>
 8003db8:	2300      	movs	r3, #0
 8003dba:	250a      	movs	r5, #10
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	3701      	adds	r7, #1
 8003dc0:	9305      	str	r3, [sp, #20]
 8003dc2:	4638      	mov	r0, r7
 8003dc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003dc8:	3a30      	subs	r2, #48	; 0x30
 8003dca:	2a09      	cmp	r2, #9
 8003dcc:	d903      	bls.n	8003dd6 <_svfiprintf_r+0x196>
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0c8      	beq.n	8003d64 <_svfiprintf_r+0x124>
 8003dd2:	9105      	str	r1, [sp, #20]
 8003dd4:	e7c6      	b.n	8003d64 <_svfiprintf_r+0x124>
 8003dd6:	fb05 2101 	mla	r1, r5, r1, r2
 8003dda:	2301      	movs	r3, #1
 8003ddc:	4607      	mov	r7, r0
 8003dde:	e7f0      	b.n	8003dc2 <_svfiprintf_r+0x182>
 8003de0:	ab03      	add	r3, sp, #12
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	4622      	mov	r2, r4
 8003de6:	4b11      	ldr	r3, [pc, #68]	; (8003e2c <_svfiprintf_r+0x1ec>)
 8003de8:	a904      	add	r1, sp, #16
 8003dea:	4640      	mov	r0, r8
 8003dec:	f3af 8000 	nop.w
 8003df0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003df4:	4681      	mov	r9, r0
 8003df6:	d1d6      	bne.n	8003da6 <_svfiprintf_r+0x166>
 8003df8:	89a3      	ldrh	r3, [r4, #12]
 8003dfa:	065b      	lsls	r3, r3, #25
 8003dfc:	f53f af35 	bmi.w	8003c6a <_svfiprintf_r+0x2a>
 8003e00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e02:	b01d      	add	sp, #116	; 0x74
 8003e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e08:	ab03      	add	r3, sp, #12
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	4622      	mov	r2, r4
 8003e0e:	4b07      	ldr	r3, [pc, #28]	; (8003e2c <_svfiprintf_r+0x1ec>)
 8003e10:	a904      	add	r1, sp, #16
 8003e12:	4640      	mov	r0, r8
 8003e14:	f000 f882 	bl	8003f1c <_printf_i>
 8003e18:	e7ea      	b.n	8003df0 <_svfiprintf_r+0x1b0>
 8003e1a:	bf00      	nop
 8003e1c:	080043f4 	.word	0x080043f4
 8003e20:	080043fa 	.word	0x080043fa
 8003e24:	080043fe 	.word	0x080043fe
 8003e28:	00000000 	.word	0x00000000
 8003e2c:	08003b8d 	.word	0x08003b8d

08003e30 <_printf_common>:
 8003e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e34:	4691      	mov	r9, r2
 8003e36:	461f      	mov	r7, r3
 8003e38:	688a      	ldr	r2, [r1, #8]
 8003e3a:	690b      	ldr	r3, [r1, #16]
 8003e3c:	4606      	mov	r6, r0
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	bfb8      	it	lt
 8003e42:	4613      	movlt	r3, r2
 8003e44:	f8c9 3000 	str.w	r3, [r9]
 8003e48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e4c:	460c      	mov	r4, r1
 8003e4e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e52:	b112      	cbz	r2, 8003e5a <_printf_common+0x2a>
 8003e54:	3301      	adds	r3, #1
 8003e56:	f8c9 3000 	str.w	r3, [r9]
 8003e5a:	6823      	ldr	r3, [r4, #0]
 8003e5c:	0699      	lsls	r1, r3, #26
 8003e5e:	bf42      	ittt	mi
 8003e60:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003e64:	3302      	addmi	r3, #2
 8003e66:	f8c9 3000 	strmi.w	r3, [r9]
 8003e6a:	6825      	ldr	r5, [r4, #0]
 8003e6c:	f015 0506 	ands.w	r5, r5, #6
 8003e70:	d107      	bne.n	8003e82 <_printf_common+0x52>
 8003e72:	f104 0a19 	add.w	sl, r4, #25
 8003e76:	68e3      	ldr	r3, [r4, #12]
 8003e78:	f8d9 2000 	ldr.w	r2, [r9]
 8003e7c:	1a9b      	subs	r3, r3, r2
 8003e7e:	42ab      	cmp	r3, r5
 8003e80:	dc29      	bgt.n	8003ed6 <_printf_common+0xa6>
 8003e82:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003e86:	6822      	ldr	r2, [r4, #0]
 8003e88:	3300      	adds	r3, #0
 8003e8a:	bf18      	it	ne
 8003e8c:	2301      	movne	r3, #1
 8003e8e:	0692      	lsls	r2, r2, #26
 8003e90:	d42e      	bmi.n	8003ef0 <_printf_common+0xc0>
 8003e92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e96:	4639      	mov	r1, r7
 8003e98:	4630      	mov	r0, r6
 8003e9a:	47c0      	blx	r8
 8003e9c:	3001      	adds	r0, #1
 8003e9e:	d021      	beq.n	8003ee4 <_printf_common+0xb4>
 8003ea0:	6823      	ldr	r3, [r4, #0]
 8003ea2:	68e5      	ldr	r5, [r4, #12]
 8003ea4:	f003 0306 	and.w	r3, r3, #6
 8003ea8:	2b04      	cmp	r3, #4
 8003eaa:	bf18      	it	ne
 8003eac:	2500      	movne	r5, #0
 8003eae:	f8d9 2000 	ldr.w	r2, [r9]
 8003eb2:	f04f 0900 	mov.w	r9, #0
 8003eb6:	bf08      	it	eq
 8003eb8:	1aad      	subeq	r5, r5, r2
 8003eba:	68a3      	ldr	r3, [r4, #8]
 8003ebc:	6922      	ldr	r2, [r4, #16]
 8003ebe:	bf08      	it	eq
 8003ec0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	bfc4      	itt	gt
 8003ec8:	1a9b      	subgt	r3, r3, r2
 8003eca:	18ed      	addgt	r5, r5, r3
 8003ecc:	341a      	adds	r4, #26
 8003ece:	454d      	cmp	r5, r9
 8003ed0:	d11a      	bne.n	8003f08 <_printf_common+0xd8>
 8003ed2:	2000      	movs	r0, #0
 8003ed4:	e008      	b.n	8003ee8 <_printf_common+0xb8>
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	4652      	mov	r2, sl
 8003eda:	4639      	mov	r1, r7
 8003edc:	4630      	mov	r0, r6
 8003ede:	47c0      	blx	r8
 8003ee0:	3001      	adds	r0, #1
 8003ee2:	d103      	bne.n	8003eec <_printf_common+0xbc>
 8003ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eec:	3501      	adds	r5, #1
 8003eee:	e7c2      	b.n	8003e76 <_printf_common+0x46>
 8003ef0:	2030      	movs	r0, #48	; 0x30
 8003ef2:	18e1      	adds	r1, r4, r3
 8003ef4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003efe:	4422      	add	r2, r4
 8003f00:	3302      	adds	r3, #2
 8003f02:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f06:	e7c4      	b.n	8003e92 <_printf_common+0x62>
 8003f08:	2301      	movs	r3, #1
 8003f0a:	4622      	mov	r2, r4
 8003f0c:	4639      	mov	r1, r7
 8003f0e:	4630      	mov	r0, r6
 8003f10:	47c0      	blx	r8
 8003f12:	3001      	adds	r0, #1
 8003f14:	d0e6      	beq.n	8003ee4 <_printf_common+0xb4>
 8003f16:	f109 0901 	add.w	r9, r9, #1
 8003f1a:	e7d8      	b.n	8003ece <_printf_common+0x9e>

08003f1c <_printf_i>:
 8003f1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f20:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003f24:	460c      	mov	r4, r1
 8003f26:	7e09      	ldrb	r1, [r1, #24]
 8003f28:	b085      	sub	sp, #20
 8003f2a:	296e      	cmp	r1, #110	; 0x6e
 8003f2c:	4617      	mov	r7, r2
 8003f2e:	4606      	mov	r6, r0
 8003f30:	4698      	mov	r8, r3
 8003f32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f34:	f000 80b3 	beq.w	800409e <_printf_i+0x182>
 8003f38:	d822      	bhi.n	8003f80 <_printf_i+0x64>
 8003f3a:	2963      	cmp	r1, #99	; 0x63
 8003f3c:	d036      	beq.n	8003fac <_printf_i+0x90>
 8003f3e:	d80a      	bhi.n	8003f56 <_printf_i+0x3a>
 8003f40:	2900      	cmp	r1, #0
 8003f42:	f000 80b9 	beq.w	80040b8 <_printf_i+0x19c>
 8003f46:	2958      	cmp	r1, #88	; 0x58
 8003f48:	f000 8083 	beq.w	8004052 <_printf_i+0x136>
 8003f4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f50:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003f54:	e032      	b.n	8003fbc <_printf_i+0xa0>
 8003f56:	2964      	cmp	r1, #100	; 0x64
 8003f58:	d001      	beq.n	8003f5e <_printf_i+0x42>
 8003f5a:	2969      	cmp	r1, #105	; 0x69
 8003f5c:	d1f6      	bne.n	8003f4c <_printf_i+0x30>
 8003f5e:	6820      	ldr	r0, [r4, #0]
 8003f60:	6813      	ldr	r3, [r2, #0]
 8003f62:	0605      	lsls	r5, r0, #24
 8003f64:	f103 0104 	add.w	r1, r3, #4
 8003f68:	d52a      	bpl.n	8003fc0 <_printf_i+0xa4>
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6011      	str	r1, [r2, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	da03      	bge.n	8003f7a <_printf_i+0x5e>
 8003f72:	222d      	movs	r2, #45	; 0x2d
 8003f74:	425b      	negs	r3, r3
 8003f76:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003f7a:	486f      	ldr	r0, [pc, #444]	; (8004138 <_printf_i+0x21c>)
 8003f7c:	220a      	movs	r2, #10
 8003f7e:	e039      	b.n	8003ff4 <_printf_i+0xd8>
 8003f80:	2973      	cmp	r1, #115	; 0x73
 8003f82:	f000 809d 	beq.w	80040c0 <_printf_i+0x1a4>
 8003f86:	d808      	bhi.n	8003f9a <_printf_i+0x7e>
 8003f88:	296f      	cmp	r1, #111	; 0x6f
 8003f8a:	d020      	beq.n	8003fce <_printf_i+0xb2>
 8003f8c:	2970      	cmp	r1, #112	; 0x70
 8003f8e:	d1dd      	bne.n	8003f4c <_printf_i+0x30>
 8003f90:	6823      	ldr	r3, [r4, #0]
 8003f92:	f043 0320 	orr.w	r3, r3, #32
 8003f96:	6023      	str	r3, [r4, #0]
 8003f98:	e003      	b.n	8003fa2 <_printf_i+0x86>
 8003f9a:	2975      	cmp	r1, #117	; 0x75
 8003f9c:	d017      	beq.n	8003fce <_printf_i+0xb2>
 8003f9e:	2978      	cmp	r1, #120	; 0x78
 8003fa0:	d1d4      	bne.n	8003f4c <_printf_i+0x30>
 8003fa2:	2378      	movs	r3, #120	; 0x78
 8003fa4:	4865      	ldr	r0, [pc, #404]	; (800413c <_printf_i+0x220>)
 8003fa6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003faa:	e055      	b.n	8004058 <_printf_i+0x13c>
 8003fac:	6813      	ldr	r3, [r2, #0]
 8003fae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fb2:	1d19      	adds	r1, r3, #4
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6011      	str	r1, [r2, #0]
 8003fb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e08c      	b.n	80040da <_printf_i+0x1be>
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003fc6:	6011      	str	r1, [r2, #0]
 8003fc8:	bf18      	it	ne
 8003fca:	b21b      	sxthne	r3, r3
 8003fcc:	e7cf      	b.n	8003f6e <_printf_i+0x52>
 8003fce:	6813      	ldr	r3, [r2, #0]
 8003fd0:	6825      	ldr	r5, [r4, #0]
 8003fd2:	1d18      	adds	r0, r3, #4
 8003fd4:	6010      	str	r0, [r2, #0]
 8003fd6:	0628      	lsls	r0, r5, #24
 8003fd8:	d501      	bpl.n	8003fde <_printf_i+0xc2>
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	e002      	b.n	8003fe4 <_printf_i+0xc8>
 8003fde:	0668      	lsls	r0, r5, #25
 8003fe0:	d5fb      	bpl.n	8003fda <_printf_i+0xbe>
 8003fe2:	881b      	ldrh	r3, [r3, #0]
 8003fe4:	296f      	cmp	r1, #111	; 0x6f
 8003fe6:	bf14      	ite	ne
 8003fe8:	220a      	movne	r2, #10
 8003fea:	2208      	moveq	r2, #8
 8003fec:	4852      	ldr	r0, [pc, #328]	; (8004138 <_printf_i+0x21c>)
 8003fee:	2100      	movs	r1, #0
 8003ff0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ff4:	6865      	ldr	r5, [r4, #4]
 8003ff6:	2d00      	cmp	r5, #0
 8003ff8:	60a5      	str	r5, [r4, #8]
 8003ffa:	f2c0 8095 	blt.w	8004128 <_printf_i+0x20c>
 8003ffe:	6821      	ldr	r1, [r4, #0]
 8004000:	f021 0104 	bic.w	r1, r1, #4
 8004004:	6021      	str	r1, [r4, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d13d      	bne.n	8004086 <_printf_i+0x16a>
 800400a:	2d00      	cmp	r5, #0
 800400c:	f040 808e 	bne.w	800412c <_printf_i+0x210>
 8004010:	4665      	mov	r5, ip
 8004012:	2a08      	cmp	r2, #8
 8004014:	d10b      	bne.n	800402e <_printf_i+0x112>
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	07db      	lsls	r3, r3, #31
 800401a:	d508      	bpl.n	800402e <_printf_i+0x112>
 800401c:	6923      	ldr	r3, [r4, #16]
 800401e:	6862      	ldr	r2, [r4, #4]
 8004020:	429a      	cmp	r2, r3
 8004022:	bfde      	ittt	le
 8004024:	2330      	movle	r3, #48	; 0x30
 8004026:	f805 3c01 	strble.w	r3, [r5, #-1]
 800402a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800402e:	ebac 0305 	sub.w	r3, ip, r5
 8004032:	6123      	str	r3, [r4, #16]
 8004034:	f8cd 8000 	str.w	r8, [sp]
 8004038:	463b      	mov	r3, r7
 800403a:	aa03      	add	r2, sp, #12
 800403c:	4621      	mov	r1, r4
 800403e:	4630      	mov	r0, r6
 8004040:	f7ff fef6 	bl	8003e30 <_printf_common>
 8004044:	3001      	adds	r0, #1
 8004046:	d14d      	bne.n	80040e4 <_printf_i+0x1c8>
 8004048:	f04f 30ff 	mov.w	r0, #4294967295
 800404c:	b005      	add	sp, #20
 800404e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004052:	4839      	ldr	r0, [pc, #228]	; (8004138 <_printf_i+0x21c>)
 8004054:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004058:	6813      	ldr	r3, [r2, #0]
 800405a:	6821      	ldr	r1, [r4, #0]
 800405c:	1d1d      	adds	r5, r3, #4
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6015      	str	r5, [r2, #0]
 8004062:	060a      	lsls	r2, r1, #24
 8004064:	d50b      	bpl.n	800407e <_printf_i+0x162>
 8004066:	07ca      	lsls	r2, r1, #31
 8004068:	bf44      	itt	mi
 800406a:	f041 0120 	orrmi.w	r1, r1, #32
 800406e:	6021      	strmi	r1, [r4, #0]
 8004070:	b91b      	cbnz	r3, 800407a <_printf_i+0x15e>
 8004072:	6822      	ldr	r2, [r4, #0]
 8004074:	f022 0220 	bic.w	r2, r2, #32
 8004078:	6022      	str	r2, [r4, #0]
 800407a:	2210      	movs	r2, #16
 800407c:	e7b7      	b.n	8003fee <_printf_i+0xd2>
 800407e:	064d      	lsls	r5, r1, #25
 8004080:	bf48      	it	mi
 8004082:	b29b      	uxthmi	r3, r3
 8004084:	e7ef      	b.n	8004066 <_printf_i+0x14a>
 8004086:	4665      	mov	r5, ip
 8004088:	fbb3 f1f2 	udiv	r1, r3, r2
 800408c:	fb02 3311 	mls	r3, r2, r1, r3
 8004090:	5cc3      	ldrb	r3, [r0, r3]
 8004092:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004096:	460b      	mov	r3, r1
 8004098:	2900      	cmp	r1, #0
 800409a:	d1f5      	bne.n	8004088 <_printf_i+0x16c>
 800409c:	e7b9      	b.n	8004012 <_printf_i+0xf6>
 800409e:	6813      	ldr	r3, [r2, #0]
 80040a0:	6825      	ldr	r5, [r4, #0]
 80040a2:	1d18      	adds	r0, r3, #4
 80040a4:	6961      	ldr	r1, [r4, #20]
 80040a6:	6010      	str	r0, [r2, #0]
 80040a8:	0628      	lsls	r0, r5, #24
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	d501      	bpl.n	80040b2 <_printf_i+0x196>
 80040ae:	6019      	str	r1, [r3, #0]
 80040b0:	e002      	b.n	80040b8 <_printf_i+0x19c>
 80040b2:	066a      	lsls	r2, r5, #25
 80040b4:	d5fb      	bpl.n	80040ae <_printf_i+0x192>
 80040b6:	8019      	strh	r1, [r3, #0]
 80040b8:	2300      	movs	r3, #0
 80040ba:	4665      	mov	r5, ip
 80040bc:	6123      	str	r3, [r4, #16]
 80040be:	e7b9      	b.n	8004034 <_printf_i+0x118>
 80040c0:	6813      	ldr	r3, [r2, #0]
 80040c2:	1d19      	adds	r1, r3, #4
 80040c4:	6011      	str	r1, [r2, #0]
 80040c6:	681d      	ldr	r5, [r3, #0]
 80040c8:	6862      	ldr	r2, [r4, #4]
 80040ca:	2100      	movs	r1, #0
 80040cc:	4628      	mov	r0, r5
 80040ce:	f000 f837 	bl	8004140 <memchr>
 80040d2:	b108      	cbz	r0, 80040d8 <_printf_i+0x1bc>
 80040d4:	1b40      	subs	r0, r0, r5
 80040d6:	6060      	str	r0, [r4, #4]
 80040d8:	6863      	ldr	r3, [r4, #4]
 80040da:	6123      	str	r3, [r4, #16]
 80040dc:	2300      	movs	r3, #0
 80040de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040e2:	e7a7      	b.n	8004034 <_printf_i+0x118>
 80040e4:	6923      	ldr	r3, [r4, #16]
 80040e6:	462a      	mov	r2, r5
 80040e8:	4639      	mov	r1, r7
 80040ea:	4630      	mov	r0, r6
 80040ec:	47c0      	blx	r8
 80040ee:	3001      	adds	r0, #1
 80040f0:	d0aa      	beq.n	8004048 <_printf_i+0x12c>
 80040f2:	6823      	ldr	r3, [r4, #0]
 80040f4:	079b      	lsls	r3, r3, #30
 80040f6:	d413      	bmi.n	8004120 <_printf_i+0x204>
 80040f8:	68e0      	ldr	r0, [r4, #12]
 80040fa:	9b03      	ldr	r3, [sp, #12]
 80040fc:	4298      	cmp	r0, r3
 80040fe:	bfb8      	it	lt
 8004100:	4618      	movlt	r0, r3
 8004102:	e7a3      	b.n	800404c <_printf_i+0x130>
 8004104:	2301      	movs	r3, #1
 8004106:	464a      	mov	r2, r9
 8004108:	4639      	mov	r1, r7
 800410a:	4630      	mov	r0, r6
 800410c:	47c0      	blx	r8
 800410e:	3001      	adds	r0, #1
 8004110:	d09a      	beq.n	8004048 <_printf_i+0x12c>
 8004112:	3501      	adds	r5, #1
 8004114:	68e3      	ldr	r3, [r4, #12]
 8004116:	9a03      	ldr	r2, [sp, #12]
 8004118:	1a9b      	subs	r3, r3, r2
 800411a:	42ab      	cmp	r3, r5
 800411c:	dcf2      	bgt.n	8004104 <_printf_i+0x1e8>
 800411e:	e7eb      	b.n	80040f8 <_printf_i+0x1dc>
 8004120:	2500      	movs	r5, #0
 8004122:	f104 0919 	add.w	r9, r4, #25
 8004126:	e7f5      	b.n	8004114 <_printf_i+0x1f8>
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1ac      	bne.n	8004086 <_printf_i+0x16a>
 800412c:	7803      	ldrb	r3, [r0, #0]
 800412e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004132:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004136:	e76c      	b.n	8004012 <_printf_i+0xf6>
 8004138:	08004405 	.word	0x08004405
 800413c:	08004416 	.word	0x08004416

08004140 <memchr>:
 8004140:	b510      	push	{r4, lr}
 8004142:	b2c9      	uxtb	r1, r1
 8004144:	4402      	add	r2, r0
 8004146:	4290      	cmp	r0, r2
 8004148:	4603      	mov	r3, r0
 800414a:	d101      	bne.n	8004150 <memchr+0x10>
 800414c:	2300      	movs	r3, #0
 800414e:	e003      	b.n	8004158 <memchr+0x18>
 8004150:	781c      	ldrb	r4, [r3, #0]
 8004152:	3001      	adds	r0, #1
 8004154:	428c      	cmp	r4, r1
 8004156:	d1f6      	bne.n	8004146 <memchr+0x6>
 8004158:	4618      	mov	r0, r3
 800415a:	bd10      	pop	{r4, pc}

0800415c <memmove>:
 800415c:	4288      	cmp	r0, r1
 800415e:	b510      	push	{r4, lr}
 8004160:	eb01 0302 	add.w	r3, r1, r2
 8004164:	d807      	bhi.n	8004176 <memmove+0x1a>
 8004166:	1e42      	subs	r2, r0, #1
 8004168:	4299      	cmp	r1, r3
 800416a:	d00a      	beq.n	8004182 <memmove+0x26>
 800416c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004170:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004174:	e7f8      	b.n	8004168 <memmove+0xc>
 8004176:	4283      	cmp	r3, r0
 8004178:	d9f5      	bls.n	8004166 <memmove+0xa>
 800417a:	1881      	adds	r1, r0, r2
 800417c:	1ad2      	subs	r2, r2, r3
 800417e:	42d3      	cmn	r3, r2
 8004180:	d100      	bne.n	8004184 <memmove+0x28>
 8004182:	bd10      	pop	{r4, pc}
 8004184:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004188:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800418c:	e7f7      	b.n	800417e <memmove+0x22>
	...

08004190 <_free_r>:
 8004190:	b538      	push	{r3, r4, r5, lr}
 8004192:	4605      	mov	r5, r0
 8004194:	2900      	cmp	r1, #0
 8004196:	d043      	beq.n	8004220 <_free_r+0x90>
 8004198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800419c:	1f0c      	subs	r4, r1, #4
 800419e:	2b00      	cmp	r3, #0
 80041a0:	bfb8      	it	lt
 80041a2:	18e4      	addlt	r4, r4, r3
 80041a4:	f000 f8d0 	bl	8004348 <__malloc_lock>
 80041a8:	4a1e      	ldr	r2, [pc, #120]	; (8004224 <_free_r+0x94>)
 80041aa:	6813      	ldr	r3, [r2, #0]
 80041ac:	4610      	mov	r0, r2
 80041ae:	b933      	cbnz	r3, 80041be <_free_r+0x2e>
 80041b0:	6063      	str	r3, [r4, #4]
 80041b2:	6014      	str	r4, [r2, #0]
 80041b4:	4628      	mov	r0, r5
 80041b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041ba:	f000 b8c6 	b.w	800434a <__malloc_unlock>
 80041be:	42a3      	cmp	r3, r4
 80041c0:	d90b      	bls.n	80041da <_free_r+0x4a>
 80041c2:	6821      	ldr	r1, [r4, #0]
 80041c4:	1862      	adds	r2, r4, r1
 80041c6:	4293      	cmp	r3, r2
 80041c8:	bf01      	itttt	eq
 80041ca:	681a      	ldreq	r2, [r3, #0]
 80041cc:	685b      	ldreq	r3, [r3, #4]
 80041ce:	1852      	addeq	r2, r2, r1
 80041d0:	6022      	streq	r2, [r4, #0]
 80041d2:	6063      	str	r3, [r4, #4]
 80041d4:	6004      	str	r4, [r0, #0]
 80041d6:	e7ed      	b.n	80041b4 <_free_r+0x24>
 80041d8:	4613      	mov	r3, r2
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	b10a      	cbz	r2, 80041e2 <_free_r+0x52>
 80041de:	42a2      	cmp	r2, r4
 80041e0:	d9fa      	bls.n	80041d8 <_free_r+0x48>
 80041e2:	6819      	ldr	r1, [r3, #0]
 80041e4:	1858      	adds	r0, r3, r1
 80041e6:	42a0      	cmp	r0, r4
 80041e8:	d10b      	bne.n	8004202 <_free_r+0x72>
 80041ea:	6820      	ldr	r0, [r4, #0]
 80041ec:	4401      	add	r1, r0
 80041ee:	1858      	adds	r0, r3, r1
 80041f0:	4282      	cmp	r2, r0
 80041f2:	6019      	str	r1, [r3, #0]
 80041f4:	d1de      	bne.n	80041b4 <_free_r+0x24>
 80041f6:	6810      	ldr	r0, [r2, #0]
 80041f8:	6852      	ldr	r2, [r2, #4]
 80041fa:	4401      	add	r1, r0
 80041fc:	6019      	str	r1, [r3, #0]
 80041fe:	605a      	str	r2, [r3, #4]
 8004200:	e7d8      	b.n	80041b4 <_free_r+0x24>
 8004202:	d902      	bls.n	800420a <_free_r+0x7a>
 8004204:	230c      	movs	r3, #12
 8004206:	602b      	str	r3, [r5, #0]
 8004208:	e7d4      	b.n	80041b4 <_free_r+0x24>
 800420a:	6820      	ldr	r0, [r4, #0]
 800420c:	1821      	adds	r1, r4, r0
 800420e:	428a      	cmp	r2, r1
 8004210:	bf01      	itttt	eq
 8004212:	6811      	ldreq	r1, [r2, #0]
 8004214:	6852      	ldreq	r2, [r2, #4]
 8004216:	1809      	addeq	r1, r1, r0
 8004218:	6021      	streq	r1, [r4, #0]
 800421a:	6062      	str	r2, [r4, #4]
 800421c:	605c      	str	r4, [r3, #4]
 800421e:	e7c9      	b.n	80041b4 <_free_r+0x24>
 8004220:	bd38      	pop	{r3, r4, r5, pc}
 8004222:	bf00      	nop
 8004224:	20000094 	.word	0x20000094

08004228 <_malloc_r>:
 8004228:	b570      	push	{r4, r5, r6, lr}
 800422a:	1ccd      	adds	r5, r1, #3
 800422c:	f025 0503 	bic.w	r5, r5, #3
 8004230:	3508      	adds	r5, #8
 8004232:	2d0c      	cmp	r5, #12
 8004234:	bf38      	it	cc
 8004236:	250c      	movcc	r5, #12
 8004238:	2d00      	cmp	r5, #0
 800423a:	4606      	mov	r6, r0
 800423c:	db01      	blt.n	8004242 <_malloc_r+0x1a>
 800423e:	42a9      	cmp	r1, r5
 8004240:	d903      	bls.n	800424a <_malloc_r+0x22>
 8004242:	230c      	movs	r3, #12
 8004244:	6033      	str	r3, [r6, #0]
 8004246:	2000      	movs	r0, #0
 8004248:	bd70      	pop	{r4, r5, r6, pc}
 800424a:	f000 f87d 	bl	8004348 <__malloc_lock>
 800424e:	4a21      	ldr	r2, [pc, #132]	; (80042d4 <_malloc_r+0xac>)
 8004250:	6814      	ldr	r4, [r2, #0]
 8004252:	4621      	mov	r1, r4
 8004254:	b991      	cbnz	r1, 800427c <_malloc_r+0x54>
 8004256:	4c20      	ldr	r4, [pc, #128]	; (80042d8 <_malloc_r+0xb0>)
 8004258:	6823      	ldr	r3, [r4, #0]
 800425a:	b91b      	cbnz	r3, 8004264 <_malloc_r+0x3c>
 800425c:	4630      	mov	r0, r6
 800425e:	f000 f863 	bl	8004328 <_sbrk_r>
 8004262:	6020      	str	r0, [r4, #0]
 8004264:	4629      	mov	r1, r5
 8004266:	4630      	mov	r0, r6
 8004268:	f000 f85e 	bl	8004328 <_sbrk_r>
 800426c:	1c43      	adds	r3, r0, #1
 800426e:	d124      	bne.n	80042ba <_malloc_r+0x92>
 8004270:	230c      	movs	r3, #12
 8004272:	4630      	mov	r0, r6
 8004274:	6033      	str	r3, [r6, #0]
 8004276:	f000 f868 	bl	800434a <__malloc_unlock>
 800427a:	e7e4      	b.n	8004246 <_malloc_r+0x1e>
 800427c:	680b      	ldr	r3, [r1, #0]
 800427e:	1b5b      	subs	r3, r3, r5
 8004280:	d418      	bmi.n	80042b4 <_malloc_r+0x8c>
 8004282:	2b0b      	cmp	r3, #11
 8004284:	d90f      	bls.n	80042a6 <_malloc_r+0x7e>
 8004286:	600b      	str	r3, [r1, #0]
 8004288:	18cc      	adds	r4, r1, r3
 800428a:	50cd      	str	r5, [r1, r3]
 800428c:	4630      	mov	r0, r6
 800428e:	f000 f85c 	bl	800434a <__malloc_unlock>
 8004292:	f104 000b 	add.w	r0, r4, #11
 8004296:	1d23      	adds	r3, r4, #4
 8004298:	f020 0007 	bic.w	r0, r0, #7
 800429c:	1ac3      	subs	r3, r0, r3
 800429e:	d0d3      	beq.n	8004248 <_malloc_r+0x20>
 80042a0:	425a      	negs	r2, r3
 80042a2:	50e2      	str	r2, [r4, r3]
 80042a4:	e7d0      	b.n	8004248 <_malloc_r+0x20>
 80042a6:	684b      	ldr	r3, [r1, #4]
 80042a8:	428c      	cmp	r4, r1
 80042aa:	bf16      	itet	ne
 80042ac:	6063      	strne	r3, [r4, #4]
 80042ae:	6013      	streq	r3, [r2, #0]
 80042b0:	460c      	movne	r4, r1
 80042b2:	e7eb      	b.n	800428c <_malloc_r+0x64>
 80042b4:	460c      	mov	r4, r1
 80042b6:	6849      	ldr	r1, [r1, #4]
 80042b8:	e7cc      	b.n	8004254 <_malloc_r+0x2c>
 80042ba:	1cc4      	adds	r4, r0, #3
 80042bc:	f024 0403 	bic.w	r4, r4, #3
 80042c0:	42a0      	cmp	r0, r4
 80042c2:	d005      	beq.n	80042d0 <_malloc_r+0xa8>
 80042c4:	1a21      	subs	r1, r4, r0
 80042c6:	4630      	mov	r0, r6
 80042c8:	f000 f82e 	bl	8004328 <_sbrk_r>
 80042cc:	3001      	adds	r0, #1
 80042ce:	d0cf      	beq.n	8004270 <_malloc_r+0x48>
 80042d0:	6025      	str	r5, [r4, #0]
 80042d2:	e7db      	b.n	800428c <_malloc_r+0x64>
 80042d4:	20000094 	.word	0x20000094
 80042d8:	20000098 	.word	0x20000098

080042dc <_realloc_r>:
 80042dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042de:	4607      	mov	r7, r0
 80042e0:	4614      	mov	r4, r2
 80042e2:	460e      	mov	r6, r1
 80042e4:	b921      	cbnz	r1, 80042f0 <_realloc_r+0x14>
 80042e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80042ea:	4611      	mov	r1, r2
 80042ec:	f7ff bf9c 	b.w	8004228 <_malloc_r>
 80042f0:	b922      	cbnz	r2, 80042fc <_realloc_r+0x20>
 80042f2:	f7ff ff4d 	bl	8004190 <_free_r>
 80042f6:	4625      	mov	r5, r4
 80042f8:	4628      	mov	r0, r5
 80042fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042fc:	f000 f826 	bl	800434c <_malloc_usable_size_r>
 8004300:	42a0      	cmp	r0, r4
 8004302:	d20f      	bcs.n	8004324 <_realloc_r+0x48>
 8004304:	4621      	mov	r1, r4
 8004306:	4638      	mov	r0, r7
 8004308:	f7ff ff8e 	bl	8004228 <_malloc_r>
 800430c:	4605      	mov	r5, r0
 800430e:	2800      	cmp	r0, #0
 8004310:	d0f2      	beq.n	80042f8 <_realloc_r+0x1c>
 8004312:	4631      	mov	r1, r6
 8004314:	4622      	mov	r2, r4
 8004316:	f7ff fbeb 	bl	8003af0 <memcpy>
 800431a:	4631      	mov	r1, r6
 800431c:	4638      	mov	r0, r7
 800431e:	f7ff ff37 	bl	8004190 <_free_r>
 8004322:	e7e9      	b.n	80042f8 <_realloc_r+0x1c>
 8004324:	4635      	mov	r5, r6
 8004326:	e7e7      	b.n	80042f8 <_realloc_r+0x1c>

08004328 <_sbrk_r>:
 8004328:	b538      	push	{r3, r4, r5, lr}
 800432a:	2300      	movs	r3, #0
 800432c:	4c05      	ldr	r4, [pc, #20]	; (8004344 <_sbrk_r+0x1c>)
 800432e:	4605      	mov	r5, r0
 8004330:	4608      	mov	r0, r1
 8004332:	6023      	str	r3, [r4, #0]
 8004334:	f7fc ff04 	bl	8001140 <_sbrk>
 8004338:	1c43      	adds	r3, r0, #1
 800433a:	d102      	bne.n	8004342 <_sbrk_r+0x1a>
 800433c:	6823      	ldr	r3, [r4, #0]
 800433e:	b103      	cbz	r3, 8004342 <_sbrk_r+0x1a>
 8004340:	602b      	str	r3, [r5, #0]
 8004342:	bd38      	pop	{r3, r4, r5, pc}
 8004344:	200001a8 	.word	0x200001a8

08004348 <__malloc_lock>:
 8004348:	4770      	bx	lr

0800434a <__malloc_unlock>:
 800434a:	4770      	bx	lr

0800434c <_malloc_usable_size_r>:
 800434c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004350:	1f18      	subs	r0, r3, #4
 8004352:	2b00      	cmp	r3, #0
 8004354:	bfbc      	itt	lt
 8004356:	580b      	ldrlt	r3, [r1, r0]
 8004358:	18c0      	addlt	r0, r0, r3
 800435a:	4770      	bx	lr

0800435c <_init>:
 800435c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800435e:	bf00      	nop
 8004360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004362:	bc08      	pop	{r3}
 8004364:	469e      	mov	lr, r3
 8004366:	4770      	bx	lr

08004368 <_fini>:
 8004368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800436a:	bf00      	nop
 800436c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800436e:	bc08      	pop	{r3}
 8004370:	469e      	mov	lr, r3
 8004372:	4770      	bx	lr
