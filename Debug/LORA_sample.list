
LORA_sample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fe4  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  080051b4  080051b4  000151b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052b0  080052b0  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080052b0  080052b0  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080052b0  080052b0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052b0  080052b0  000152b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052b4  080052b4  000152b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080052b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003fc  20000080  08005338  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  08005338  0002047c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011359  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000282a  00000000  00000000  00031402  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001048  00000000  00000000  00033c30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f00  00000000  00000000  00034c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000faca  00000000  00000000  00035b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c9ac  00000000  00000000  00045642  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00058f57  00000000  00000000  00051fee  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000aaf45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004658  00000000  00000000  000aafc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800519c 	.word	0x0800519c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	0800519c 	.word	0x0800519c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <delay>:

#include <Button.h>

extern volatile Button_state buttons;

void delay(uint16_t ticks) {
 8000220:	b480      	push	{r7}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
 8000226:	4603      	mov	r3, r0
 8000228:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i = 0; i < ticks; i++) {
 800022a:	2300      	movs	r3, #0
 800022c:	81fb      	strh	r3, [r7, #14]
 800022e:	e003      	b.n	8000238 <delay+0x18>
		asm("NOP");
 8000230:	bf00      	nop
	for (uint16_t i = 0; i < ticks; i++) {
 8000232:	89fb      	ldrh	r3, [r7, #14]
 8000234:	3301      	adds	r3, #1
 8000236:	81fb      	strh	r3, [r7, #14]
 8000238:	89fa      	ldrh	r2, [r7, #14]
 800023a:	88fb      	ldrh	r3, [r7, #6]
 800023c:	429a      	cmp	r2, r3
 800023e:	d3f7      	bcc.n	8000230 <delay+0x10>
	}
}
 8000240:	bf00      	nop
 8000242:	3714      	adds	r7, #20
 8000244:	46bd      	mov	sp, r7
 8000246:	bc80      	pop	{r7}
 8000248:	4770      	bx	lr
	...

0800024c <HAL_GPIO_EXTI_customIRQHandler>:

void HAL_GPIO_EXTI_customIRQHandler() {
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	delay(100);
 8000250:	2064      	movs	r0, #100	; 0x64
 8000252:	f7ff ffe5 	bl	8000220 <delay>

	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8000256:	2028      	movs	r0, #40	; 0x28
 8000258:	f002 f83f 	bl	80022da <HAL_NVIC_DisableIRQ>
	HAL_TIM_Base_Start_IT(&htim16);
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <HAL_GPIO_EXTI_customIRQHandler+0x1c>)
 800025e:	f003 fa84 	bl	800376a <HAL_TIM_Base_Start_IT>
}
 8000262:	bf00      	nop
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	20000168 	.word	0x20000168

0800026c <ReadButtons>:

uint8_t ReadButtons() {
 800026c:	b480      	push	{r7}
 800026e:	b083      	sub	sp, #12
 8000270:	af00      	add	r7, sp, #0
	if (buttons != NONE_Pressed) {
 8000272:	4b09      	ldr	r3, [pc, #36]	; (8000298 <ReadButtons+0x2c>)
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	b2db      	uxtb	r3, r3
 8000278:	2b00      	cmp	r3, #0
 800027a:	d007      	beq.n	800028c <ReadButtons+0x20>
		Button_state buf = buttons;
 800027c:	4b06      	ldr	r3, [pc, #24]	; (8000298 <ReadButtons+0x2c>)
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	71fb      	strb	r3, [r7, #7]
		buttons = NONE_Pressed;
 8000282:	4b05      	ldr	r3, [pc, #20]	; (8000298 <ReadButtons+0x2c>)
 8000284:	2200      	movs	r2, #0
 8000286:	701a      	strb	r2, [r3, #0]
		return buf;
 8000288:	79fb      	ldrb	r3, [r7, #7]
 800028a:	e000      	b.n	800028e <ReadButtons+0x22>
	}
	return NONE_Pressed;
 800028c:	2300      	movs	r3, #0
}
 800028e:	4618      	mov	r0, r3
 8000290:	370c      	adds	r7, #12
 8000292:	46bd      	mov	sp, r7
 8000294:	bc80      	pop	{r7}
 8000296:	4770      	bx	lr
 8000298:	200001a8 	.word	0x200001a8

0800029c <buzzer>:
 *      Author: Тлехас Алий
 */
#include <Buzzer.h>


void buzzer(uint16_t freq, uint8_t vol) {
 800029c:	b480      	push	{r7}
 800029e:	b083      	sub	sp, #12
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	460a      	mov	r2, r1
 80002a6:	80fb      	strh	r3, [r7, #6]
 80002a8:	4613      	mov	r3, r2
 80002aa:	717b      	strb	r3, [r7, #5]
	TIM2->PSC = (SYSCLK_FREQ  / (2 * BUZZER_VOLUME_MAX * freq)) - 1;
 80002ac:	88fa      	ldrh	r2, [r7, #6]
 80002ae:	4613      	mov	r3, r2
 80002b0:	009b      	lsls	r3, r3, #2
 80002b2:	4413      	add	r3, r2
 80002b4:	009b      	lsls	r3, r3, #2
 80002b6:	461a      	mov	r2, r3
 80002b8:	4b0a      	ldr	r3, [pc, #40]	; (80002e4 <buzzer+0x48>)
 80002ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80002be:	1e5a      	subs	r2, r3, #1
 80002c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002c4:	629a      	str	r2, [r3, #40]	; 0x28
	if(vol > BUZZER_VOLUME_MAX) vol = BUZZER_VOLUME_MAX;
 80002c6:	797b      	ldrb	r3, [r7, #5]
 80002c8:	2b0a      	cmp	r3, #10
 80002ca:	d901      	bls.n	80002d0 <buzzer+0x34>
 80002cc:	230a      	movs	r3, #10
 80002ce:	717b      	strb	r3, [r7, #5]
	TIM2->CCR1 = vol;
 80002d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002d4:	797b      	ldrb	r3, [r7, #5]
 80002d6:	6353      	str	r3, [r2, #52]	; 0x34
}
 80002d8:	bf00      	nop
 80002da:	370c      	adds	r7, #12
 80002dc:	46bd      	mov	sp, r7
 80002de:	bc80      	pop	{r7}
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	00f42400 	.word	0x00f42400

080002e8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	4603      	mov	r3, r0
 80002f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	db0c      	blt.n	8000314 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002fa:	79fb      	ldrb	r3, [r7, #7]
 80002fc:	f003 021f 	and.w	r2, r3, #31
 8000300:	4907      	ldr	r1, [pc, #28]	; (8000320 <__NVIC_ClearPendingIRQ+0x38>)
 8000302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000306:	095b      	lsrs	r3, r3, #5
 8000308:	2001      	movs	r0, #1
 800030a:	fa00 f202 	lsl.w	r2, r0, r2
 800030e:	3360      	adds	r3, #96	; 0x60
 8000310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000314:	bf00      	nop
 8000316:	370c      	adds	r7, #12
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	e000e100 	.word	0xe000e100

08000324 <HAL_TIM_PeriodElapsedCallback>:
 */

#include "Callbacks.h"
volatile Button_state buttons;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM16)
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a29      	ldr	r2, [pc, #164]	; (80003d8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d14b      	bne.n	80003ce <HAL_TIM_PeriodElapsedCallback+0xaa>
	{
		HAL_TIM_Base_Stop_IT(&htim16);
 8000336:	4829      	ldr	r0, [pc, #164]	; (80003dc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000338:	f003 fa3a 	bl	80037b0 <HAL_TIM_Base_Stop_IT>
		__HAL_GPIO_EXTI_CLEAR_IT(but_1_Pin);
 800033c:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800033e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000342:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(but_2_Pin);
 8000344:	4b26      	ldr	r3, [pc, #152]	; (80003e0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000346:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800034a:	615a      	str	r2, [r3, #20]

		if (HAL_GPIO_ReadPin(GPIOC, but_1_Pin) && HAL_GPIO_ReadPin(GPIOC, but_2_Pin))
 800034c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000350:	4824      	ldr	r0, [pc, #144]	; (80003e4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000352:	f002 f937 	bl	80025c4 <HAL_GPIO_ReadPin>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d00b      	beq.n	8000374 <HAL_TIM_PeriodElapsedCallback+0x50>
 800035c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000360:	4820      	ldr	r0, [pc, #128]	; (80003e4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000362:	f002 f92f 	bl	80025c4 <HAL_GPIO_ReadPin>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d003      	beq.n	8000374 <HAL_TIM_PeriodElapsedCallback+0x50>
				buttons = BOTH_Pressed;
 800036c:	4b1e      	ldr	r3, [pc, #120]	; (80003e8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800036e:	2203      	movs	r2, #3
 8000370:	701a      	strb	r2, [r3, #0]
 8000372:	e026      	b.n	80003c2 <HAL_TIM_PeriodElapsedCallback+0x9e>
		else if (HAL_GPIO_ReadPin(GPIOC, but_1_Pin) && !HAL_GPIO_ReadPin(GPIOC, but_2_Pin))
 8000374:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000378:	481a      	ldr	r0, [pc, #104]	; (80003e4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800037a:	f002 f923 	bl	80025c4 <HAL_GPIO_ReadPin>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d00b      	beq.n	800039c <HAL_TIM_PeriodElapsedCallback+0x78>
 8000384:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000388:	4816      	ldr	r0, [pc, #88]	; (80003e4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800038a:	f002 f91b 	bl	80025c4 <HAL_GPIO_ReadPin>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d103      	bne.n	800039c <HAL_TIM_PeriodElapsedCallback+0x78>
				buttons = LEFT_Pressed;
 8000394:	4b14      	ldr	r3, [pc, #80]	; (80003e8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000396:	2201      	movs	r2, #1
 8000398:	701a      	strb	r2, [r3, #0]
 800039a:	e012      	b.n	80003c2 <HAL_TIM_PeriodElapsedCallback+0x9e>
		else if (!HAL_GPIO_ReadPin(GPIOC, but_1_Pin) && HAL_GPIO_ReadPin(GPIOC, but_2_Pin))
 800039c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003a0:	4810      	ldr	r0, [pc, #64]	; (80003e4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80003a2:	f002 f90f 	bl	80025c4 <HAL_GPIO_ReadPin>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d10a      	bne.n	80003c2 <HAL_TIM_PeriodElapsedCallback+0x9e>
 80003ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003b0:	480c      	ldr	r0, [pc, #48]	; (80003e4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80003b2:	f002 f907 	bl	80025c4 <HAL_GPIO_ReadPin>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d002      	beq.n	80003c2 <HAL_TIM_PeriodElapsedCallback+0x9e>
				buttons = RIGHT_Pressed;
 80003bc:	4b0a      	ldr	r3, [pc, #40]	; (80003e8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80003be:	2202      	movs	r2, #2
 80003c0:	701a      	strb	r2, [r3, #0]

		NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 80003c2:	2028      	movs	r0, #40	; 0x28
 80003c4:	f7ff ff90 	bl	80002e8 <__NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003c8:	2028      	movs	r0, #40	; 0x28
 80003ca:	f001 ff78 	bl	80022be <HAL_NVIC_EnableIRQ>
	}
}
 80003ce:	bf00      	nop
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40014400 	.word	0x40014400
 80003dc:	20000168 	.word	0x20000168
 80003e0:	40010400 	.word	0x40010400
 80003e4:	40011000 	.word	0x40011000
 80003e8:	200001a8 	.word	0x200001a8

080003ec <SX1278_hw_init>:

//////////////////////////////////
// logic
//////////////////////////////////

__weak void SX1278_hw_init(SX1278_hw_t * hw) {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80003f4:	2101      	movs	r1, #1
 80003f6:	6878      	ldr	r0, [r7, #4]
 80003f8:	f000 f80d 	bl	8000416 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	6858      	ldr	r0, [r3, #4]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	b29b      	uxth	r3, r3
 8000406:	2201      	movs	r2, #1
 8000408:	4619      	mov	r1, r3
 800040a:	f002 f8f2 	bl	80025f2 <HAL_GPIO_WritePin>
}
 800040e:	bf00      	nop
 8000410:	3708      	adds	r7, #8
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}

08000416 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t * hw, int value) {
 8000416:	b580      	push	{r7, lr}
 8000418:	b082      	sub	sp, #8
 800041a:	af00      	add	r7, sp, #0
 800041c:	6078      	str	r0, [r7, #4]
 800041e:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	6958      	ldr	r0, [r3, #20]
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	691b      	ldr	r3, [r3, #16]
 8000428:	b299      	uxth	r1, r3
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	2b01      	cmp	r3, #1
 800042e:	bf0c      	ite	eq
 8000430:	2301      	moveq	r3, #1
 8000432:	2300      	movne	r3, #0
 8000434:	b2db      	uxtb	r3, r3
 8000436:	461a      	mov	r2, r3
 8000438:	f002 f8db 	bl	80025f2 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 800043c:	bf00      	nop
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}

08000444 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t * hw) {
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 800044c:	2101      	movs	r1, #1
 800044e:	6878      	ldr	r0, [r7, #4]
 8000450:	f7ff ffe1 	bl	8000416 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	6858      	ldr	r0, [r3, #4]
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	b29b      	uxth	r3, r3
 800045e:	2200      	movs	r2, #0
 8000460:	4619      	mov	r1, r3
 8000462:	f002 f8c6 	bl	80025f2 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8000466:	2001      	movs	r0, #1
 8000468:	f000 f855 	bl	8000516 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	6858      	ldr	r0, [r3, #4]
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	b29b      	uxth	r3, r3
 8000476:	2201      	movs	r2, #1
 8000478:	4619      	mov	r1, r3
 800047a:	f002 f8ba 	bl	80025f2 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 800047e:	2064      	movs	r0, #100	; 0x64
 8000480:	f000 f849 	bl	8000516 <SX1278_hw_DelayMs>
}
 8000484:	bf00      	nop
 8000486:	3708      	adds	r7, #8
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}

0800048c <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t * hw, uint8_t cmd) {
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
 8000494:	460b      	mov	r3, r1
 8000496:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8000498:	2100      	movs	r1, #0
 800049a:	6878      	ldr	r0, [r7, #4]
 800049c:	f7ff ffbb 	bl	8000416 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	6998      	ldr	r0, [r3, #24]
 80004a4:	1cf9      	adds	r1, r7, #3
 80004a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004aa:	2201      	movs	r2, #1
 80004ac:	f002 fdc7 	bl	800303e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 80004b0:	bf00      	nop
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	699b      	ldr	r3, [r3, #24]
 80004b6:	4618      	mov	r0, r3
 80004b8:	f003 f897 	bl	80035ea <HAL_SPI_GetState>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b01      	cmp	r3, #1
 80004c0:	d1f7      	bne.n	80004b2 <SX1278_hw_SPICommand+0x26>
		;
}
 80004c2:	bf00      	nop
 80004c4:	3708      	adds	r7, #8
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}

080004ca <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t * hw) {
 80004ca:	b580      	push	{r7, lr}
 80004cc:	b086      	sub	sp, #24
 80004ce:	af02      	add	r7, sp, #8
 80004d0:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 80004d2:	2300      	movs	r3, #0
 80004d4:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 80004d6:	2300      	movs	r3, #0
 80004d8:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 80004da:	2100      	movs	r1, #0
 80004dc:	6878      	ldr	r0, [r7, #4]
 80004de:	f7ff ff9a 	bl	8000416 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	6998      	ldr	r0, [r3, #24]
 80004e6:	f107 020e 	add.w	r2, r7, #14
 80004ea:	f107 010f 	add.w	r1, r7, #15
 80004ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f2:	9300      	str	r3, [sp, #0]
 80004f4:	2301      	movs	r3, #1
 80004f6:	f002 fed6 	bl	80032a6 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 80004fa:	bf00      	nop
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4618      	mov	r0, r3
 8000502:	f003 f872 	bl	80035ea <HAL_SPI_GetState>
 8000506:	4603      	mov	r3, r0
 8000508:	2b01      	cmp	r3, #1
 800050a:	d1f7      	bne.n	80004fc <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 800050c:	7bbb      	ldrb	r3, [r7, #14]
}
 800050e:	4618      	mov	r0, r3
 8000510:	3710      	adds	r7, #16
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}

08000516 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8000516:	b580      	push	{r7, lr}
 8000518:	b082      	sub	sp, #8
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 800051e:	6878      	ldr	r0, [r7, #4]
 8000520:	f001 fb8c 	bl	8001c3c <HAL_Delay>
}
 8000524:	bf00      	nop
 8000526:	3708      	adds	r7, #8
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}

0800052c <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t * hw) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	68da      	ldr	r2, [r3, #12]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	689b      	ldr	r3, [r3, #8]
 800053c:	b29b      	uxth	r3, r3
 800053e:	4619      	mov	r1, r3
 8000540:	4610      	mov	r0, r2
 8000542:	f002 f83f 	bl	80025c4 <HAL_GPIO_ReadPin>
 8000546:	4603      	mov	r3, r0
 8000548:	2b01      	cmp	r3, #1
 800054a:	bf0c      	ite	eq
 800054c:	2301      	moveq	r3, #1
 800054e:	2300      	movne	r3, #0
 8000550:	b2db      	uxtb	r3, r3
}
 8000552:	4618      	mov	r0, r3
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <SX1278_SPIRead>:

//////////////////////////////////
// logic
//////////////////////////////////

uint8_t SX1278_SPIRead(SX1278_t * module, uint8_t addr) {
 800055a:	b580      	push	{r7, lr}
 800055c:	b084      	sub	sp, #16
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
 8000562:	460b      	mov	r3, r1
 8000564:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	78fa      	ldrb	r2, [r7, #3]
 800056c:	4611      	mov	r1, r2
 800056e:	4618      	mov	r0, r3
 8000570:	f7ff ff8c 	bl	800048c <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4618      	mov	r0, r3
 800057a:	f7ff ffa6 	bl	80004ca <SX1278_hw_SPIReadByte>
 800057e:	4603      	mov	r3, r0
 8000580:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2101      	movs	r1, #1
 8000588:	4618      	mov	r0, r3
 800058a:	f7ff ff44 	bl	8000416 <SX1278_hw_SetNSS>
	return tmp;
 800058e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000590:	4618      	mov	r0, r3
 8000592:	3710      	adds	r7, #16
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}

08000598 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t * module, uint8_t addr, uint8_t cmd) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	460b      	mov	r3, r1
 80005a2:	70fb      	strb	r3, [r7, #3]
 80005a4:	4613      	mov	r3, r2
 80005a6:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff ff31 	bl	8000416 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	78fb      	ldrb	r3, [r7, #3]
 80005ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	4619      	mov	r1, r3
 80005c2:	4610      	mov	r0, r2
 80005c4:	f7ff ff62 	bl	800048c <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	78ba      	ldrb	r2, [r7, #2]
 80005ce:	4611      	mov	r1, r2
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff ff5b 	bl	800048c <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2101      	movs	r1, #1
 80005dc:	4618      	mov	r0, r3
 80005de:	f7ff ff1a 	bl	8000416 <SX1278_hw_SetNSS>
}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}

080005ea <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t * module, uint8_t addr, uint8_t* rxBuf,
		uint8_t length) {
 80005ea:	b590      	push	{r4, r7, lr}
 80005ec:	b087      	sub	sp, #28
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	60f8      	str	r0, [r7, #12]
 80005f2:	607a      	str	r2, [r7, #4]
 80005f4:	461a      	mov	r2, r3
 80005f6:	460b      	mov	r3, r1
 80005f8:	72fb      	strb	r3, [r7, #11]
 80005fa:	4613      	mov	r3, r2
 80005fc:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 80005fe:	7abb      	ldrb	r3, [r7, #10]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d927      	bls.n	8000654 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff ff03 	bl	8000416 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	7afa      	ldrb	r2, [r7, #11]
 8000616:	4611      	mov	r1, r2
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff ff37 	bl	800048c <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800061e:	2300      	movs	r3, #0
 8000620:	75fb      	strb	r3, [r7, #23]
 8000622:	e00c      	b.n	800063e <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	6819      	ldr	r1, [r3, #0]
 8000628:	7dfb      	ldrb	r3, [r7, #23]
 800062a:	687a      	ldr	r2, [r7, #4]
 800062c:	18d4      	adds	r4, r2, r3
 800062e:	4608      	mov	r0, r1
 8000630:	f7ff ff4b 	bl	80004ca <SX1278_hw_SPIReadByte>
 8000634:	4603      	mov	r3, r0
 8000636:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 8000638:	7dfb      	ldrb	r3, [r7, #23]
 800063a:	3301      	adds	r3, #1
 800063c:	75fb      	strb	r3, [r7, #23]
 800063e:	7dfa      	ldrb	r2, [r7, #23]
 8000640:	7abb      	ldrb	r3, [r7, #10]
 8000642:	429a      	cmp	r2, r3
 8000644:	d3ee      	bcc.n	8000624 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2101      	movs	r1, #1
 800064c:	4618      	mov	r0, r3
 800064e:	f7ff fee2 	bl	8000416 <SX1278_hw_SetNSS>
 8000652:	e000      	b.n	8000656 <SX1278_SPIBurstRead+0x6c>
		return;
 8000654:	bf00      	nop
	}
}
 8000656:	371c      	adds	r7, #28
 8000658:	46bd      	mov	sp, r7
 800065a:	bd90      	pop	{r4, r7, pc}

0800065c <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t * module, uint8_t addr, uint8_t* txBuf,
		uint8_t length) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	607a      	str	r2, [r7, #4]
 8000666:	461a      	mov	r2, r3
 8000668:	460b      	mov	r3, r1
 800066a:	72fb      	strb	r3, [r7, #11]
 800066c:	4613      	mov	r3, r2
 800066e:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8000670:	7abb      	ldrb	r3, [r7, #10]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d929      	bls.n	80006ca <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2100      	movs	r1, #0
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff feca 	bl	8000416 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	681a      	ldr	r2, [r3, #0]
 8000686:	7afb      	ldrb	r3, [r7, #11]
 8000688:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800068c:	b2db      	uxtb	r3, r3
 800068e:	4619      	mov	r1, r3
 8000690:	4610      	mov	r0, r2
 8000692:	f7ff fefb 	bl	800048c <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000696:	2300      	movs	r3, #0
 8000698:	75fb      	strb	r3, [r7, #23]
 800069a:	e00b      	b.n	80006b4 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	6818      	ldr	r0, [r3, #0]
 80006a0:	7dfb      	ldrb	r3, [r7, #23]
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	4413      	add	r3, r2
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	4619      	mov	r1, r3
 80006aa:	f7ff feef 	bl	800048c <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80006ae:	7dfb      	ldrb	r3, [r7, #23]
 80006b0:	3301      	adds	r3, #1
 80006b2:	75fb      	strb	r3, [r7, #23]
 80006b4:	7dfa      	ldrb	r2, [r7, #23]
 80006b6:	7abb      	ldrb	r3, [r7, #10]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d3ef      	bcc.n	800069c <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2101      	movs	r1, #1
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff fea7 	bl	8000416 <SX1278_hw_SetNSS>
 80006c8:	e000      	b.n	80006cc <SX1278_SPIBurstWrite+0x70>
		return;
 80006ca:	bf00      	nop
	}
}
 80006cc:	3718      	adds	r7, #24
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <SX1278_defaultConfig>:

void SX1278_defaultConfig(SX1278_t * module) {
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b084      	sub	sp, #16
 80006d6:	af02      	add	r7, sp, #8
 80006d8:	6078      	str	r0, [r7, #4]
	SX1278_config(module, module->frequency, module->power, module->LoRa_Rate,
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	7919      	ldrb	r1, [r3, #4]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	795a      	ldrb	r2, [r3, #5]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	7998      	ldrb	r0, [r3, #6]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	79db      	ldrb	r3, [r3, #7]
 80006ea:	9300      	str	r3, [sp, #0]
 80006ec:	4603      	mov	r3, r0
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f000 f804 	bl	80006fc <SX1278_config>
			module->LoRa_BW);
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <SX1278_config>:

void SX1278_config(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	4608      	mov	r0, r1
 8000706:	4611      	mov	r1, r2
 8000708:	461a      	mov	r2, r3
 800070a:	4603      	mov	r3, r0
 800070c:	70fb      	strb	r3, [r7, #3]
 800070e:	460b      	mov	r3, r1
 8000710:	70bb      	strb	r3, [r7, #2]
 8000712:	4613      	mov	r3, r2
 8000714:	707b      	strb	r3, [r7, #1]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	f000 f8aa 	bl	8000870 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 800071c:	200f      	movs	r0, #15
 800071e:	f7ff fefa 	bl	8000516 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 8000722:	6878      	ldr	r0, [r7, #4]
 8000724:	f000 f8b4 	bl	8000890 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
			(uint8_t*) SX1278_Frequency[frequency], 3); //setting  frequency parameter
 8000728:	78fa      	ldrb	r2, [r7, #3]
 800072a:	4613      	mov	r3, r2
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	4413      	add	r3, r2
 8000730:	4a43      	ldr	r2, [pc, #268]	; (8000840 <SX1278_config+0x144>)
 8000732:	441a      	add	r2, r3
	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
 8000734:	2303      	movs	r3, #3
 8000736:	2106      	movs	r1, #6
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f7ff ff8f 	bl	800065c <SX1278_SPIBurstWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[power]); //Setting output power parameter
 800073e:	78bb      	ldrb	r3, [r7, #2]
 8000740:	4a40      	ldr	r2, [pc, #256]	; (8000844 <SX1278_config+0x148>)
 8000742:	5cd3      	ldrb	r3, [r2, r3]
 8000744:	461a      	mov	r2, r3
 8000746:	2109      	movs	r1, #9
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f7ff ff25 	bl	8000598 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 800074e:	220b      	movs	r2, #11
 8000750:	210b      	movs	r1, #11
 8000752:	6878      	ldr	r0, [r7, #4]
 8000754:	f7ff ff20 	bl	8000598 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8000758:	2223      	movs	r2, #35	; 0x23
 800075a:	210c      	movs	r1, #12
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f7ff ff1b 	bl	8000598 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[LoRa_Rate] == 6) {	//SFactor=6
 8000762:	787b      	ldrb	r3, [r7, #1]
 8000764:	4a38      	ldr	r2, [pc, #224]	; (8000848 <SX1278_config+0x14c>)
 8000766:	5cd3      	ldrb	r3, [r2, r3]
 8000768:	2b06      	cmp	r3, #6
 800076a:	d131      	bne.n	80007d0 <SX1278_config+0xd4>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 800076c:	7e3b      	ldrb	r3, [r7, #24]
 800076e:	4a37      	ldr	r2, [pc, #220]	; (800084c <SX1278_config+0x150>)
 8000770:	5cd3      	ldrb	r3, [r2, r3]
 8000772:	011b      	lsls	r3, r3, #4
 8000774:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000776:	3303      	adds	r3, #3
 8000778:	b2db      	uxtb	r3, r3
 800077a:	461a      	mov	r2, r3
 800077c:	211d      	movs	r1, #29
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f7ff ff0a 	bl	8000598 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 8000784:	787b      	ldrb	r3, [r7, #1]
 8000786:	4a30      	ldr	r2, [pc, #192]	; (8000848 <SX1278_config+0x14c>)
 8000788:	5cd3      	ldrb	r3, [r2, r3]
 800078a:	011b      	lsls	r3, r3, #4
 800078c:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800078e:	3307      	adds	r3, #7
 8000790:	b2db      	uxtb	r3, r3
 8000792:	461a      	mov	r2, r3
 8000794:	211e      	movs	r1, #30
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f7ff fefe 	bl	8000598 <SX1278_SPIWrite>
						+ 0x03));

		tmp = SX1278_SPIRead(module, 0x31);
 800079c:	2131      	movs	r1, #49	; 0x31
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f7ff fedb 	bl	800055a <SX1278_SPIRead>
 80007a4:	4603      	mov	r3, r0
 80007a6:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	f023 0307 	bic.w	r3, r3, #7
 80007ae:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
 80007b2:	f043 0305 	orr.w	r3, r3, #5
 80007b6:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
 80007ba:	461a      	mov	r2, r3
 80007bc:	2131      	movs	r1, #49	; 0x31
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f7ff feea 	bl	8000598 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 80007c4:	220c      	movs	r2, #12
 80007c6:	2137      	movs	r1, #55	; 0x37
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f7ff fee5 	bl	8000598 <SX1278_SPIWrite>
 80007ce:	e017      	b.n	8000800 <SX1278_config+0x104>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80007d0:	7e3b      	ldrb	r3, [r7, #24]
 80007d2:	4a1e      	ldr	r2, [pc, #120]	; (800084c <SX1278_config+0x150>)
 80007d4:	5cd3      	ldrb	r3, [r2, r3]
 80007d6:	011b      	lsls	r3, r3, #4
 80007d8:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80007da:	3302      	adds	r3, #2
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	461a      	mov	r2, r3
 80007e0:	211d      	movs	r1, #29
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f7ff fed8 	bl	8000598 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 80007e8:	787b      	ldrb	r3, [r7, #1]
 80007ea:	4a17      	ldr	r2, [pc, #92]	; (8000848 <SX1278_config+0x14c>)
 80007ec:	5cd3      	ldrb	r3, [r2, r3]
 80007ee:	011b      	lsls	r3, r3, #4
 80007f0:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80007f2:	3307      	adds	r3, #7
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	461a      	mov	r2, r3
 80007f8:	211e      	movs	r1, #30
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff fecc 	bl	8000598 <SX1278_SPIWrite>
						+ 0x03)); //SFactor &  LNA gain set by the internal AGC loop
	}

	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0xFF); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8000800:	22ff      	movs	r2, #255	; 0xff
 8000802:	211f      	movs	r1, #31
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f7ff fec7 	bl	8000598 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 800080a:	2200      	movs	r2, #0
 800080c:	2120      	movs	r1, #32
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff fec2 	bl	8000598 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 12); //RegPreambleLsb 8+4=12byte Preamble
 8000814:	220c      	movs	r2, #12
 8000816:	2121      	movs	r1, #33	; 0x21
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f7ff febd 	bl	8000598 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 800081e:	2201      	movs	r2, #1
 8000820:	2141      	movs	r1, #65	; 0x41
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f7ff feb8 	bl	8000598 <SX1278_SPIWrite>
	module->readBytes = 0;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2200      	movs	r2, #0
 800082c:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	SX1278_standby(module); //Entry standby mode
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f000 f80d 	bl	8000850 <SX1278_standby>
}
 8000836:	bf00      	nop
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	08005244 	.word	0x08005244
 8000844:	08005248 	.word	0x08005248
 8000848:	0800524c 	.word	0x0800524c
 800084c:	08005254 	.word	0x08005254

08000850 <SX1278_standby>:

void SX1278_standby(SX1278_t * module) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8000858:	2209      	movs	r2, #9
 800085a:	2101      	movs	r1, #1
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff fe9b 	bl	8000598 <SX1278_SPIWrite>
	module->status = STANDBY;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2201      	movs	r2, #1
 8000866:	725a      	strb	r2, [r3, #9]
}
 8000868:	bf00      	nop
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <SX1278_sleep>:

void SX1278_sleep(SX1278_t * module) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8000878:	2208      	movs	r2, #8
 800087a:	2101      	movs	r1, #1
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f7ff fe8b 	bl	8000598 <SX1278_SPIWrite>
	module->status = SLEEP;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2200      	movs	r2, #0
 8000886:	725a      	strb	r2, [r3, #9]
}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t * module) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8000898:	2288      	movs	r2, #136	; 0x88
 800089a:	2101      	movs	r1, #1
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f7ff fe7b 	bl	8000598 <SX1278_SPIWrite>
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t * module) {
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b082      	sub	sp, #8
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 80008b2:	22ff      	movs	r2, #255	; 0xff
 80008b4:	2112      	movs	r1, #18
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f7ff fe6e 	bl	8000598 <SX1278_SPIWrite>
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	460b      	mov	r3, r1
 80008ce:	607a      	str	r2, [r7, #4]
 80008d0:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	7afa      	ldrb	r2, [r7, #11]
 80008d6:	721a      	strb	r2, [r3, #8]

	SX1278_defaultConfig(module);		//Setting base parameter
 80008d8:	68f8      	ldr	r0, [r7, #12]
 80008da:	f7ff fefa 	bl	80006d2 <SX1278_defaultConfig>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 80008de:	2284      	movs	r2, #132	; 0x84
 80008e0:	214d      	movs	r1, #77	; 0x4d
 80008e2:	68f8      	ldr	r0, [r7, #12]
 80008e4:	f7ff fe58 	bl	8000598 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 80008e8:	22ff      	movs	r2, #255	; 0xff
 80008ea:	2124      	movs	r1, #36	; 0x24
 80008ec:	68f8      	ldr	r0, [r7, #12]
 80008ee:	f7ff fe53 	bl	8000598 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 80008f2:	2201      	movs	r2, #1
 80008f4:	2140      	movs	r1, #64	; 0x40
 80008f6:	68f8      	ldr	r0, [r7, #12]
 80008f8:	f7ff fe4e 	bl	8000598 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 80008fc:	223f      	movs	r2, #63	; 0x3f
 80008fe:	2111      	movs	r1, #17
 8000900:	68f8      	ldr	r0, [r7, #12]
 8000902:	f7ff fe49 	bl	8000598 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000906:	68f8      	ldr	r0, [r7, #12]
 8000908:	f7ff ffcf 	bl	80008aa <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 800090c:	7afb      	ldrb	r3, [r7, #11]
 800090e:	461a      	mov	r2, r3
 8000910:	2122      	movs	r1, #34	; 0x22
 8000912:	68f8      	ldr	r0, [r7, #12]
 8000914:	f7ff fe40 	bl	8000598 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8000918:	210f      	movs	r1, #15
 800091a:	68f8      	ldr	r0, [r7, #12]
 800091c:	f7ff fe1d 	bl	800055a <SX1278_SPIRead>
 8000920:	4603      	mov	r3, r0
 8000922:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8000924:	7dfb      	ldrb	r3, [r7, #23]
 8000926:	461a      	mov	r2, r3
 8000928:	210d      	movs	r1, #13
 800092a:	68f8      	ldr	r0, [r7, #12]
 800092c:	f7ff fe34 	bl	8000598 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 8000930:	228d      	movs	r2, #141	; 0x8d
 8000932:	2101      	movs	r1, #1
 8000934:	68f8      	ldr	r0, [r7, #12]
 8000936:	f7ff fe2f 	bl	8000598 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	2200      	movs	r2, #0
 800093e:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8000942:	2118      	movs	r1, #24
 8000944:	68f8      	ldr	r0, [r7, #12]
 8000946:	f7ff fe08 	bl	800055a <SX1278_SPIRead>
 800094a:	4603      	mov	r3, r0
 800094c:	f003 0304 	and.w	r3, r3, #4
 8000950:	2b04      	cmp	r3, #4
 8000952:	d104      	bne.n	800095e <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	2203      	movs	r2, #3
 8000958:	725a      	strb	r2, [r3, #9]
			return 1;
 800095a:	2301      	movs	r3, #1
 800095c:	e013      	b.n	8000986 <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	3b01      	subs	r3, #1
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d109      	bne.n	800097e <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff fd68 	bl	8000444 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 8000974:	68f8      	ldr	r0, [r7, #12]
 8000976:	f7ff feac 	bl	80006d2 <SX1278_defaultConfig>
			return 0;
 800097a:	2300      	movs	r3, #0
 800097c:	e003      	b.n	8000986 <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 800097e:	2001      	movs	r0, #1
 8000980:	f7ff fdc9 	bl	8000516 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8000984:	e7dd      	b.n	8000942 <SX1278_LoRaEntryRx+0x7e>
	}
}
 8000986:	4618      	mov	r0, r3
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t * module) {
 800098e:	b580      	push	{r7, lr}
 8000990:	b084      	sub	sp, #16
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff fdc6 	bl	800052c <SX1278_hw_GetDIO0>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d030      	beq.n	8000a08 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	330a      	adds	r3, #10
 80009aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f003 ffc8 	bl	8004946 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 80009b6:	2110      	movs	r1, #16
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f7ff fdce 	bl	800055a <SX1278_SPIRead>
 80009be:	4603      	mov	r3, r0
 80009c0:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 80009c2:	7bbb      	ldrb	r3, [r7, #14]
 80009c4:	461a      	mov	r2, r3
 80009c6:	210d      	movs	r1, #13
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff fde5 	bl	8000598 <SX1278_SPIWrite>

		if (module->LoRa_Rate == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	799b      	ldrb	r3, [r3, #6]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d103      	bne.n	80009de <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	7a1b      	ldrb	r3, [r3, #8]
 80009da:	73fb      	strb	r3, [r7, #15]
 80009dc:	e005      	b.n	80009ea <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 80009de:	2113      	movs	r1, #19
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f7ff fdba 	bl	800055a <SX1278_SPIRead>
 80009e6:	4603      	mov	r3, r0
 80009e8:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	f103 020a 	add.w	r2, r3, #10
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
 80009f2:	2100      	movs	r1, #0
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f7ff fdf8 	bl	80005ea <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	7bfa      	ldrb	r2, [r7, #15]
 80009fe:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
		SX1278_clearLoRaIrq(module);
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f7ff ff51 	bl	80008aa <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <SX1278_begin>:
		SX1278_hw_DelayMs(1);
	}
}

void SX1278_begin(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW, uint8_t packetLength) {
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b082      	sub	sp, #8
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
 8000a1e:	4608      	mov	r0, r1
 8000a20:	4611      	mov	r1, r2
 8000a22:	461a      	mov	r2, r3
 8000a24:	4603      	mov	r3, r0
 8000a26:	70fb      	strb	r3, [r7, #3]
 8000a28:	460b      	mov	r3, r1
 8000a2a:	70bb      	strb	r3, [r7, #2]
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	707b      	strb	r3, [r7, #1]
	SX1278_hw_init(module->hw);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff fcd9 	bl	80003ec <SX1278_hw_init>
	module->frequency = frequency;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	78fa      	ldrb	r2, [r7, #3]
 8000a3e:	711a      	strb	r2, [r3, #4]
	module->power = power;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	78ba      	ldrb	r2, [r7, #2]
 8000a44:	715a      	strb	r2, [r3, #5]
	module->LoRa_Rate = LoRa_Rate;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	787a      	ldrb	r2, [r7, #1]
 8000a4a:	719a      	strb	r2, [r3, #6]
	module->LoRa_BW = LoRa_BW;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	7c3a      	ldrb	r2, [r7, #16]
 8000a50:	71da      	strb	r2, [r3, #7]
	module->packetLength = packetLength;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	7d3a      	ldrb	r2, [r7, #20]
 8000a56:	721a      	strb	r2, [r3, #8]
	SX1278_defaultConfig(module);
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f7ff fe3a 	bl	80006d2 <SX1278_defaultConfig>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <SX1278_read>:

uint8_t SX1278_available(SX1278_t * module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t * module, uint8_t* rxBuf, uint8_t length) {
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b084      	sub	sp, #16
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	60f8      	str	r0, [r7, #12]
 8000a6e:	60b9      	str	r1, [r7, #8]
 8000a70:	4613      	mov	r3, r2
 8000a72:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8000a7a:	79fa      	ldrb	r2, [r7, #7]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d003      	beq.n	8000a88 <SX1278_read+0x22>
		length = module->readBytes;
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8000a86:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	330a      	adds	r3, #10
 8000a8c:	79fa      	ldrb	r2, [r7, #7]
 8000a8e:	4619      	mov	r1, r3
 8000a90:	68b8      	ldr	r0, [r7, #8]
 8000a92:	f003 ff4d 	bl	8004930 <memcpy>
	rxBuf[length] = '\0';
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	68ba      	ldr	r2, [r7, #8]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	return length;
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin)
{
 8000ab2:	b4b0      	push	{r4, r5, r7}
 8000ab4:	b08b      	sub	sp, #44	; 0x2c
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	60f8      	str	r0, [r7, #12]
 8000aba:	60b9      	str	r1, [r7, #8]
 8000abc:	607a      	str	r2, [r7, #4]
 8000abe:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.en_pin = en_pin;
 8000ac0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000ac4:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ac8:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000aca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000acc:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	613b      	str	r3, [r7, #16]

	return lcd;
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	461d      	mov	r5, r3
 8000ade:	f107 0410 	add.w	r4, r7, #16
 8000ae2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ae4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ae6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000aea:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000aee:	68f8      	ldr	r0, [r7, #12]
 8000af0:	372c      	adds	r7, #44	; 0x2c
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bcb0      	pop	{r4, r5, r7}
 8000af6:	4770      	bx	lr

08000af8 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, 0x33);
 8000b00:	2133      	movs	r1, #51	; 0x33
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f000 f890 	bl	8000c28 <lcd_write_command>
	lcd_write_command(lcd, 0x32);
 8000b08:	2132      	movs	r1, #50	; 0x32
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f000 f88c 	bl	8000c28 <lcd_write_command>
	lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000b10:	2128      	movs	r1, #40	; 0x28
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f000 f888 	bl	8000c28 <lcd_write_command>

	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000b18:	2101      	movs	r1, #1
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f000 f884 	bl	8000c28 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000b20:	210c      	movs	r1, #12
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f000 f880 	bl	8000c28 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000b28:	2106      	movs	r1, #6
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f000 f87c 	bl	8000c28 <lcd_write_command>
}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	460b      	mov	r3, r1
 8000b42:	70fb      	strb	r3, [r7, #3]
 8000b44:	4613      	mov	r3, r2
 8000b46:	70bb      	strb	r3, [r7, #2]
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000b48:	78fb      	ldrb	r3, [r7, #3]
 8000b4a:	4a07      	ldr	r2, [pc, #28]	; (8000b68 <Lcd_cursor+0x30>)
 8000b4c:	5cd2      	ldrb	r2, [r2, r3]
 8000b4e:	78bb      	ldrb	r3, [r7, #2]
 8000b50:	4413      	add	r3, r2
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	3b80      	subs	r3, #128	; 0x80
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	4619      	mov	r1, r3
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f000 f864 	bl	8000c28 <lcd_write_command>
}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	08005260 	.word	0x08005260

08000b6c <Lcd_blink>:

/**
 * Blinking and noBlinking cursor or disable cursor
 */
void Lcd_blink(Lcd_HandleTypeDef * lcd){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D | OPT_B);		// Lcd-on, cursor-on, blink
 8000b74:	210d      	movs	r1, #13
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f000 f856 	bl	8000c28 <lcd_write_command>
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <Lcd_disable_cursor>:

void Lcd_no_blink(Lcd_HandleTypeDef * lcd){
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D | OPT_C);		// Lcd-on, cursor-on, no-blink
}

void Lcd_disable_cursor(Lcd_HandleTypeDef * lcd){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000b8c:	210c      	movs	r1, #12
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f000 f84a 	bl	8000c28 <lcd_write_command>
}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <Lcd_printf>:

/**
 * Printf() for lcd
 */
void Lcd_printf(Lcd_HandleTypeDef * lcd, char * format, ...) {
 8000b9c:	b40e      	push	{r1, r2, r3}
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b08d      	sub	sp, #52	; 0x34
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
	char buf[PRINTF_BUF];
	va_list ap;
	va_start(ap, format);
 8000ba6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000baa:	60fb      	str	r3, [r7, #12]
    vsnprintf(buf, sizeof(buf), format, ap);
 8000bac:	f107 0010 	add.w	r0, r7, #16
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000bb4:	2120      	movs	r1, #32
 8000bb6:	f003 fefb 	bl	80049b0 <vsniprintf>
    Lcd_string(lcd, buf);
 8000bba:	f107 0310 	add.w	r3, r7, #16
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f000 f807 	bl	8000bd4 <Lcd_string>
    va_end(ap);
}
 8000bc6:	bf00      	nop
 8000bc8:	3734      	adds	r7, #52	; 0x34
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bd0:	b003      	add	sp, #12
 8000bd2:	4770      	bx	lr

08000bd4 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, const char * string)
{
 8000bd4:	b590      	push	{r4, r7, lr}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000bde:	2300      	movs	r3, #0
 8000be0:	73fb      	strb	r3, [r7, #15]
 8000be2:	e00a      	b.n	8000bfa <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000be4:	7bfb      	ldrb	r3, [r7, #15]
 8000be6:	683a      	ldr	r2, [r7, #0]
 8000be8:	4413      	add	r3, r2
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	4619      	mov	r1, r3
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f000 f83d 	bl	8000c6e <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	73fb      	strb	r3, [r7, #15]
 8000bfa:	7bfc      	ldrb	r4, [r7, #15]
 8000bfc:	6838      	ldr	r0, [r7, #0]
 8000bfe:	f7ff fb07 	bl	8000210 <strlen>
 8000c02:	4603      	mov	r3, r0
 8000c04:	429c      	cmp	r4, r3
 8000c06:	d3ed      	bcc.n	8000be4 <Lcd_string+0x10>
	}
}
 8000c08:	bf00      	nop
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd90      	pop	{r4, r7, pc}

08000c10 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8000c18:	2101      	movs	r1, #1
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f000 f804 	bl	8000c28 <lcd_write_command>
}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	460b      	mov	r3, r1
 8000c32:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6898      	ldr	r0, [r3, #8]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	899b      	ldrh	r3, [r3, #12]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	4619      	mov	r1, r3
 8000c40:	f001 fcd7 	bl	80025f2 <HAL_GPIO_WritePin>

	lcd_write(lcd, (command >> 4), LCD_NIB);
 8000c44:	78fb      	ldrb	r3, [r7, #3]
 8000c46:	091b      	lsrs	r3, r3, #4
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	2204      	movs	r2, #4
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f000 f830 	bl	8000cb4 <lcd_write>
	lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000c54:	78fb      	ldrb	r3, [r7, #3]
 8000c56:	f003 030f 	and.w	r3, r3, #15
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	2204      	movs	r2, #4
 8000c5e:	4619      	mov	r1, r3
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f000 f827 	bl	8000cb4 <lcd_write>

}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
 8000c76:	460b      	mov	r3, r1
 8000c78:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6898      	ldr	r0, [r3, #8]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	899b      	ldrh	r3, [r3, #12]
 8000c82:	2201      	movs	r2, #1
 8000c84:	4619      	mov	r1, r3
 8000c86:	f001 fcb4 	bl	80025f2 <HAL_GPIO_WritePin>

	lcd_write(lcd, data >> 4, LCD_NIB);
 8000c8a:	78fb      	ldrb	r3, [r7, #3]
 8000c8c:	091b      	lsrs	r3, r3, #4
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	2204      	movs	r2, #4
 8000c92:	4619      	mov	r1, r3
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f000 f80d 	bl	8000cb4 <lcd_write>
	lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000c9a:	78fb      	ldrb	r3, [r7, #3]
 8000c9c:	f003 030f 	and.w	r3, r3, #15
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2204      	movs	r2, #4
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f000 f804 	bl	8000cb4 <lcd_write>

}
 8000cac:	bf00      	nop
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	70fb      	strb	r3, [r7, #3]
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	73fb      	strb	r3, [r7, #15]
 8000cc8:	e019      	b.n	8000cfe <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	4413      	add	r3, r2
 8000cd4:	6818      	ldr	r0, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	685a      	ldr	r2, [r3, #4]
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	4413      	add	r3, r2
 8000ce0:	8819      	ldrh	r1, [r3, #0]
 8000ce2:	78fa      	ldrb	r2, [r7, #3]
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
 8000ce6:	fa42 f303 	asr.w	r3, r2, r3
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	f001 fc7d 	bl	80025f2 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	73fb      	strb	r3, [r7, #15]
 8000cfe:	7bfa      	ldrb	r2, [r7, #15]
 8000d00:	78bb      	ldrb	r3, [r7, #2]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d3e1      	bcc.n	8000cca <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6918      	ldr	r0, [r3, #16]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	8a9b      	ldrh	r3, [r3, #20]
 8000d0e:	2201      	movs	r2, #1
 8000d10:	4619      	mov	r1, r3
 8000d12:	f001 fc6e 	bl	80025f2 <HAL_GPIO_WritePin>
	DELAY(1);
 8000d16:	2001      	movs	r0, #1
 8000d18:	f000 ff90 	bl	8001c3c <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6918      	ldr	r0, [r3, #16]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	8a9b      	ldrh	r3, [r3, #20]
 8000d24:	2200      	movs	r2, #0
 8000d26:	4619      	mov	r1, r3
 8000d28:	f001 fc63 	bl	80025f2 <HAL_GPIO_WritePin>
}
 8000d2c:	bf00      	nop
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d34:	b5b0      	push	{r4, r5, r7, lr}
 8000d36:	b0e6      	sub	sp, #408	; 0x198
 8000d38:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
  Lcd_PortType ports[] = {
 8000d3a:	4bc2      	ldr	r3, [pc, #776]	; (8001044 <main+0x310>)
 8000d3c:	f507 74b2 	add.w	r4, r7, #356	; 0x164
 8000d40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  GPIOA, GPIOB, GPIOB, GPIOB
  };

  Lcd_PinType pins[] = {LCD_DB4_Pin, LCD_DB5_Pin, LCD_DB6_Pin, LCD_DB7_Pin};
 8000d46:	4ac0      	ldr	r2, [pc, #768]	; (8001048 <main+0x314>)
 8000d48:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8000d4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d50:	e883 0003 	stmia.w	r3, {r0, r1}

  Lcd_HandleTypeDef lcd;
  lcd = Lcd_create(ports, pins, GPIOA, LCD_A0_Pin, GPIOA, LCD_E_Pin);
 8000d54:	4638      	mov	r0, r7
 8000d56:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 8000d5a:	f507 71b2 	add.w	r1, r7, #356	; 0x164
 8000d5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d62:	9302      	str	r3, [sp, #8]
 8000d64:	4bb9      	ldr	r3, [pc, #740]	; (800104c <main+0x318>)
 8000d66:	9301      	str	r3, [sp, #4]
 8000d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d6c:	9300      	str	r3, [sp, #0]
 8000d6e:	4bb7      	ldr	r3, [pc, #732]	; (800104c <main+0x318>)
 8000d70:	f7ff fe9f 	bl	8000ab2 <Lcd_create>
 8000d74:	463b      	mov	r3, r7
 8000d76:	f507 74a2 	add.w	r4, r7, #324	; 0x144
 8000d7a:	461d      	mov	r5, r3
 8000d7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d80:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d84:	e884 0003 	stmia.w	r4, {r0, r1}

  //menu variables
  const uint8_t page_count = _menu_count / 2 + _menu_count % 2;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
  uint8_t page = 1, menu = 1;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8000d94:	2301      	movs	r3, #1
 8000d96:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186

  //lora variables
  int ret = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

  int message = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  int message_length = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dac:	f000 feed 	bl	8001b8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000db0:	f000 f95c 	bl	800106c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000db4:	f000 fb6c 	bl	8001490 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000db8:	f000 f9ae 	bl	8001118 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000dbc:	f000 f9ea 	bl	8001194 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000dc0:	f000 fa1e 	bl	8001200 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000dc4:	f000 fb3a 	bl	800143c <MX_USART3_UART_Init>
  MX_TIM16_Init();
 8000dc8:	f000 fb12 	bl	80013f0 <MX_TIM16_Init>
  MX_TIM6_Init();
 8000dcc:	f000 fadc 	bl	8001388 <MX_TIM6_Init>
  MX_TIM4_Init();
 8000dd0:	f000 fa8c 	bl	80012ec <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  Lcd_init(&lcd);
 8000dd4:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fe8d 	bl	8000af8 <Lcd_init>
  Lcd_clear(&lcd);
 8000dde:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff ff14 	bl	8000c10 <Lcd_clear>
  Lcd_disable_cursor(&lcd);
 8000de8:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fec9 	bl	8000b84 <Lcd_disable_cursor>


  SX1278_hw_t SX1278_hw;
  SX1278_t SX1278;

  SX1278_hw.dio0.pin = LORA_DIO0_Pin;
 8000df2:	2308      	movs	r3, #8
 8000df4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  SX1278_hw.dio0.port = GPIOA;
 8000df8:	4b94      	ldr	r3, [pc, #592]	; (800104c <main+0x318>)
 8000dfa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  SX1278_hw.nss.pin = LORA_NSS_Pin;
 8000dfe:	2310      	movs	r3, #16
 8000e00:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  SX1278_hw.nss.port = GPIOA;
 8000e04:	4b91      	ldr	r3, [pc, #580]	; (800104c <main+0x318>)
 8000e06:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  SX1278_hw.reset.pin = LORA_RST_Pin;
 8000e0a:	2304      	movs	r3, #4
 8000e0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  SX1278_hw.reset.port = GPIOA;
 8000e10:	4b8e      	ldr	r3, [pc, #568]	; (800104c <main+0x318>)
 8000e12:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  SX1278_hw.spi = &hspi1;
 8000e16:	4b8e      	ldr	r3, [pc, #568]	; (8001050 <main+0x31c>)
 8000e18:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

  SX1278.hw = &SX1278_hw;
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8000e24:	601a      	str	r2, [r3, #0]

  SX1278_begin(&SX1278, SX1278_433MHZ, SX1278_POWER_17DBM, SX1278_LORA_SF_8,
 8000e26:	f107 001c 	add.w	r0, r7, #28
 8000e2a:	230a      	movs	r3, #10
 8000e2c:	9301      	str	r3, [sp, #4]
 8000e2e:	2303      	movs	r3, #3
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	2302      	movs	r3, #2
 8000e34:	2201      	movs	r2, #1
 8000e36:	2100      	movs	r1, #0
 8000e38:	f7ff fded 	bl	8000a16 <SX1278_begin>
  			SX1278_LORA_BW_20_8KHZ, 10);

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //for buzzer
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4885      	ldr	r0, [pc, #532]	; (8001054 <main+0x320>)
 8000e40:	f002 fd14 	bl	800386c <HAL_TIM_PWM_Start>

  Lcd_cursor(&lcd, 0, 0);
 8000e44:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fe73 	bl	8000b38 <Lcd_cursor>
  Lcd_printf(&lcd, "%s", "Lora project v1");
 8000e52:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000e56:	4a80      	ldr	r2, [pc, #512]	; (8001058 <main+0x324>)
 8000e58:	4980      	ldr	r1, [pc, #512]	; (800105c <main+0x328>)
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff fe9e 	bl	8000b9c <Lcd_printf>
  buzzer(600, 10);
 8000e60:	210a      	movs	r1, #10
 8000e62:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000e66:	f7ff fa19 	bl	800029c <buzzer>
  HAL_Delay(500);
 8000e6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e6e:	f000 fee5 	bl	8001c3c <HAL_Delay>
  buzzer(600, 0);
 8000e72:	2100      	movs	r1, #0
 8000e74:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000e78:	f7ff fa10 	bl	800029c <buzzer>
  Print_Menu(&lcd, page, menu);
 8000e7c:	f897 2186 	ldrb.w	r2, [r7, #390]	; 0x186
 8000e80:	f897 1187 	ldrb.w	r1, [r7, #391]	; 0x187
 8000e84:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f000 fb95 	bl	80015b8 <Print_Menu>

  Button_state buttons = NONE_Pressed;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  buttons = ReadButtons();
 8000e94:	f7ff f9ea 	bl	800026c <ReadButtons>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
	  if (buttons == LEFT_Pressed) {
 8000e9e:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d141      	bne.n	8000f2a <main+0x1f6>
		  buzzer(600, 4);
 8000ea6:	2104      	movs	r1, #4
 8000ea8:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000eac:	f7ff f9f6 	bl	800029c <buzzer>
		  HAL_Delay(20);
 8000eb0:	2014      	movs	r0, #20
 8000eb2:	f000 fec3 	bl	8001c3c <HAL_Delay>
		  buzzer(600, 0);
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000ebc:	f7ff f9ee 	bl	800029c <buzzer>
		  menu ++;
 8000ec0:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
		  if (menu > _menu_count) {
 8000eca:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 8000ece:	2b04      	cmp	r3, #4
 8000ed0:	d905      	bls.n	8000ede <main+0x1aa>
			  menu = 1;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
			  page = 1;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
		  }
		  if (page <  menu / 2 + menu % 2) {
 8000ede:	f897 2187 	ldrb.w	r2, [r7, #391]	; 0x187
 8000ee2:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 8000ee6:	085b      	lsrs	r3, r3, #1
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	4619      	mov	r1, r3
 8000eec:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 8000ef0:	f003 0301 	and.w	r3, r3, #1
 8000ef4:	440b      	add	r3, r1
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	da0d      	bge.n	8000f16 <main+0x1e2>
			  page ++;
 8000efa:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8000efe:	3301      	adds	r3, #1
 8000f00:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
			  if (page > page_count) page = 1;
 8000f04:	f897 2187 	ldrb.w	r2, [r7, #391]	; 0x187
 8000f08:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d902      	bls.n	8000f16 <main+0x1e2>
 8000f10:	2301      	movs	r3, #1
 8000f12:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
		  }
		  Print_Menu(&lcd, page, menu);
 8000f16:	f897 2186 	ldrb.w	r2, [r7, #390]	; 0x186
 8000f1a:	f897 1187 	ldrb.w	r1, [r7, #391]	; 0x187
 8000f1e:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 fb48 	bl	80015b8 <Print_Menu>
 8000f28:	e7b4      	b.n	8000e94 <main+0x160>
	  }
	  else if (buttons == RIGHT_Pressed) {
 8000f2a:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d1b0      	bne.n	8000e94 <main+0x160>
		  switch(menu) {
 8000f32:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d002      	beq.n	8000f40 <main+0x20c>
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d063      	beq.n	8001006 <main+0x2d2>
 8000f3e:	e080      	b.n	8001042 <main+0x30e>
		  	  case 1: {
		  		ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 8000f40:	f107 031c 	add.w	r3, r7, #28
 8000f44:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000f48:	2110      	movs	r1, #16
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff fcba 	bl	80008c4 <SX1278_LoRaEntryRx>
 8000f50:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
		  		while (1) { //infinity loop yes )
					Lcd_clear(&lcd);
 8000f54:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fe59 	bl	8000c10 <Lcd_clear>
					Lcd_cursor(&lcd, 0, 0);
 8000f5e:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000f62:	2200      	movs	r2, #0
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fde6 	bl	8000b38 <Lcd_cursor>

					ret = SX1278_LoRaRxPacket(&SX1278);
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fd0c 	bl	800098e <SX1278_LoRaRxPacket>
 8000f76:	4603      	mov	r3, r0
 8000f78:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
					Lcd_printf(&lcd, "Received: %d", ret);
 8000f7c:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000f80:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8000f84:	4936      	ldr	r1, [pc, #216]	; (8001060 <main+0x32c>)
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fe08 	bl	8000b9c <Lcd_printf>
					if (ret > 0) {
 8000f8c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	dd16      	ble.n	8000fc2 <main+0x28e>
						SX1278_read(&SX1278, (uint8_t*) buffer, ret);
 8000f94:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	f107 031c 	add.w	r3, r7, #28
 8000f9e:	4931      	ldr	r1, [pc, #196]	; (8001064 <main+0x330>)
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fd60 	bl	8000a66 <SX1278_read>
						Lcd_cursor(&lcd, 1, 0);
 8000fa6:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000faa:	2200      	movs	r2, #0
 8000fac:	2101      	movs	r1, #1
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fdc2 	bl	8000b38 <Lcd_cursor>
						Lcd_printf(&lcd, "%s", buffer);
 8000fb4:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000fb8:	4a2a      	ldr	r2, [pc, #168]	; (8001064 <main+0x330>)
 8000fba:	4928      	ldr	r1, [pc, #160]	; (800105c <main+0x328>)
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fded 	bl	8000b9c <Lcd_printf>
					}
					if (ReadButtons() == BOTH_Pressed)  {
 8000fc2:	f7ff f953 	bl	800026c <ReadButtons>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b03      	cmp	r3, #3
 8000fca:	d117      	bne.n	8000ffc <main+0x2c8>
						buzzer(600, 4);
 8000fcc:	2104      	movs	r1, #4
 8000fce:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000fd2:	f7ff f963 	bl	800029c <buzzer>
						HAL_Delay(100);
 8000fd6:	2064      	movs	r0, #100	; 0x64
 8000fd8:	f000 fe30 	bl	8001c3c <HAL_Delay>
						buzzer(600, 0);
 8000fdc:	2100      	movs	r1, #0
 8000fde:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000fe2:	f7ff f95b 	bl	800029c <buzzer>
						Print_Menu(&lcd, page, menu);
 8000fe6:	f897 2186 	ldrb.w	r2, [r7, #390]	; 0x186
 8000fea:	f897 1187 	ldrb.w	r1, [r7, #391]	; 0x187
 8000fee:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 fae0 	bl	80015b8 <Print_Menu>
						break;
 8000ff8:	bf00      	nop
					}
					HAL_Delay(500);
		  		}
		  	  }
		  	break;
 8000ffa:	e022      	b.n	8001042 <main+0x30e>
					HAL_Delay(500);
 8000ffc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001000:	f000 fe1c 	bl	8001c3c <HAL_Delay>
					Lcd_clear(&lcd);
 8001004:	e7a6      	b.n	8000f54 <main+0x220>
		  	  case 2: {
				  Lcd_clear(&lcd);
 8001006:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fe00 	bl	8000c10 <Lcd_clear>
				  Lcd_cursor(&lcd, 0, 0);
 8001010:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8001014:	2200      	movs	r2, #0
 8001016:	2100      	movs	r1, #0
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fd8d 	bl	8000b38 <Lcd_cursor>
				  uint8_t test = SX1278_SPIRead(&SX1278, 0x42);
 800101e:	f107 031c 	add.w	r3, r7, #28
 8001022:	2142      	movs	r1, #66	; 0x42
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fa98 	bl	800055a <SX1278_SPIRead>
 800102a:	4603      	mov	r3, r0
 800102c:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
				  Lcd_printf(&lcd, "Test reg: %d", test);
 8001030:	f897 2176 	ldrb.w	r2, [r7, #374]	; 0x176
 8001034:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8001038:	490b      	ldr	r1, [pc, #44]	; (8001068 <main+0x334>)
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fdae 	bl	8000b9c <Lcd_printf>
		  	  }
			break;
 8001040:	bf00      	nop
	  buttons = ReadButtons();
 8001042:	e727      	b.n	8000e94 <main+0x160>
 8001044:	0800520c 	.word	0x0800520c
 8001048:	0800521c 	.word	0x0800521c
 800104c:	40010800 	.word	0x40010800
 8001050:	2000041c 	.word	0x2000041c
 8001054:	20000128 	.word	0x20000128
 8001058:	080051d8 	.word	0x080051d8
 800105c:	080051e8 	.word	0x080051e8
 8001060:	080051ec 	.word	0x080051ec
 8001064:	2000021c 	.word	0x2000021c
 8001068:	080051fc 	.word	0x080051fc

0800106c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b092      	sub	sp, #72	; 0x48
 8001070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001072:	f107 0320 	add.w	r3, r7, #32
 8001076:	2228      	movs	r2, #40	; 0x28
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f003 fc63 	bl	8004946 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001090:	463b      	mov	r3, r7
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800109a:	2301      	movs	r3, #1
 800109c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800109e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a8:	2302      	movs	r3, #2
 80010aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80010b2:	2300      	movs	r3, #0
 80010b4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b6:	f107 0320 	add.w	r3, r7, #32
 80010ba:	4618      	mov	r0, r3
 80010bc:	f001 fad4 	bl	8002668 <HAL_RCC_OscConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80010c6:	f000 fab7 	bl	8001638 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ca:	230f      	movs	r3, #15
 80010cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ce:	2302      	movs	r3, #2
 80010d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	2100      	movs	r1, #0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f001 fd3f 	bl	8002b68 <HAL_RCC_ClockConfig>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80010f0:	f000 faa2 	bl	8001638 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010f4:	2302      	movs	r3, #2
 80010f6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010fc:	463b      	mov	r3, r7
 80010fe:	4618      	mov	r0, r3
 8001100:	f001 fe9e 	bl	8002e40 <HAL_RCCEx_PeriphCLKConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800110a:	f000 fa95 	bl	8001638 <Error_Handler>
  }
}
 800110e:	bf00      	nop
 8001110:	3748      	adds	r7, #72	; 0x48
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001128:	4b18      	ldr	r3, [pc, #96]	; (800118c <MX_ADC1_Init+0x74>)
 800112a:	4a19      	ldr	r2, [pc, #100]	; (8001190 <MX_ADC1_Init+0x78>)
 800112c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800112e:	4b17      	ldr	r3, [pc, #92]	; (800118c <MX_ADC1_Init+0x74>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001134:	4b15      	ldr	r3, [pc, #84]	; (800118c <MX_ADC1_Init+0x74>)
 8001136:	2200      	movs	r2, #0
 8001138:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800113a:	4b14      	ldr	r3, [pc, #80]	; (800118c <MX_ADC1_Init+0x74>)
 800113c:	2200      	movs	r2, #0
 800113e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <MX_ADC1_Init+0x74>)
 8001142:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001146:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001148:	4b10      	ldr	r3, [pc, #64]	; (800118c <MX_ADC1_Init+0x74>)
 800114a:	2200      	movs	r2, #0
 800114c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800114e:	4b0f      	ldr	r3, [pc, #60]	; (800118c <MX_ADC1_Init+0x74>)
 8001150:	2201      	movs	r2, #1
 8001152:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001154:	480d      	ldr	r0, [pc, #52]	; (800118c <MX_ADC1_Init+0x74>)
 8001156:	f000 fd93 	bl	8001c80 <HAL_ADC_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001160:	f000 fa6a 	bl	8001638 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001164:	2301      	movs	r3, #1
 8001166:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001168:	2301      	movs	r3, #1
 800116a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	4619      	mov	r1, r3
 8001174:	4805      	ldr	r0, [pc, #20]	; (800118c <MX_ADC1_Init+0x74>)
 8001176:	f000 fe5b 	bl	8001e30 <HAL_ADC_ConfigChannel>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001180:	f000 fa5a 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001184:	bf00      	nop
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	200001ec 	.word	0x200001ec
 8001190:	40012400 	.word	0x40012400

08001194 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001198:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <MX_SPI1_Init+0x64>)
 800119a:	4a18      	ldr	r2, [pc, #96]	; (80011fc <MX_SPI1_Init+0x68>)
 800119c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800119e:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011a6:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011b2:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011cc:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011d8:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011da:	2200      	movs	r2, #0
 80011dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011e0:	220a      	movs	r2, #10
 80011e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011e4:	4804      	ldr	r0, [pc, #16]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011e6:	f001 fed1 	bl	8002f8c <HAL_SPI_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011f0:	f000 fa22 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	2000041c 	.word	0x2000041c
 80011fc:	40013000 	.word	0x40013000

08001200 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08e      	sub	sp, #56	; 0x38
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001206:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001214:	f107 0320 	add.w	r3, r7, #32
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
 800122c:	615a      	str	r2, [r3, #20]
 800122e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001230:	4b2d      	ldr	r3, [pc, #180]	; (80012e8 <MX_TIM2_Init+0xe8>)
 8001232:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001236:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000;
 8001238:	4b2b      	ldr	r3, [pc, #172]	; (80012e8 <MX_TIM2_Init+0xe8>)
 800123a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800123e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001240:	4b29      	ldr	r3, [pc, #164]	; (80012e8 <MX_TIM2_Init+0xe8>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19;
 8001246:	4b28      	ldr	r3, [pc, #160]	; (80012e8 <MX_TIM2_Init+0xe8>)
 8001248:	2213      	movs	r2, #19
 800124a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124c:	4b26      	ldr	r3, [pc, #152]	; (80012e8 <MX_TIM2_Init+0xe8>)
 800124e:	2200      	movs	r2, #0
 8001250:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001252:	4b25      	ldr	r3, [pc, #148]	; (80012e8 <MX_TIM2_Init+0xe8>)
 8001254:	2280      	movs	r2, #128	; 0x80
 8001256:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001258:	4823      	ldr	r0, [pc, #140]	; (80012e8 <MX_TIM2_Init+0xe8>)
 800125a:	f002 fa5b 	bl	8003714 <HAL_TIM_Base_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001264:	f000 f9e8 	bl	8001638 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001268:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800126c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800126e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001272:	4619      	mov	r1, r3
 8001274:	481c      	ldr	r0, [pc, #112]	; (80012e8 <MX_TIM2_Init+0xe8>)
 8001276:	f002 fd13 	bl	8003ca0 <HAL_TIM_ConfigClockSource>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001280:	f000 f9da 	bl	8001638 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001284:	4818      	ldr	r0, [pc, #96]	; (80012e8 <MX_TIM2_Init+0xe8>)
 8001286:	f002 fabd 	bl	8003804 <HAL_TIM_PWM_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001290:	f000 f9d2 	bl	8001638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001294:	2300      	movs	r3, #0
 8001296:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800129c:	f107 0320 	add.w	r3, r7, #32
 80012a0:	4619      	mov	r1, r3
 80012a2:	4811      	ldr	r0, [pc, #68]	; (80012e8 <MX_TIM2_Init+0xe8>)
 80012a4:	f003 f8ee 	bl	8004484 <HAL_TIMEx_MasterConfigSynchronization>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80012ae:	f000 f9c3 	bl	8001638 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012b2:	2360      	movs	r3, #96	; 0x60
 80012b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	2200      	movs	r2, #0
 80012c6:	4619      	mov	r1, r3
 80012c8:	4807      	ldr	r0, [pc, #28]	; (80012e8 <MX_TIM2_Init+0xe8>)
 80012ca:	f002 fc23 	bl	8003b14 <HAL_TIM_PWM_ConfigChannel>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80012d4:	f000 f9b0 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012d8:	4803      	ldr	r0, [pc, #12]	; (80012e8 <MX_TIM2_Init+0xe8>)
 80012da:	f000 fadb 	bl	8001894 <HAL_TIM_MspPostInit>

}
 80012de:	bf00      	nop
 80012e0:	3738      	adds	r7, #56	; 0x38
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000128 	.word	0x20000128

080012ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f2:	f107 0308 	add.w	r3, r7, #8
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001300:	463b      	mov	r3, r7
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001308:	4b1d      	ldr	r3, [pc, #116]	; (8001380 <MX_TIM4_Init+0x94>)
 800130a:	4a1e      	ldr	r2, [pc, #120]	; (8001384 <MX_TIM4_Init+0x98>)
 800130c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15999;
 800130e:	4b1c      	ldr	r3, [pc, #112]	; (8001380 <MX_TIM4_Init+0x94>)
 8001310:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001314:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001316:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <MX_TIM4_Init+0x94>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 800131c:	4b18      	ldr	r3, [pc, #96]	; (8001380 <MX_TIM4_Init+0x94>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001322:	4b17      	ldr	r3, [pc, #92]	; (8001380 <MX_TIM4_Init+0x94>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001328:	4b15      	ldr	r3, [pc, #84]	; (8001380 <MX_TIM4_Init+0x94>)
 800132a:	2200      	movs	r2, #0
 800132c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800132e:	4814      	ldr	r0, [pc, #80]	; (8001380 <MX_TIM4_Init+0x94>)
 8001330:	f002 f9f0 	bl	8003714 <HAL_TIM_Base_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800133a:	f000 f97d 	bl	8001638 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800133e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001342:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001344:	f107 0308 	add.w	r3, r7, #8
 8001348:	4619      	mov	r1, r3
 800134a:	480d      	ldr	r0, [pc, #52]	; (8001380 <MX_TIM4_Init+0x94>)
 800134c:	f002 fca8 	bl	8003ca0 <HAL_TIM_ConfigClockSource>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001356:	f000 f96f 	bl	8001638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135a:	2300      	movs	r3, #0
 800135c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001362:	463b      	mov	r3, r7
 8001364:	4619      	mov	r1, r3
 8001366:	4806      	ldr	r0, [pc, #24]	; (8001380 <MX_TIM4_Init+0x94>)
 8001368:	f003 f88c 	bl	8004484 <HAL_TIMEx_MasterConfigSynchronization>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001372:	f000 f961 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001376:	bf00      	nop
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200000a8 	.word	0x200000a8
 8001384:	40000800 	.word	0x40000800

08001388 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800138e:	463b      	mov	r3, r7
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001396:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <MX_TIM6_Init+0x60>)
 8001398:	4a14      	ldr	r2, [pc, #80]	; (80013ec <MX_TIM6_Init+0x64>)
 800139a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <MX_TIM6_Init+0x60>)
 800139e:	2200      	movs	r2, #0
 80013a0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <MX_TIM6_Init+0x60>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0;
 80013a8:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <MX_TIM6_Init+0x60>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <MX_TIM6_Init+0x60>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80013b4:	480c      	ldr	r0, [pc, #48]	; (80013e8 <MX_TIM6_Init+0x60>)
 80013b6:	f002 f9ad 	bl	8003714 <HAL_TIM_Base_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 80013c0:	f000 f93a 	bl	8001638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c4:	2300      	movs	r3, #0
 80013c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80013cc:	463b      	mov	r3, r7
 80013ce:	4619      	mov	r1, r3
 80013d0:	4805      	ldr	r0, [pc, #20]	; (80013e8 <MX_TIM6_Init+0x60>)
 80013d2:	f003 f857 	bl	8004484 <HAL_TIMEx_MasterConfigSynchronization>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 80013dc:	f000 f92c 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	200000e8 	.word	0x200000e8
 80013ec:	40001000 	.word	0x40001000

080013f0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <MX_TIM16_Init+0x44>)
 80013f6:	4a10      	ldr	r2, [pc, #64]	; (8001438 <MX_TIM16_Init+0x48>)
 80013f8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 15999;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <MX_TIM16_Init+0x44>)
 80013fc:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001400:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001402:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <MX_TIM16_Init+0x44>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 19;
 8001408:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <MX_TIM16_Init+0x44>)
 800140a:	2213      	movs	r2, #19
 800140c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <MX_TIM16_Init+0x44>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001414:	4b07      	ldr	r3, [pc, #28]	; (8001434 <MX_TIM16_Init+0x44>)
 8001416:	2200      	movs	r2, #0
 8001418:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <MX_TIM16_Init+0x44>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001420:	4804      	ldr	r0, [pc, #16]	; (8001434 <MX_TIM16_Init+0x44>)
 8001422:	f002 f977 	bl	8003714 <HAL_TIM_Base_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800142c:	f000 f904 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000168 	.word	0x20000168
 8001438:	40014400 	.word	0x40014400

0800143c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001440:	4b11      	ldr	r3, [pc, #68]	; (8001488 <MX_USART3_UART_Init+0x4c>)
 8001442:	4a12      	ldr	r2, [pc, #72]	; (800148c <MX_USART3_UART_Init+0x50>)
 8001444:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <MX_USART3_UART_Init+0x4c>)
 8001448:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800144c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <MX_USART3_UART_Init+0x4c>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <MX_USART3_UART_Init+0x4c>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800145a:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <MX_USART3_UART_Init+0x4c>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001460:	4b09      	ldr	r3, [pc, #36]	; (8001488 <MX_USART3_UART_Init+0x4c>)
 8001462:	220c      	movs	r2, #12
 8001464:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001466:	4b08      	ldr	r3, [pc, #32]	; (8001488 <MX_USART3_UART_Init+0x4c>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <MX_USART3_UART_Init+0x4c>)
 800146e:	2200      	movs	r2, #0
 8001470:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001472:	4805      	ldr	r0, [pc, #20]	; (8001488 <MX_USART3_UART_Init+0x4c>)
 8001474:	f003 f85c 	bl	8004530 <HAL_UART_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800147e:	f000 f8db 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200001ac 	.word	0x200001ac
 800148c:	40004800 	.word	0x40004800

08001490 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001496:	f107 0310 	add.w	r3, r7, #16
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a4:	4b3f      	ldr	r3, [pc, #252]	; (80015a4 <MX_GPIO_Init+0x114>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	4a3e      	ldr	r2, [pc, #248]	; (80015a4 <MX_GPIO_Init+0x114>)
 80014aa:	f043 0310 	orr.w	r3, r3, #16
 80014ae:	6193      	str	r3, [r2, #24]
 80014b0:	4b3c      	ldr	r3, [pc, #240]	; (80015a4 <MX_GPIO_Init+0x114>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	f003 0310 	and.w	r3, r3, #16
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014bc:	4b39      	ldr	r3, [pc, #228]	; (80015a4 <MX_GPIO_Init+0x114>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	4a38      	ldr	r2, [pc, #224]	; (80015a4 <MX_GPIO_Init+0x114>)
 80014c2:	f043 0320 	orr.w	r3, r3, #32
 80014c6:	6193      	str	r3, [r2, #24]
 80014c8:	4b36      	ldr	r3, [pc, #216]	; (80015a4 <MX_GPIO_Init+0x114>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	f003 0320 	and.w	r3, r3, #32
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d4:	4b33      	ldr	r3, [pc, #204]	; (80015a4 <MX_GPIO_Init+0x114>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	4a32      	ldr	r2, [pc, #200]	; (80015a4 <MX_GPIO_Init+0x114>)
 80014da:	f043 0304 	orr.w	r3, r3, #4
 80014de:	6193      	str	r3, [r2, #24]
 80014e0:	4b30      	ldr	r3, [pc, #192]	; (80015a4 <MX_GPIO_Init+0x114>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ec:	4b2d      	ldr	r3, [pc, #180]	; (80015a4 <MX_GPIO_Init+0x114>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	4a2c      	ldr	r2, [pc, #176]	; (80015a4 <MX_GPIO_Init+0x114>)
 80014f2:	f043 0308 	orr.w	r3, r3, #8
 80014f6:	6193      	str	r3, [r2, #24]
 80014f8:	4b2a      	ldr	r3, [pc, #168]	; (80015a4 <MX_GPIO_Init+0x114>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	f003 0308 	and.w	r3, r3, #8
 8001500:	603b      	str	r3, [r7, #0]
 8001502:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LORA_RST_Pin|LORA_DIO0_Pin|LORA_NSS_Pin|LCD_DB4_Pin
 8001504:	2200      	movs	r2, #0
 8001506:	f240 711c 	movw	r1, #1820	; 0x71c
 800150a:	4827      	ldr	r0, [pc, #156]	; (80015a8 <MX_GPIO_Init+0x118>)
 800150c:	f001 f871 	bl	80025f2 <HAL_GPIO_WritePin>
                          |LCD_E_Pin|LCD_A0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay_Pin|HL4_Pin|HL3_Pin|BL_E_Pin
 8001510:	2200      	movs	r2, #0
 8001512:	f24f 2107 	movw	r1, #61959	; 0xf207
 8001516:	4825      	ldr	r0, [pc, #148]	; (80015ac <MX_GPIO_Init+0x11c>)
 8001518:	f001 f86b 	bl	80025f2 <HAL_GPIO_WritePin>
                          |LCD_DB7_Pin|LCD_DB6_Pin|LCD_DB5_Pin|PB6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : but_1_Pin but_2_Pin */
  GPIO_InitStruct.Pin = but_1_Pin|but_2_Pin;
 800151c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001520:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001522:	4b23      	ldr	r3, [pc, #140]	; (80015b0 <MX_GPIO_Init+0x120>)
 8001524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800152a:	f107 0310 	add.w	r3, r7, #16
 800152e:	4619      	mov	r1, r3
 8001530:	4820      	ldr	r0, [pc, #128]	; (80015b4 <MX_GPIO_Init+0x124>)
 8001532:	f000 feed 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_RST_Pin LORA_DIO0_Pin LORA_NSS_Pin LCD_DB4_Pin
                           LCD_E_Pin LCD_A0_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|LORA_DIO0_Pin|LORA_NSS_Pin|LCD_DB4_Pin
 8001536:	f240 731c 	movw	r3, #1820	; 0x71c
 800153a:	613b      	str	r3, [r7, #16]
                          |LCD_E_Pin|LCD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153c:	2301      	movs	r3, #1
 800153e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001544:	2302      	movs	r3, #2
 8001546:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001548:	f107 0310 	add.w	r3, r7, #16
 800154c:	4619      	mov	r1, r3
 800154e:	4816      	ldr	r0, [pc, #88]	; (80015a8 <MX_GPIO_Init+0x118>)
 8001550:	f000 fede 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay_Pin HL4_Pin HL3_Pin BL_E_Pin
                           LCD_DB7_Pin LCD_DB6_Pin LCD_DB5_Pin PB6_Pin */
  GPIO_InitStruct.Pin = Relay_Pin|HL4_Pin|HL3_Pin|BL_E_Pin
 8001554:	f24f 2307 	movw	r3, #61959	; 0xf207
 8001558:	613b      	str	r3, [r7, #16]
                          |LCD_DB7_Pin|LCD_DB6_Pin|LCD_DB5_Pin|PB6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155a:	2301      	movs	r3, #1
 800155c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	2302      	movs	r3, #2
 8001564:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001566:	f107 0310 	add.w	r3, r7, #16
 800156a:	4619      	mov	r1, r3
 800156c:	480f      	ldr	r0, [pc, #60]	; (80015ac <MX_GPIO_Init+0x11c>)
 800156e:	f000 fecf 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12_Pin PA11_Pin PB5_Pin PB8_Pin
                           PB7_Pin */
  GPIO_InitStruct.Pin = PA12_Pin|PA11_Pin|PB5_Pin|PB8_Pin
 8001572:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8001576:	613b      	str	r3, [r7, #16]
                          |PB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001580:	f107 0310 	add.w	r3, r7, #16
 8001584:	4619      	mov	r1, r3
 8001586:	4809      	ldr	r0, [pc, #36]	; (80015ac <MX_GPIO_Init+0x11c>)
 8001588:	f000 fec2 	bl	8002310 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800158c:	2200      	movs	r2, #0
 800158e:	2100      	movs	r1, #0
 8001590:	2028      	movs	r0, #40	; 0x28
 8001592:	f000 fe78 	bl	8002286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001596:	2028      	movs	r0, #40	; 0x28
 8001598:	f000 fe91 	bl	80022be <HAL_NVIC_EnableIRQ>

}
 800159c:	bf00      	nop
 800159e:	3720      	adds	r7, #32
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40010800 	.word	0x40010800
 80015ac:	40010c00 	.word	0x40010c00
 80015b0:	10110000 	.word	0x10110000
 80015b4:	40011000 	.word	0x40011000

080015b8 <Print_Menu>:

/* USER CODE BEGIN 4 */
void Print_Menu(Lcd_HandleTypeDef * lcd, uint8_t page, uint8_t menu) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	70fb      	strb	r3, [r7, #3]
 80015c4:	4613      	mov	r3, r2
 80015c6:	70bb      	strb	r3, [r7, #2]
	Lcd_clear(lcd);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff fb21 	bl	8000c10 <Lcd_clear>
	Lcd_cursor(lcd, 0, 0);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2100      	movs	r1, #0
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff fab0 	bl	8000b38 <Lcd_cursor>
	Lcd_string(lcd, menu_str[2 * page - 2]);
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	3b01      	subs	r3, #1
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	4a15      	ldr	r2, [pc, #84]	; (8001634 <Print_Menu+0x7c>)
 80015e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e4:	4619      	mov	r1, r3
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff faf4 	bl	8000bd4 <Lcd_string>
    Lcd_cursor(lcd, 1, 0);
 80015ec:	2200      	movs	r2, #0
 80015ee:	2101      	movs	r1, #1
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff faa1 	bl	8000b38 <Lcd_cursor>
    Lcd_string(lcd, menu_str[2 * page - 1]);
 80015f6:	78fb      	ldrb	r3, [r7, #3]
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	3b01      	subs	r3, #1
 80015fc:	4a0d      	ldr	r2, [pc, #52]	; (8001634 <Print_Menu+0x7c>)
 80015fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001602:	4619      	mov	r1, r3
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff fae5 	bl	8000bd4 <Lcd_string>
    Lcd_cursor(lcd, (menu - 1) % 2, 15);
 800160a:	78bb      	ldrb	r3, [r7, #2]
 800160c:	3b01      	subs	r3, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	bfb8      	it	lt
 8001616:	425b      	neglt	r3, r3
 8001618:	b2db      	uxtb	r3, r3
 800161a:	220f      	movs	r2, #15
 800161c:	4619      	mov	r1, r3
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff fa8a 	bl	8000b38 <Lcd_cursor>
    Lcd_blink(lcd);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff faa1 	bl	8000b6c <Lcd_blink>
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000000 	.word	0x20000000

08001638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr

08001644 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <HAL_MspInit+0x5c>)
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	4a14      	ldr	r2, [pc, #80]	; (80016a0 <HAL_MspInit+0x5c>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	6193      	str	r3, [r2, #24]
 8001656:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <HAL_MspInit+0x5c>)
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001662:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <HAL_MspInit+0x5c>)
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	4a0e      	ldr	r2, [pc, #56]	; (80016a0 <HAL_MspInit+0x5c>)
 8001668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800166c:	61d3      	str	r3, [r2, #28]
 800166e:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <HAL_MspInit+0x5c>)
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800167a:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <HAL_MspInit+0x60>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	4a04      	ldr	r2, [pc, #16]	; (80016a4 <HAL_MspInit+0x60>)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001696:	bf00      	nop
 8001698:	3714      	adds	r7, #20
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40010000 	.word	0x40010000

080016a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b088      	sub	sp, #32
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 0310 	add.w	r3, r7, #16
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a14      	ldr	r2, [pc, #80]	; (8001714 <HAL_ADC_MspInit+0x6c>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d121      	bne.n	800170c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016c8:	4b13      	ldr	r3, [pc, #76]	; (8001718 <HAL_ADC_MspInit+0x70>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	4a12      	ldr	r2, [pc, #72]	; (8001718 <HAL_ADC_MspInit+0x70>)
 80016ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016d2:	6193      	str	r3, [r2, #24]
 80016d4:	4b10      	ldr	r3, [pc, #64]	; (8001718 <HAL_ADC_MspInit+0x70>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e0:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <HAL_ADC_MspInit+0x70>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	4a0c      	ldr	r2, [pc, #48]	; (8001718 <HAL_ADC_MspInit+0x70>)
 80016e6:	f043 0304 	orr.w	r3, r3, #4
 80016ea:	6193      	str	r3, [r2, #24]
 80016ec:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <HAL_ADC_MspInit+0x70>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = TEMP_Pin|Cell_Voltage_Pin;
 80016f8:	2303      	movs	r3, #3
 80016fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016fc:	2303      	movs	r3, #3
 80016fe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001700:	f107 0310 	add.w	r3, r7, #16
 8001704:	4619      	mov	r1, r3
 8001706:	4805      	ldr	r0, [pc, #20]	; (800171c <HAL_ADC_MspInit+0x74>)
 8001708:	f000 fe02 	bl	8002310 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800170c:	bf00      	nop
 800170e:	3720      	adds	r7, #32
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40012400 	.word	0x40012400
 8001718:	40021000 	.word	0x40021000
 800171c:	40010800 	.word	0x40010800

08001720 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b088      	sub	sp, #32
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 0310 	add.w	r3, r7, #16
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a1b      	ldr	r2, [pc, #108]	; (80017a8 <HAL_SPI_MspInit+0x88>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d12f      	bne.n	80017a0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001740:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <HAL_SPI_MspInit+0x8c>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	4a19      	ldr	r2, [pc, #100]	; (80017ac <HAL_SPI_MspInit+0x8c>)
 8001746:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800174a:	6193      	str	r3, [r2, #24]
 800174c:	4b17      	ldr	r3, [pc, #92]	; (80017ac <HAL_SPI_MspInit+0x8c>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001758:	4b14      	ldr	r3, [pc, #80]	; (80017ac <HAL_SPI_MspInit+0x8c>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	4a13      	ldr	r2, [pc, #76]	; (80017ac <HAL_SPI_MspInit+0x8c>)
 800175e:	f043 0304 	orr.w	r3, r3, #4
 8001762:	6193      	str	r3, [r2, #24]
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <HAL_SPI_MspInit+0x8c>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001770:	23a0      	movs	r3, #160	; 0xa0
 8001772:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001774:	2302      	movs	r3, #2
 8001776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001778:	2303      	movs	r3, #3
 800177a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177c:	f107 0310 	add.w	r3, r7, #16
 8001780:	4619      	mov	r1, r3
 8001782:	480b      	ldr	r0, [pc, #44]	; (80017b0 <HAL_SPI_MspInit+0x90>)
 8001784:	f000 fdc4 	bl	8002310 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001788:	2340      	movs	r3, #64	; 0x40
 800178a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001794:	f107 0310 	add.w	r3, r7, #16
 8001798:	4619      	mov	r1, r3
 800179a:	4805      	ldr	r0, [pc, #20]	; (80017b0 <HAL_SPI_MspInit+0x90>)
 800179c:	f000 fdb8 	bl	8002310 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017a0:	bf00      	nop
 80017a2:	3720      	adds	r7, #32
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40013000 	.word	0x40013000
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40010800 	.word	0x40010800

080017b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017c4:	d114      	bne.n	80017f0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017c6:	4b2f      	ldr	r3, [pc, #188]	; (8001884 <HAL_TIM_Base_MspInit+0xd0>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	4a2e      	ldr	r2, [pc, #184]	; (8001884 <HAL_TIM_Base_MspInit+0xd0>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	61d3      	str	r3, [r2, #28]
 80017d2:	4b2c      	ldr	r3, [pc, #176]	; (8001884 <HAL_TIM_Base_MspInit+0xd0>)
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017de:	2200      	movs	r2, #0
 80017e0:	2100      	movs	r1, #0
 80017e2:	201c      	movs	r0, #28
 80017e4:	f000 fd4f 	bl	8002286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017e8:	201c      	movs	r0, #28
 80017ea:	f000 fd68 	bl	80022be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80017ee:	e044      	b.n	800187a <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a24      	ldr	r2, [pc, #144]	; (8001888 <HAL_TIM_Base_MspInit+0xd4>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d114      	bne.n	8001824 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017fa:	4b22      	ldr	r3, [pc, #136]	; (8001884 <HAL_TIM_Base_MspInit+0xd0>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	4a21      	ldr	r2, [pc, #132]	; (8001884 <HAL_TIM_Base_MspInit+0xd0>)
 8001800:	f043 0304 	orr.w	r3, r3, #4
 8001804:	61d3      	str	r3, [r2, #28]
 8001806:	4b1f      	ldr	r3, [pc, #124]	; (8001884 <HAL_TIM_Base_MspInit+0xd0>)
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2100      	movs	r1, #0
 8001816:	201e      	movs	r0, #30
 8001818:	f000 fd35 	bl	8002286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800181c:	201e      	movs	r0, #30
 800181e:	f000 fd4e 	bl	80022be <HAL_NVIC_EnableIRQ>
}
 8001822:	e02a      	b.n	800187a <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM6)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a18      	ldr	r2, [pc, #96]	; (800188c <HAL_TIM_Base_MspInit+0xd8>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d10c      	bne.n	8001848 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800182e:	4b15      	ldr	r3, [pc, #84]	; (8001884 <HAL_TIM_Base_MspInit+0xd0>)
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	4a14      	ldr	r2, [pc, #80]	; (8001884 <HAL_TIM_Base_MspInit+0xd0>)
 8001834:	f043 0310 	orr.w	r3, r3, #16
 8001838:	61d3      	str	r3, [r2, #28]
 800183a:	4b12      	ldr	r3, [pc, #72]	; (8001884 <HAL_TIM_Base_MspInit+0xd0>)
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	f003 0310 	and.w	r3, r3, #16
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
}
 8001846:	e018      	b.n	800187a <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM16)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a10      	ldr	r2, [pc, #64]	; (8001890 <HAL_TIM_Base_MspInit+0xdc>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d113      	bne.n	800187a <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001852:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <HAL_TIM_Base_MspInit+0xd0>)
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	4a0b      	ldr	r2, [pc, #44]	; (8001884 <HAL_TIM_Base_MspInit+0xd0>)
 8001858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800185c:	6193      	str	r3, [r2, #24]
 800185e:	4b09      	ldr	r3, [pc, #36]	; (8001884 <HAL_TIM_Base_MspInit+0xd0>)
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	2100      	movs	r1, #0
 800186e:	2019      	movs	r0, #25
 8001870:	f000 fd09 	bl	8002286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001874:	2019      	movs	r0, #25
 8001876:	f000 fd22 	bl	80022be <HAL_NVIC_EnableIRQ>
}
 800187a:	bf00      	nop
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40021000 	.word	0x40021000
 8001888:	40000800 	.word	0x40000800
 800188c:	40001000 	.word	0x40001000
 8001890:	40014400 	.word	0x40014400

08001894 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b088      	sub	sp, #32
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 030c 	add.w	r3, r7, #12
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018b2:	d12a      	bne.n	800190a <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b4:	4b17      	ldr	r3, [pc, #92]	; (8001914 <HAL_TIM_MspPostInit+0x80>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	4a16      	ldr	r2, [pc, #88]	; (8001914 <HAL_TIM_MspPostInit+0x80>)
 80018ba:	f043 0304 	orr.w	r3, r3, #4
 80018be:	6193      	str	r3, [r2, #24]
 80018c0:	4b14      	ldr	r3, [pc, #80]	; (8001914 <HAL_TIM_MspPostInit+0x80>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d2:	2302      	movs	r3, #2
 80018d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d6:	2302      	movs	r3, #2
 80018d8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018da:	f107 030c 	add.w	r3, r7, #12
 80018de:	4619      	mov	r1, r3
 80018e0:	480d      	ldr	r0, [pc, #52]	; (8001918 <HAL_TIM_MspPostInit+0x84>)
 80018e2:	f000 fd15 	bl	8002310 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80018e6:	4b0d      	ldr	r3, [pc, #52]	; (800191c <HAL_TIM_MspPostInit+0x88>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	61fb      	str	r3, [r7, #28]
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018f2:	61fb      	str	r3, [r7, #28]
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80018fa:	61fb      	str	r3, [r7, #28]
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001902:	61fb      	str	r3, [r7, #28]
 8001904:	4a05      	ldr	r2, [pc, #20]	; (800191c <HAL_TIM_MspPostInit+0x88>)
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800190a:	bf00      	nop
 800190c:	3720      	adds	r7, #32
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40021000 	.word	0x40021000
 8001918:	40010800 	.word	0x40010800
 800191c:	40010000 	.word	0x40010000

08001920 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 0310 	add.w	r3, r7, #16
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a1c      	ldr	r2, [pc, #112]	; (80019ac <HAL_UART_MspInit+0x8c>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d131      	bne.n	80019a4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001940:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <HAL_UART_MspInit+0x90>)
 8001942:	69db      	ldr	r3, [r3, #28]
 8001944:	4a1a      	ldr	r2, [pc, #104]	; (80019b0 <HAL_UART_MspInit+0x90>)
 8001946:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800194a:	61d3      	str	r3, [r2, #28]
 800194c:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <HAL_UART_MspInit+0x90>)
 800194e:	69db      	ldr	r3, [r3, #28]
 8001950:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001958:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <HAL_UART_MspInit+0x90>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	4a14      	ldr	r2, [pc, #80]	; (80019b0 <HAL_UART_MspInit+0x90>)
 800195e:	f043 0308 	orr.w	r3, r3, #8
 8001962:	6193      	str	r3, [r2, #24]
 8001964:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <HAL_UART_MspInit+0x90>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	f003 0308 	and.w	r3, r3, #8
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001970:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001974:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001976:	2302      	movs	r3, #2
 8001978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800197a:	2303      	movs	r3, #3
 800197c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197e:	f107 0310 	add.w	r3, r7, #16
 8001982:	4619      	mov	r1, r3
 8001984:	480b      	ldr	r0, [pc, #44]	; (80019b4 <HAL_UART_MspInit+0x94>)
 8001986:	f000 fcc3 	bl	8002310 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800198a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800198e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001998:	f107 0310 	add.w	r3, r7, #16
 800199c:	4619      	mov	r1, r3
 800199e:	4805      	ldr	r0, [pc, #20]	; (80019b4 <HAL_UART_MspInit+0x94>)
 80019a0:	f000 fcb6 	bl	8002310 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80019a4:	bf00      	nop
 80019a6:	3720      	adds	r7, #32
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40004800 	.word	0x40004800
 80019b0:	40021000 	.word	0x40021000
 80019b4:	40010c00 	.word	0x40010c00

080019b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019c8:	e7fe      	b.n	80019c8 <HardFault_Handler+0x4>

080019ca <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019ce:	e7fe      	b.n	80019ce <MemManage_Handler+0x4>

080019d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d4:	e7fe      	b.n	80019d4 <BusFault_Handler+0x4>

080019d6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019da:	e7fe      	b.n	80019da <UsageFault_Handler+0x4>

080019dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr

080019e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr

080019f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr

08001a00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a04:	f000 f8fe 	bl	8001c04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001a10:	4802      	ldr	r0, [pc, #8]	; (8001a1c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001a12:	f001 ff77 	bl	8003904 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000168 	.word	0x20000168

08001a20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a24:	4802      	ldr	r0, [pc, #8]	; (8001a30 <TIM2_IRQHandler+0x10>)
 8001a26:	f001 ff6d 	bl	8003904 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000128 	.word	0x20000128

08001a34 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001a38:	4802      	ldr	r0, [pc, #8]	; (8001a44 <TIM4_IRQHandler+0x10>)
 8001a3a:	f001 ff63 	bl	8003904 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	200000a8 	.word	0x200000a8

08001a48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_customIRQHandler();
 8001a4c:	f7fe fbfe 	bl	800024c <HAL_GPIO_EXTI_customIRQHandler>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001a50:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a54:	f000 fde6 	bl	8002624 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001a58:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001a5c:	f000 fde2 	bl	8002624 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a6c:	4a14      	ldr	r2, [pc, #80]	; (8001ac0 <_sbrk+0x5c>)
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <_sbrk+0x60>)
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a78:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <_sbrk+0x64>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d102      	bne.n	8001a86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a80:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <_sbrk+0x64>)
 8001a82:	4a12      	ldr	r2, [pc, #72]	; (8001acc <_sbrk+0x68>)
 8001a84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a86:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <_sbrk+0x64>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d207      	bcs.n	8001aa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a94:	f002 ff22 	bl	80048dc <__errno>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	230c      	movs	r3, #12
 8001a9c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa2:	e009      	b.n	8001ab8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aa4:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <_sbrk+0x64>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aaa:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <_sbrk+0x64>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	4a05      	ldr	r2, [pc, #20]	; (8001ac8 <_sbrk+0x64>)
 8001ab4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20002000 	.word	0x20002000
 8001ac4:	00000400 	.word	0x00000400
 8001ac8:	2000009c 	.word	0x2000009c
 8001acc:	20000480 	.word	0x20000480

08001ad0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001ad4:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <SystemInit+0x64>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a16      	ldr	r2, [pc, #88]	; (8001b34 <SystemInit+0x64>)
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001ae0:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <SystemInit+0x64>)
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	4913      	ldr	r1, [pc, #76]	; (8001b34 <SystemInit+0x64>)
 8001ae6:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <SystemInit+0x68>)
 8001ae8:	4013      	ands	r3, r2
 8001aea:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <SystemInit+0x64>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a10      	ldr	r2, [pc, #64]	; (8001b34 <SystemInit+0x64>)
 8001af2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001afa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001afc:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <SystemInit+0x64>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a0c      	ldr	r2, [pc, #48]	; (8001b34 <SystemInit+0x64>)
 8001b02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b06:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001b08:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <SystemInit+0x64>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	4a09      	ldr	r2, [pc, #36]	; (8001b34 <SystemInit+0x64>)
 8001b0e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001b12:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
#elif defined(STM32F100xB) || defined(STM32F100xE)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001b14:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <SystemInit+0x64>)
 8001b16:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001b1a:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <SystemInit+0x64>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <SystemInit+0x6c>)
 8001b24:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b28:	609a      	str	r2, [r3, #8]
#endif 
}
 8001b2a:	bf00      	nop
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40021000 	.word	0x40021000
 8001b38:	f8ff0000 	.word	0xf8ff0000
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001b40:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001b42:	e003      	b.n	8001b4c <LoopCopyDataInit>

08001b44 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001b44:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001b46:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001b48:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001b4a:	3104      	adds	r1, #4

08001b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001b4c:	480a      	ldr	r0, [pc, #40]	; (8001b78 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001b4e:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001b50:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001b52:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001b54:	d3f6      	bcc.n	8001b44 <CopyDataInit>
  ldr r2, =_sbss
 8001b56:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001b58:	e002      	b.n	8001b60 <LoopFillZerobss>

08001b5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001b5a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001b5c:	f842 3b04 	str.w	r3, [r2], #4

08001b60 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001b60:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001b62:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001b64:	d3f9      	bcc.n	8001b5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b66:	f7ff ffb3 	bl	8001ad0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b6a:	f002 febd 	bl	80048e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b6e:	f7ff f8e1 	bl	8000d34 <main>
  bx lr
 8001b72:	4770      	bx	lr
  ldr r3, =_sidata
 8001b74:	080052b8 	.word	0x080052b8
  ldr r0, =_sdata
 8001b78:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001b7c:	20000080 	.word	0x20000080
  ldr r2, =_sbss
 8001b80:	20000080 	.word	0x20000080
  ldr r3, = _ebss
 8001b84:	2000047c 	.word	0x2000047c

08001b88 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b88:	e7fe      	b.n	8001b88 <ADC1_IRQHandler>

08001b8a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b8e:	2003      	movs	r0, #3
 8001b90:	f000 fb6e 	bl	8002270 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b94:	2000      	movs	r0, #0
 8001b96:	f000 f805 	bl	8001ba4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b9a:	f7ff fd53 	bl	8001644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bac:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <HAL_InitTick+0x54>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <HAL_InitTick+0x58>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 fb97 	bl	80022f6 <HAL_SYSTICK_Config>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e00e      	b.n	8001bf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b0f      	cmp	r3, #15
 8001bd6:	d80a      	bhi.n	8001bee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001be0:	f000 fb51 	bl	8002286 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001be4:	4a06      	ldr	r2, [pc, #24]	; (8001c00 <HAL_InitTick+0x5c>)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
 8001bec:	e000      	b.n	8001bf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20000010 	.word	0x20000010
 8001bfc:	20000018 	.word	0x20000018
 8001c00:	20000014 	.word	0x20000014

08001c04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c08:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <HAL_IncTick+0x1c>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <HAL_IncTick+0x20>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4413      	add	r3, r2
 8001c14:	4a03      	ldr	r2, [pc, #12]	; (8001c24 <HAL_IncTick+0x20>)
 8001c16:	6013      	str	r3, [r2, #0]
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr
 8001c20:	20000018 	.word	0x20000018
 8001c24:	20000474 	.word	0x20000474

08001c28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c2c:	4b02      	ldr	r3, [pc, #8]	; (8001c38 <HAL_GetTick+0x10>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr
 8001c38:	20000474 	.word	0x20000474

08001c3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c44:	f7ff fff0 	bl	8001c28 <HAL_GetTick>
 8001c48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c54:	d005      	beq.n	8001c62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c56:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <HAL_Delay+0x40>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4413      	add	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c62:	bf00      	nop
 8001c64:	f7ff ffe0 	bl	8001c28 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d8f7      	bhi.n	8001c64 <HAL_Delay+0x28>
  {
  }
}
 8001c74:	bf00      	nop
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20000018 	.word	0x20000018

08001c80 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e0be      	b.n	8001e20 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d109      	bne.n	8001cc4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff fcf2 	bl	80016a8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 f9ab 	bl	8002020 <ADC_ConversionStop_Disable>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd2:	f003 0310 	and.w	r3, r3, #16
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f040 8099 	bne.w	8001e0e <HAL_ADC_Init+0x18e>
 8001cdc:	7dfb      	ldrb	r3, [r7, #23]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f040 8095 	bne.w	8001e0e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cec:	f023 0302 	bic.w	r3, r3, #2
 8001cf0:	f043 0202 	orr.w	r2, r3, #2
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d00:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	7b1b      	ldrb	r3, [r3, #12]
 8001d06:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d08:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d18:	d003      	beq.n	8001d22 <HAL_ADC_Init+0xa2>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d102      	bne.n	8001d28 <HAL_ADC_Init+0xa8>
 8001d22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d26:	e000      	b.n	8001d2a <HAL_ADC_Init+0xaa>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	7d1b      	ldrb	r3, [r3, #20]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d119      	bne.n	8001d6c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	7b1b      	ldrb	r3, [r3, #12]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d109      	bne.n	8001d54 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	3b01      	subs	r3, #1
 8001d46:	035a      	lsls	r2, r3, #13
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d50:	613b      	str	r3, [r7, #16]
 8001d52:	e00b      	b.n	8001d6c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d58:	f043 0220 	orr.w	r2, r3, #32
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d64:	f043 0201 	orr.w	r2, r3, #1
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	4b28      	ldr	r3, [pc, #160]	; (8001e28 <HAL_ADC_Init+0x1a8>)
 8001d88:	4013      	ands	r3, r2
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6812      	ldr	r2, [r2, #0]
 8001d8e:	68b9      	ldr	r1, [r7, #8]
 8001d90:	430b      	orrs	r3, r1
 8001d92:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d9c:	d003      	beq.n	8001da6 <HAL_ADC_Init+0x126>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d104      	bne.n	8001db0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	051b      	lsls	r3, r3, #20
 8001dae:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	4b18      	ldr	r3, [pc, #96]	; (8001e2c <HAL_ADC_Init+0x1ac>)
 8001dcc:	4013      	ands	r3, r2
 8001dce:	68ba      	ldr	r2, [r7, #8]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d10b      	bne.n	8001dec <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dde:	f023 0303 	bic.w	r3, r3, #3
 8001de2:	f043 0201 	orr.w	r2, r3, #1
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001dea:	e018      	b.n	8001e1e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df0:	f023 0312 	bic.w	r3, r3, #18
 8001df4:	f043 0210 	orr.w	r2, r3, #16
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e00:	f043 0201 	orr.w	r2, r3, #1
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e0c:	e007      	b.n	8001e1e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e12:	f043 0210 	orr.w	r2, r3, #16
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	ffe1f7fd 	.word	0xffe1f7fd
 8001e2c:	ff1f0efe 	.word	0xff1f0efe

08001e30 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d101      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x20>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	e0dc      	b.n	800200a <HAL_ADC_ConfigChannel+0x1da>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2b06      	cmp	r3, #6
 8001e5e:	d81c      	bhi.n	8001e9a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	3b05      	subs	r3, #5
 8001e72:	221f      	movs	r2, #31
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	4019      	ands	r1, r3
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	6818      	ldr	r0, [r3, #0]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	3b05      	subs	r3, #5
 8001e8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	430a      	orrs	r2, r1
 8001e96:	635a      	str	r2, [r3, #52]	; 0x34
 8001e98:	e03c      	b.n	8001f14 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b0c      	cmp	r3, #12
 8001ea0:	d81c      	bhi.n	8001edc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	3b23      	subs	r3, #35	; 0x23
 8001eb4:	221f      	movs	r2, #31
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	4019      	ands	r1, r3
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	6818      	ldr	r0, [r3, #0]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	3b23      	subs	r3, #35	; 0x23
 8001ece:	fa00 f203 	lsl.w	r2, r0, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	631a      	str	r2, [r3, #48]	; 0x30
 8001eda:	e01b      	b.n	8001f14 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	3b41      	subs	r3, #65	; 0x41
 8001eee:	221f      	movs	r2, #31
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	4019      	ands	r1, r3
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	6818      	ldr	r0, [r3, #0]
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	4613      	mov	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	3b41      	subs	r3, #65	; 0x41
 8001f08:	fa00 f203 	lsl.w	r2, r0, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b09      	cmp	r3, #9
 8001f1a:	d91c      	bls.n	8001f56 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68d9      	ldr	r1, [r3, #12]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	4613      	mov	r3, r2
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	4413      	add	r3, r2
 8001f2c:	3b1e      	subs	r3, #30
 8001f2e:	2207      	movs	r2, #7
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	4019      	ands	r1, r3
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	6898      	ldr	r0, [r3, #8]
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	4613      	mov	r3, r2
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	4413      	add	r3, r2
 8001f46:	3b1e      	subs	r3, #30
 8001f48:	fa00 f203 	lsl.w	r2, r0, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	60da      	str	r2, [r3, #12]
 8001f54:	e019      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6919      	ldr	r1, [r3, #16]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4613      	mov	r3, r2
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	4413      	add	r3, r2
 8001f66:	2207      	movs	r2, #7
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	4019      	ands	r1, r3
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	6898      	ldr	r0, [r3, #8]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	4413      	add	r3, r2
 8001f7e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2b10      	cmp	r3, #16
 8001f90:	d003      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f96:	2b11      	cmp	r3, #17
 8001f98:	d132      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a1d      	ldr	r2, [pc, #116]	; (8002014 <HAL_ADC_ConfigChannel+0x1e4>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d125      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d126      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001fc0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2b10      	cmp	r3, #16
 8001fc8:	d11a      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fca:	4b13      	ldr	r3, [pc, #76]	; (8002018 <HAL_ADC_ConfigChannel+0x1e8>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a13      	ldr	r2, [pc, #76]	; (800201c <HAL_ADC_ConfigChannel+0x1ec>)
 8001fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd4:	0c9a      	lsrs	r2, r3, #18
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fe0:	e002      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f9      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x1b2>
 8001fee:	e007      	b.n	8002000 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff4:	f043 0220 	orr.w	r2, r3, #32
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002008:	7bfb      	ldrb	r3, [r7, #15]
}
 800200a:	4618      	mov	r0, r3
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr
 8002014:	40012400 	.word	0x40012400
 8002018:	20000010 	.word	0x20000010
 800201c:	431bde83 	.word	0x431bde83

08002020 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b01      	cmp	r3, #1
 8002038:	d127      	bne.n	800208a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 0201 	bic.w	r2, r2, #1
 8002048:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800204a:	f7ff fded 	bl	8001c28 <HAL_GetTick>
 800204e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002050:	e014      	b.n	800207c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002052:	f7ff fde9 	bl	8001c28 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d90d      	bls.n	800207c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002064:	f043 0210 	orr.w	r2, r3, #16
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002070:	f043 0201 	orr.w	r2, r3, #1
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e007      	b.n	800208c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b01      	cmp	r3, #1
 8002088:	d0e3      	beq.n	8002052 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <__NVIC_SetPriorityGrouping>:
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <__NVIC_SetPriorityGrouping+0x44>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020b0:	4013      	ands	r3, r2
 80020b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020c6:	4a04      	ldr	r2, [pc, #16]	; (80020d8 <__NVIC_SetPriorityGrouping+0x44>)
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	60d3      	str	r3, [r2, #12]
}
 80020cc:	bf00      	nop
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <__NVIC_GetPriorityGrouping>:
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e0:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <__NVIC_GetPriorityGrouping+0x18>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	0a1b      	lsrs	r3, r3, #8
 80020e6:	f003 0307 	and.w	r3, r3, #7
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <__NVIC_EnableIRQ>:
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002106:	2b00      	cmp	r3, #0
 8002108:	db0b      	blt.n	8002122 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	f003 021f 	and.w	r2, r3, #31
 8002110:	4906      	ldr	r1, [pc, #24]	; (800212c <__NVIC_EnableIRQ+0x34>)
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	095b      	lsrs	r3, r3, #5
 8002118:	2001      	movs	r0, #1
 800211a:	fa00 f202 	lsl.w	r2, r0, r2
 800211e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr
 800212c:	e000e100 	.word	0xe000e100

08002130 <__NVIC_DisableIRQ>:
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800213a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213e:	2b00      	cmp	r3, #0
 8002140:	db10      	blt.n	8002164 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002142:	79fb      	ldrb	r3, [r7, #7]
 8002144:	f003 021f 	and.w	r2, r3, #31
 8002148:	4909      	ldr	r1, [pc, #36]	; (8002170 <__NVIC_DisableIRQ+0x40>)
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	095b      	lsrs	r3, r3, #5
 8002150:	2001      	movs	r0, #1
 8002152:	fa00 f202 	lsl.w	r2, r0, r2
 8002156:	3320      	adds	r3, #32
 8002158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800215c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002160:	f3bf 8f6f 	isb	sy
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	bc80      	pop	{r7}
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	e000e100 	.word	0xe000e100

08002174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	6039      	str	r1, [r7, #0]
 800217e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002184:	2b00      	cmp	r3, #0
 8002186:	db0a      	blt.n	800219e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	b2da      	uxtb	r2, r3
 800218c:	490c      	ldr	r1, [pc, #48]	; (80021c0 <__NVIC_SetPriority+0x4c>)
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	0112      	lsls	r2, r2, #4
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	440b      	add	r3, r1
 8002198:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800219c:	e00a      	b.n	80021b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	4908      	ldr	r1, [pc, #32]	; (80021c4 <__NVIC_SetPriority+0x50>)
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	3b04      	subs	r3, #4
 80021ac:	0112      	lsls	r2, r2, #4
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	440b      	add	r3, r1
 80021b2:	761a      	strb	r2, [r3, #24]
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bc80      	pop	{r7}
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	e000e100 	.word	0xe000e100
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b089      	sub	sp, #36	; 0x24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f1c3 0307 	rsb	r3, r3, #7
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	bf28      	it	cs
 80021e6:	2304      	movcs	r3, #4
 80021e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	3304      	adds	r3, #4
 80021ee:	2b06      	cmp	r3, #6
 80021f0:	d902      	bls.n	80021f8 <NVIC_EncodePriority+0x30>
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3b03      	subs	r3, #3
 80021f6:	e000      	b.n	80021fa <NVIC_EncodePriority+0x32>
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43da      	mvns	r2, r3
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	401a      	ands	r2, r3
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002210:	f04f 31ff 	mov.w	r1, #4294967295
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	fa01 f303 	lsl.w	r3, r1, r3
 800221a:	43d9      	mvns	r1, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002220:	4313      	orrs	r3, r2
         );
}
 8002222:	4618      	mov	r0, r3
 8002224:	3724      	adds	r7, #36	; 0x24
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr

0800222c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3b01      	subs	r3, #1
 8002238:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800223c:	d301      	bcc.n	8002242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800223e:	2301      	movs	r3, #1
 8002240:	e00f      	b.n	8002262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002242:	4a0a      	ldr	r2, [pc, #40]	; (800226c <SysTick_Config+0x40>)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3b01      	subs	r3, #1
 8002248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800224a:	210f      	movs	r1, #15
 800224c:	f04f 30ff 	mov.w	r0, #4294967295
 8002250:	f7ff ff90 	bl	8002174 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002254:	4b05      	ldr	r3, [pc, #20]	; (800226c <SysTick_Config+0x40>)
 8002256:	2200      	movs	r2, #0
 8002258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800225a:	4b04      	ldr	r3, [pc, #16]	; (800226c <SysTick_Config+0x40>)
 800225c:	2207      	movs	r2, #7
 800225e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	e000e010 	.word	0xe000e010

08002270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7ff ff0b 	bl	8002094 <__NVIC_SetPriorityGrouping>
}
 800227e:	bf00      	nop
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002286:	b580      	push	{r7, lr}
 8002288:	b086      	sub	sp, #24
 800228a:	af00      	add	r7, sp, #0
 800228c:	4603      	mov	r3, r0
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	607a      	str	r2, [r7, #4]
 8002292:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002298:	f7ff ff20 	bl	80020dc <__NVIC_GetPriorityGrouping>
 800229c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68b9      	ldr	r1, [r7, #8]
 80022a2:	6978      	ldr	r0, [r7, #20]
 80022a4:	f7ff ff90 	bl	80021c8 <NVIC_EncodePriority>
 80022a8:	4602      	mov	r2, r0
 80022aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ae:	4611      	mov	r1, r2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff ff5f 	bl	8002174 <__NVIC_SetPriority>
}
 80022b6:	bf00      	nop
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b082      	sub	sp, #8
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	4603      	mov	r3, r0
 80022c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff ff13 	bl	80020f8 <__NVIC_EnableIRQ>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	4603      	mov	r3, r0
 80022e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80022e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff ff21 	bl	8002130 <__NVIC_DisableIRQ>
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7ff ff94 	bl	800222c <SysTick_Config>
 8002304:	4603      	mov	r3, r0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002310:	b480      	push	{r7}
 8002312:	b08b      	sub	sp, #44	; 0x2c
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800231a:	2300      	movs	r3, #0
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800231e:	2300      	movs	r3, #0
 8002320:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002322:	e127      	b.n	8002574 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002324:	2201      	movs	r2, #1
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	69fa      	ldr	r2, [r7, #28]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	429a      	cmp	r2, r3
 800233e:	f040 8116 	bne.w	800256e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b12      	cmp	r3, #18
 8002348:	d034      	beq.n	80023b4 <HAL_GPIO_Init+0xa4>
 800234a:	2b12      	cmp	r3, #18
 800234c:	d80d      	bhi.n	800236a <HAL_GPIO_Init+0x5a>
 800234e:	2b02      	cmp	r3, #2
 8002350:	d02b      	beq.n	80023aa <HAL_GPIO_Init+0x9a>
 8002352:	2b02      	cmp	r3, #2
 8002354:	d804      	bhi.n	8002360 <HAL_GPIO_Init+0x50>
 8002356:	2b00      	cmp	r3, #0
 8002358:	d031      	beq.n	80023be <HAL_GPIO_Init+0xae>
 800235a:	2b01      	cmp	r3, #1
 800235c:	d01c      	beq.n	8002398 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800235e:	e048      	b.n	80023f2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002360:	2b03      	cmp	r3, #3
 8002362:	d043      	beq.n	80023ec <HAL_GPIO_Init+0xdc>
 8002364:	2b11      	cmp	r3, #17
 8002366:	d01b      	beq.n	80023a0 <HAL_GPIO_Init+0x90>
          break;
 8002368:	e043      	b.n	80023f2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800236a:	4a89      	ldr	r2, [pc, #548]	; (8002590 <HAL_GPIO_Init+0x280>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d026      	beq.n	80023be <HAL_GPIO_Init+0xae>
 8002370:	4a87      	ldr	r2, [pc, #540]	; (8002590 <HAL_GPIO_Init+0x280>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d806      	bhi.n	8002384 <HAL_GPIO_Init+0x74>
 8002376:	4a87      	ldr	r2, [pc, #540]	; (8002594 <HAL_GPIO_Init+0x284>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d020      	beq.n	80023be <HAL_GPIO_Init+0xae>
 800237c:	4a86      	ldr	r2, [pc, #536]	; (8002598 <HAL_GPIO_Init+0x288>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d01d      	beq.n	80023be <HAL_GPIO_Init+0xae>
          break;
 8002382:	e036      	b.n	80023f2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002384:	4a85      	ldr	r2, [pc, #532]	; (800259c <HAL_GPIO_Init+0x28c>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d019      	beq.n	80023be <HAL_GPIO_Init+0xae>
 800238a:	4a85      	ldr	r2, [pc, #532]	; (80025a0 <HAL_GPIO_Init+0x290>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d016      	beq.n	80023be <HAL_GPIO_Init+0xae>
 8002390:	4a84      	ldr	r2, [pc, #528]	; (80025a4 <HAL_GPIO_Init+0x294>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d013      	beq.n	80023be <HAL_GPIO_Init+0xae>
          break;
 8002396:	e02c      	b.n	80023f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	623b      	str	r3, [r7, #32]
          break;
 800239e:	e028      	b.n	80023f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	3304      	adds	r3, #4
 80023a6:	623b      	str	r3, [r7, #32]
          break;
 80023a8:	e023      	b.n	80023f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	3308      	adds	r3, #8
 80023b0:	623b      	str	r3, [r7, #32]
          break;
 80023b2:	e01e      	b.n	80023f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	330c      	adds	r3, #12
 80023ba:	623b      	str	r3, [r7, #32]
          break;
 80023bc:	e019      	b.n	80023f2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d102      	bne.n	80023cc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023c6:	2304      	movs	r3, #4
 80023c8:	623b      	str	r3, [r7, #32]
          break;
 80023ca:	e012      	b.n	80023f2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d105      	bne.n	80023e0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023d4:	2308      	movs	r3, #8
 80023d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	69fa      	ldr	r2, [r7, #28]
 80023dc:	611a      	str	r2, [r3, #16]
          break;
 80023de:	e008      	b.n	80023f2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023e0:	2308      	movs	r3, #8
 80023e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69fa      	ldr	r2, [r7, #28]
 80023e8:	615a      	str	r2, [r3, #20]
          break;
 80023ea:	e002      	b.n	80023f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023ec:	2300      	movs	r3, #0
 80023ee:	623b      	str	r3, [r7, #32]
          break;
 80023f0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	2bff      	cmp	r3, #255	; 0xff
 80023f6:	d801      	bhi.n	80023fc <HAL_GPIO_Init+0xec>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	e001      	b.n	8002400 <HAL_GPIO_Init+0xf0>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3304      	adds	r3, #4
 8002400:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	2bff      	cmp	r3, #255	; 0xff
 8002406:	d802      	bhi.n	800240e <HAL_GPIO_Init+0xfe>
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	e002      	b.n	8002414 <HAL_GPIO_Init+0x104>
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	3b08      	subs	r3, #8
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	210f      	movs	r1, #15
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	fa01 f303 	lsl.w	r3, r1, r3
 8002422:	43db      	mvns	r3, r3
 8002424:	401a      	ands	r2, r3
 8002426:	6a39      	ldr	r1, [r7, #32]
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	fa01 f303 	lsl.w	r3, r1, r3
 800242e:	431a      	orrs	r2, r3
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 8096 	beq.w	800256e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002442:	4b59      	ldr	r3, [pc, #356]	; (80025a8 <HAL_GPIO_Init+0x298>)
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	4a58      	ldr	r2, [pc, #352]	; (80025a8 <HAL_GPIO_Init+0x298>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	6193      	str	r3, [r2, #24]
 800244e:	4b56      	ldr	r3, [pc, #344]	; (80025a8 <HAL_GPIO_Init+0x298>)
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	60bb      	str	r3, [r7, #8]
 8002458:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800245a:	4a54      	ldr	r2, [pc, #336]	; (80025ac <HAL_GPIO_Init+0x29c>)
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	089b      	lsrs	r3, r3, #2
 8002460:	3302      	adds	r3, #2
 8002462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002466:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	220f      	movs	r2, #15
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43db      	mvns	r3, r3
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	4013      	ands	r3, r2
 800247c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a4b      	ldr	r2, [pc, #300]	; (80025b0 <HAL_GPIO_Init+0x2a0>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d013      	beq.n	80024ae <HAL_GPIO_Init+0x19e>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a4a      	ldr	r2, [pc, #296]	; (80025b4 <HAL_GPIO_Init+0x2a4>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d00d      	beq.n	80024aa <HAL_GPIO_Init+0x19a>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a49      	ldr	r2, [pc, #292]	; (80025b8 <HAL_GPIO_Init+0x2a8>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d007      	beq.n	80024a6 <HAL_GPIO_Init+0x196>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a48      	ldr	r2, [pc, #288]	; (80025bc <HAL_GPIO_Init+0x2ac>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d101      	bne.n	80024a2 <HAL_GPIO_Init+0x192>
 800249e:	2303      	movs	r3, #3
 80024a0:	e006      	b.n	80024b0 <HAL_GPIO_Init+0x1a0>
 80024a2:	2304      	movs	r3, #4
 80024a4:	e004      	b.n	80024b0 <HAL_GPIO_Init+0x1a0>
 80024a6:	2302      	movs	r3, #2
 80024a8:	e002      	b.n	80024b0 <HAL_GPIO_Init+0x1a0>
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <HAL_GPIO_Init+0x1a0>
 80024ae:	2300      	movs	r3, #0
 80024b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b2:	f002 0203 	and.w	r2, r2, #3
 80024b6:	0092      	lsls	r2, r2, #2
 80024b8:	4093      	lsls	r3, r2
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	4313      	orrs	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024c0:	493a      	ldr	r1, [pc, #232]	; (80025ac <HAL_GPIO_Init+0x29c>)
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	089b      	lsrs	r3, r3, #2
 80024c6:	3302      	adds	r3, #2
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d006      	beq.n	80024e8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024da:	4b39      	ldr	r3, [pc, #228]	; (80025c0 <HAL_GPIO_Init+0x2b0>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	4938      	ldr	r1, [pc, #224]	; (80025c0 <HAL_GPIO_Init+0x2b0>)
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	600b      	str	r3, [r1, #0]
 80024e6:	e006      	b.n	80024f6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024e8:	4b35      	ldr	r3, [pc, #212]	; (80025c0 <HAL_GPIO_Init+0x2b0>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	43db      	mvns	r3, r3
 80024f0:	4933      	ldr	r1, [pc, #204]	; (80025c0 <HAL_GPIO_Init+0x2b0>)
 80024f2:	4013      	ands	r3, r2
 80024f4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d006      	beq.n	8002510 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002502:	4b2f      	ldr	r3, [pc, #188]	; (80025c0 <HAL_GPIO_Init+0x2b0>)
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	492e      	ldr	r1, [pc, #184]	; (80025c0 <HAL_GPIO_Init+0x2b0>)
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	4313      	orrs	r3, r2
 800250c:	604b      	str	r3, [r1, #4]
 800250e:	e006      	b.n	800251e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002510:	4b2b      	ldr	r3, [pc, #172]	; (80025c0 <HAL_GPIO_Init+0x2b0>)
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	43db      	mvns	r3, r3
 8002518:	4929      	ldr	r1, [pc, #164]	; (80025c0 <HAL_GPIO_Init+0x2b0>)
 800251a:	4013      	ands	r3, r2
 800251c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d006      	beq.n	8002538 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800252a:	4b25      	ldr	r3, [pc, #148]	; (80025c0 <HAL_GPIO_Init+0x2b0>)
 800252c:	689a      	ldr	r2, [r3, #8]
 800252e:	4924      	ldr	r1, [pc, #144]	; (80025c0 <HAL_GPIO_Init+0x2b0>)
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	4313      	orrs	r3, r2
 8002534:	608b      	str	r3, [r1, #8]
 8002536:	e006      	b.n	8002546 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002538:	4b21      	ldr	r3, [pc, #132]	; (80025c0 <HAL_GPIO_Init+0x2b0>)
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	43db      	mvns	r3, r3
 8002540:	491f      	ldr	r1, [pc, #124]	; (80025c0 <HAL_GPIO_Init+0x2b0>)
 8002542:	4013      	ands	r3, r2
 8002544:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d006      	beq.n	8002560 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002552:	4b1b      	ldr	r3, [pc, #108]	; (80025c0 <HAL_GPIO_Init+0x2b0>)
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	491a      	ldr	r1, [pc, #104]	; (80025c0 <HAL_GPIO_Init+0x2b0>)
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	4313      	orrs	r3, r2
 800255c:	60cb      	str	r3, [r1, #12]
 800255e:	e006      	b.n	800256e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002560:	4b17      	ldr	r3, [pc, #92]	; (80025c0 <HAL_GPIO_Init+0x2b0>)
 8002562:	68da      	ldr	r2, [r3, #12]
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	43db      	mvns	r3, r3
 8002568:	4915      	ldr	r1, [pc, #84]	; (80025c0 <HAL_GPIO_Init+0x2b0>)
 800256a:	4013      	ands	r3, r2
 800256c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	3301      	adds	r3, #1
 8002572:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	fa22 f303 	lsr.w	r3, r2, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	f47f aed0 	bne.w	8002324 <HAL_GPIO_Init+0x14>
  }
}
 8002584:	bf00      	nop
 8002586:	372c      	adds	r7, #44	; 0x2c
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	10210000 	.word	0x10210000
 8002594:	10110000 	.word	0x10110000
 8002598:	10120000 	.word	0x10120000
 800259c:	10310000 	.word	0x10310000
 80025a0:	10320000 	.word	0x10320000
 80025a4:	10220000 	.word	0x10220000
 80025a8:	40021000 	.word	0x40021000
 80025ac:	40010000 	.word	0x40010000
 80025b0:	40010800 	.word	0x40010800
 80025b4:	40010c00 	.word	0x40010c00
 80025b8:	40011000 	.word	0x40011000
 80025bc:	40011400 	.word	0x40011400
 80025c0:	40010400 	.word	0x40010400

080025c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	887b      	ldrh	r3, [r7, #2]
 80025d6:	4013      	ands	r3, r2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d002      	beq.n	80025e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025dc:	2301      	movs	r3, #1
 80025de:	73fb      	strb	r3, [r7, #15]
 80025e0:	e001      	b.n	80025e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025e2:	2300      	movs	r3, #0
 80025e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr

080025f2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
 80025fa:	460b      	mov	r3, r1
 80025fc:	807b      	strh	r3, [r7, #2]
 80025fe:	4613      	mov	r3, r2
 8002600:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002602:	787b      	ldrb	r3, [r7, #1]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002608:	887a      	ldrh	r2, [r7, #2]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800260e:	e003      	b.n	8002618 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002610:	887b      	ldrh	r3, [r7, #2]
 8002612:	041a      	lsls	r2, r3, #16
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	611a      	str	r2, [r3, #16]
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr
	...

08002624 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800262e:	4b08      	ldr	r3, [pc, #32]	; (8002650 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002630:	695a      	ldr	r2, [r3, #20]
 8002632:	88fb      	ldrh	r3, [r7, #6]
 8002634:	4013      	ands	r3, r2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d006      	beq.n	8002648 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800263a:	4a05      	ldr	r2, [pc, #20]	; (8002650 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800263c:	88fb      	ldrh	r3, [r7, #6]
 800263e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002640:	88fb      	ldrh	r3, [r7, #6]
 8002642:	4618      	mov	r0, r3
 8002644:	f000 f806 	bl	8002654 <HAL_GPIO_EXTI_Callback>
  }
}
 8002648:	bf00      	nop
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40010400 	.word	0x40010400

08002654 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	bc80      	pop	{r7}
 8002666:	4770      	bx	lr

08002668 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e26c      	b.n	8002b54 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 8087 	beq.w	8002796 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002688:	4b92      	ldr	r3, [pc, #584]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 030c 	and.w	r3, r3, #12
 8002690:	2b04      	cmp	r3, #4
 8002692:	d00c      	beq.n	80026ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002694:	4b8f      	ldr	r3, [pc, #572]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 030c 	and.w	r3, r3, #12
 800269c:	2b08      	cmp	r3, #8
 800269e:	d112      	bne.n	80026c6 <HAL_RCC_OscConfig+0x5e>
 80026a0:	4b8c      	ldr	r3, [pc, #560]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ac:	d10b      	bne.n	80026c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ae:	4b89      	ldr	r3, [pc, #548]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d06c      	beq.n	8002794 <HAL_RCC_OscConfig+0x12c>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d168      	bne.n	8002794 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e246      	b.n	8002b54 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ce:	d106      	bne.n	80026de <HAL_RCC_OscConfig+0x76>
 80026d0:	4b80      	ldr	r3, [pc, #512]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a7f      	ldr	r2, [pc, #508]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 80026d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026da:	6013      	str	r3, [r2, #0]
 80026dc:	e02e      	b.n	800273c <HAL_RCC_OscConfig+0xd4>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10c      	bne.n	8002700 <HAL_RCC_OscConfig+0x98>
 80026e6:	4b7b      	ldr	r3, [pc, #492]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a7a      	ldr	r2, [pc, #488]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 80026ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	4b78      	ldr	r3, [pc, #480]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a77      	ldr	r2, [pc, #476]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 80026f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	e01d      	b.n	800273c <HAL_RCC_OscConfig+0xd4>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002708:	d10c      	bne.n	8002724 <HAL_RCC_OscConfig+0xbc>
 800270a:	4b72      	ldr	r3, [pc, #456]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a71      	ldr	r2, [pc, #452]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 8002710:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	4b6f      	ldr	r3, [pc, #444]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a6e      	ldr	r2, [pc, #440]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 800271c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002720:	6013      	str	r3, [r2, #0]
 8002722:	e00b      	b.n	800273c <HAL_RCC_OscConfig+0xd4>
 8002724:	4b6b      	ldr	r3, [pc, #428]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a6a      	ldr	r2, [pc, #424]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 800272a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	4b68      	ldr	r3, [pc, #416]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a67      	ldr	r2, [pc, #412]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 8002736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800273a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d013      	beq.n	800276c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002744:	f7ff fa70 	bl	8001c28 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800274c:	f7ff fa6c 	bl	8001c28 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b64      	cmp	r3, #100	; 0x64
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e1fa      	b.n	8002b54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275e:	4b5d      	ldr	r3, [pc, #372]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0f0      	beq.n	800274c <HAL_RCC_OscConfig+0xe4>
 800276a:	e014      	b.n	8002796 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276c:	f7ff fa5c 	bl	8001c28 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002774:	f7ff fa58 	bl	8001c28 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b64      	cmp	r3, #100	; 0x64
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e1e6      	b.n	8002b54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002786:	4b53      	ldr	r3, [pc, #332]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1f0      	bne.n	8002774 <HAL_RCC_OscConfig+0x10c>
 8002792:	e000      	b.n	8002796 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d063      	beq.n	800286a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027a2:	4b4c      	ldr	r3, [pc, #304]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f003 030c 	and.w	r3, r3, #12
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00b      	beq.n	80027c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027ae:	4b49      	ldr	r3, [pc, #292]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f003 030c 	and.w	r3, r3, #12
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	d11c      	bne.n	80027f4 <HAL_RCC_OscConfig+0x18c>
 80027ba:	4b46      	ldr	r3, [pc, #280]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d116      	bne.n	80027f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027c6:	4b43      	ldr	r3, [pc, #268]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d005      	beq.n	80027de <HAL_RCC_OscConfig+0x176>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d001      	beq.n	80027de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e1ba      	b.n	8002b54 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027de:	4b3d      	ldr	r3, [pc, #244]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	4939      	ldr	r1, [pc, #228]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027f2:	e03a      	b.n	800286a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d020      	beq.n	800283e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027fc:	4b36      	ldr	r3, [pc, #216]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 80027fe:	2201      	movs	r2, #1
 8002800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002802:	f7ff fa11 	bl	8001c28 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800280a:	f7ff fa0d 	bl	8001c28 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e19b      	b.n	8002b54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800281c:	4b2d      	ldr	r3, [pc, #180]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0f0      	beq.n	800280a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002828:	4b2a      	ldr	r3, [pc, #168]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	4927      	ldr	r1, [pc, #156]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 8002838:	4313      	orrs	r3, r2
 800283a:	600b      	str	r3, [r1, #0]
 800283c:	e015      	b.n	800286a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800283e:	4b26      	ldr	r3, [pc, #152]	; (80028d8 <HAL_RCC_OscConfig+0x270>)
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002844:	f7ff f9f0 	bl	8001c28 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800284c:	f7ff f9ec 	bl	8001c28 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e17a      	b.n	8002b54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800285e:	4b1d      	ldr	r3, [pc, #116]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1f0      	bne.n	800284c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0308 	and.w	r3, r3, #8
 8002872:	2b00      	cmp	r3, #0
 8002874:	d03a      	beq.n	80028ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d019      	beq.n	80028b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800287e:	4b17      	ldr	r3, [pc, #92]	; (80028dc <HAL_RCC_OscConfig+0x274>)
 8002880:	2201      	movs	r2, #1
 8002882:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002884:	f7ff f9d0 	bl	8001c28 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800288c:	f7ff f9cc 	bl	8001c28 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e15a      	b.n	8002b54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800289e:	4b0d      	ldr	r3, [pc, #52]	; (80028d4 <HAL_RCC_OscConfig+0x26c>)
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0f0      	beq.n	800288c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80028aa:	2001      	movs	r0, #1
 80028ac:	f000 faaa 	bl	8002e04 <RCC_Delay>
 80028b0:	e01c      	b.n	80028ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028b2:	4b0a      	ldr	r3, [pc, #40]	; (80028dc <HAL_RCC_OscConfig+0x274>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b8:	f7ff f9b6 	bl	8001c28 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028be:	e00f      	b.n	80028e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028c0:	f7ff f9b2 	bl	8001c28 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d908      	bls.n	80028e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e140      	b.n	8002b54 <HAL_RCC_OscConfig+0x4ec>
 80028d2:	bf00      	nop
 80028d4:	40021000 	.word	0x40021000
 80028d8:	42420000 	.word	0x42420000
 80028dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028e0:	4b9e      	ldr	r3, [pc, #632]	; (8002b5c <HAL_RCC_OscConfig+0x4f4>)
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1e9      	bne.n	80028c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 80a6 	beq.w	8002a46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028fa:	2300      	movs	r3, #0
 80028fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028fe:	4b97      	ldr	r3, [pc, #604]	; (8002b5c <HAL_RCC_OscConfig+0x4f4>)
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10d      	bne.n	8002926 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800290a:	4b94      	ldr	r3, [pc, #592]	; (8002b5c <HAL_RCC_OscConfig+0x4f4>)
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	4a93      	ldr	r2, [pc, #588]	; (8002b5c <HAL_RCC_OscConfig+0x4f4>)
 8002910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002914:	61d3      	str	r3, [r2, #28]
 8002916:	4b91      	ldr	r3, [pc, #580]	; (8002b5c <HAL_RCC_OscConfig+0x4f4>)
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291e:	60bb      	str	r3, [r7, #8]
 8002920:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002922:	2301      	movs	r3, #1
 8002924:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002926:	4b8e      	ldr	r3, [pc, #568]	; (8002b60 <HAL_RCC_OscConfig+0x4f8>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292e:	2b00      	cmp	r3, #0
 8002930:	d118      	bne.n	8002964 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002932:	4b8b      	ldr	r3, [pc, #556]	; (8002b60 <HAL_RCC_OscConfig+0x4f8>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a8a      	ldr	r2, [pc, #552]	; (8002b60 <HAL_RCC_OscConfig+0x4f8>)
 8002938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800293c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800293e:	f7ff f973 	bl	8001c28 <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002946:	f7ff f96f 	bl	8001c28 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b64      	cmp	r3, #100	; 0x64
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e0fd      	b.n	8002b54 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002958:	4b81      	ldr	r3, [pc, #516]	; (8002b60 <HAL_RCC_OscConfig+0x4f8>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002960:	2b00      	cmp	r3, #0
 8002962:	d0f0      	beq.n	8002946 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d106      	bne.n	800297a <HAL_RCC_OscConfig+0x312>
 800296c:	4b7b      	ldr	r3, [pc, #492]	; (8002b5c <HAL_RCC_OscConfig+0x4f4>)
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	4a7a      	ldr	r2, [pc, #488]	; (8002b5c <HAL_RCC_OscConfig+0x4f4>)
 8002972:	f043 0301 	orr.w	r3, r3, #1
 8002976:	6213      	str	r3, [r2, #32]
 8002978:	e02d      	b.n	80029d6 <HAL_RCC_OscConfig+0x36e>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10c      	bne.n	800299c <HAL_RCC_OscConfig+0x334>
 8002982:	4b76      	ldr	r3, [pc, #472]	; (8002b5c <HAL_RCC_OscConfig+0x4f4>)
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	4a75      	ldr	r2, [pc, #468]	; (8002b5c <HAL_RCC_OscConfig+0x4f4>)
 8002988:	f023 0301 	bic.w	r3, r3, #1
 800298c:	6213      	str	r3, [r2, #32]
 800298e:	4b73      	ldr	r3, [pc, #460]	; (8002b5c <HAL_RCC_OscConfig+0x4f4>)
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	4a72      	ldr	r2, [pc, #456]	; (8002b5c <HAL_RCC_OscConfig+0x4f4>)
 8002994:	f023 0304 	bic.w	r3, r3, #4
 8002998:	6213      	str	r3, [r2, #32]
 800299a:	e01c      	b.n	80029d6 <HAL_RCC_OscConfig+0x36e>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	2b05      	cmp	r3, #5
 80029a2:	d10c      	bne.n	80029be <HAL_RCC_OscConfig+0x356>
 80029a4:	4b6d      	ldr	r3, [pc, #436]	; (8002b5c <HAL_RCC_OscConfig+0x4f4>)
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	4a6c      	ldr	r2, [pc, #432]	; (8002b5c <HAL_RCC_OscConfig+0x4f4>)
 80029aa:	f043 0304 	orr.w	r3, r3, #4
 80029ae:	6213      	str	r3, [r2, #32]
 80029b0:	4b6a      	ldr	r3, [pc, #424]	; (8002b5c <HAL_RCC_OscConfig+0x4f4>)
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	4a69      	ldr	r2, [pc, #420]	; (8002b5c <HAL_RCC_OscConfig+0x4f4>)
 80029b6:	f043 0301 	orr.w	r3, r3, #1
 80029ba:	6213      	str	r3, [r2, #32]
 80029bc:	e00b      	b.n	80029d6 <HAL_RCC_OscConfig+0x36e>
 80029be:	4b67      	ldr	r3, [pc, #412]	; (8002b5c <HAL_RCC_OscConfig+0x4f4>)
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	4a66      	ldr	r2, [pc, #408]	; (8002b5c <HAL_RCC_OscConfig+0x4f4>)
 80029c4:	f023 0301 	bic.w	r3, r3, #1
 80029c8:	6213      	str	r3, [r2, #32]
 80029ca:	4b64      	ldr	r3, [pc, #400]	; (8002b5c <HAL_RCC_OscConfig+0x4f4>)
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	4a63      	ldr	r2, [pc, #396]	; (8002b5c <HAL_RCC_OscConfig+0x4f4>)
 80029d0:	f023 0304 	bic.w	r3, r3, #4
 80029d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d015      	beq.n	8002a0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029de:	f7ff f923 	bl	8001c28 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e4:	e00a      	b.n	80029fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e6:	f7ff f91f 	bl	8001c28 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e0ab      	b.n	8002b54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029fc:	4b57      	ldr	r3, [pc, #348]	; (8002b5c <HAL_RCC_OscConfig+0x4f4>)
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0ee      	beq.n	80029e6 <HAL_RCC_OscConfig+0x37e>
 8002a08:	e014      	b.n	8002a34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a0a:	f7ff f90d 	bl	8001c28 <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a10:	e00a      	b.n	8002a28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a12:	f7ff f909 	bl	8001c28 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e095      	b.n	8002b54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a28:	4b4c      	ldr	r3, [pc, #304]	; (8002b5c <HAL_RCC_OscConfig+0x4f4>)
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1ee      	bne.n	8002a12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a34:	7dfb      	ldrb	r3, [r7, #23]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d105      	bne.n	8002a46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a3a:	4b48      	ldr	r3, [pc, #288]	; (8002b5c <HAL_RCC_OscConfig+0x4f4>)
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	4a47      	ldr	r2, [pc, #284]	; (8002b5c <HAL_RCC_OscConfig+0x4f4>)
 8002a40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 8081 	beq.w	8002b52 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a50:	4b42      	ldr	r3, [pc, #264]	; (8002b5c <HAL_RCC_OscConfig+0x4f4>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 030c 	and.w	r3, r3, #12
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d061      	beq.n	8002b20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	69db      	ldr	r3, [r3, #28]
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d146      	bne.n	8002af2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a64:	4b3f      	ldr	r3, [pc, #252]	; (8002b64 <HAL_RCC_OscConfig+0x4fc>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6a:	f7ff f8dd 	bl	8001c28 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a72:	f7ff f8d9 	bl	8001c28 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e067      	b.n	8002b54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a84:	4b35      	ldr	r3, [pc, #212]	; (8002b5c <HAL_RCC_OscConfig+0x4f4>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1f0      	bne.n	8002a72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a98:	d108      	bne.n	8002aac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a9a:	4b30      	ldr	r3, [pc, #192]	; (8002b5c <HAL_RCC_OscConfig+0x4f4>)
 8002a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9e:	f023 020f 	bic.w	r2, r3, #15
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	492d      	ldr	r1, [pc, #180]	; (8002b5c <HAL_RCC_OscConfig+0x4f4>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aac:	4b2b      	ldr	r3, [pc, #172]	; (8002b5c <HAL_RCC_OscConfig+0x4f4>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a19      	ldr	r1, [r3, #32]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	430b      	orrs	r3, r1
 8002abe:	4927      	ldr	r1, [pc, #156]	; (8002b5c <HAL_RCC_OscConfig+0x4f4>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ac4:	4b27      	ldr	r3, [pc, #156]	; (8002b64 <HAL_RCC_OscConfig+0x4fc>)
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aca:	f7ff f8ad 	bl	8001c28 <HAL_GetTick>
 8002ace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ad0:	e008      	b.n	8002ae4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad2:	f7ff f8a9 	bl	8001c28 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e037      	b.n	8002b54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ae4:	4b1d      	ldr	r3, [pc, #116]	; (8002b5c <HAL_RCC_OscConfig+0x4f4>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d0f0      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x46a>
 8002af0:	e02f      	b.n	8002b52 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af2:	4b1c      	ldr	r3, [pc, #112]	; (8002b64 <HAL_RCC_OscConfig+0x4fc>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af8:	f7ff f896 	bl	8001c28 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b00:	f7ff f892 	bl	8001c28 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e020      	b.n	8002b54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b12:	4b12      	ldr	r3, [pc, #72]	; (8002b5c <HAL_RCC_OscConfig+0x4f4>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1f0      	bne.n	8002b00 <HAL_RCC_OscConfig+0x498>
 8002b1e:	e018      	b.n	8002b52 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	69db      	ldr	r3, [r3, #28]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d101      	bne.n	8002b2c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e013      	b.n	8002b54 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b2c:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <HAL_RCC_OscConfig+0x4f4>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d106      	bne.n	8002b4e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d001      	beq.n	8002b52 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e000      	b.n	8002b54 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	40007000 	.word	0x40007000
 8002b64:	42420060 	.word	0x42420060

08002b68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e0a0      	b.n	8002cbe <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d020      	beq.n	8002bca <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0304 	and.w	r3, r3, #4
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d005      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b94:	4b4c      	ldr	r3, [pc, #304]	; (8002cc8 <HAL_RCC_ClockConfig+0x160>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	4a4b      	ldr	r2, [pc, #300]	; (8002cc8 <HAL_RCC_ClockConfig+0x160>)
 8002b9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0308 	and.w	r3, r3, #8
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d005      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bac:	4b46      	ldr	r3, [pc, #280]	; (8002cc8 <HAL_RCC_ClockConfig+0x160>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	4a45      	ldr	r2, [pc, #276]	; (8002cc8 <HAL_RCC_ClockConfig+0x160>)
 8002bb2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002bb6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb8:	4b43      	ldr	r3, [pc, #268]	; (8002cc8 <HAL_RCC_ClockConfig+0x160>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	4940      	ldr	r1, [pc, #256]	; (8002cc8 <HAL_RCC_ClockConfig+0x160>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d040      	beq.n	8002c58 <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d107      	bne.n	8002bee <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bde:	4b3a      	ldr	r3, [pc, #232]	; (8002cc8 <HAL_RCC_ClockConfig+0x160>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d115      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e067      	b.n	8002cbe <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d107      	bne.n	8002c06 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf6:	4b34      	ldr	r3, [pc, #208]	; (8002cc8 <HAL_RCC_ClockConfig+0x160>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d109      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e05b      	b.n	8002cbe <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c06:	4b30      	ldr	r3, [pc, #192]	; (8002cc8 <HAL_RCC_ClockConfig+0x160>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e053      	b.n	8002cbe <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c16:	4b2c      	ldr	r3, [pc, #176]	; (8002cc8 <HAL_RCC_ClockConfig+0x160>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f023 0203 	bic.w	r2, r3, #3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	4929      	ldr	r1, [pc, #164]	; (8002cc8 <HAL_RCC_ClockConfig+0x160>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c28:	f7fe fffe 	bl	8001c28 <HAL_GetTick>
 8002c2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c2e:	e00a      	b.n	8002c46 <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c30:	f7fe fffa 	bl	8001c28 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e03b      	b.n	8002cbe <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c46:	4b20      	ldr	r3, [pc, #128]	; (8002cc8 <HAL_RCC_ClockConfig+0x160>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f003 020c 	and.w	r2, r3, #12
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d1eb      	bne.n	8002c30 <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d008      	beq.n	8002c76 <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c64:	4b18      	ldr	r3, [pc, #96]	; (8002cc8 <HAL_RCC_ClockConfig+0x160>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	4915      	ldr	r1, [pc, #84]	; (8002cc8 <HAL_RCC_ClockConfig+0x160>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d009      	beq.n	8002c96 <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c82:	4b11      	ldr	r3, [pc, #68]	; (8002cc8 <HAL_RCC_ClockConfig+0x160>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	490d      	ldr	r1, [pc, #52]	; (8002cc8 <HAL_RCC_ClockConfig+0x160>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c96:	f000 f81f 	bl	8002cd8 <HAL_RCC_GetSysClockFreq>
 8002c9a:	4601      	mov	r1, r0
 8002c9c:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <HAL_RCC_ClockConfig+0x160>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	091b      	lsrs	r3, r3, #4
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	4a09      	ldr	r2, [pc, #36]	; (8002ccc <HAL_RCC_ClockConfig+0x164>)
 8002ca8:	5cd3      	ldrb	r3, [r2, r3]
 8002caa:	fa21 f303 	lsr.w	r3, r1, r3
 8002cae:	4a08      	ldr	r2, [pc, #32]	; (8002cd0 <HAL_RCC_ClockConfig+0x168>)
 8002cb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cb2:	4b08      	ldr	r3, [pc, #32]	; (8002cd4 <HAL_RCC_ClockConfig+0x16c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fe ff74 	bl	8001ba4 <HAL_InitTick>

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	08005264 	.word	0x08005264
 8002cd0:	20000010 	.word	0x20000010
 8002cd4:	20000014 	.word	0x20000014

08002cd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd8:	b490      	push	{r4, r7}
 8002cda:	b08e      	sub	sp, #56	; 0x38
 8002cdc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002cde:	4b2b      	ldr	r3, [pc, #172]	; (8002d8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ce0:	f107 0414 	add.w	r4, r7, #20
 8002ce4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ce6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8002cea:	4b29      	ldr	r3, [pc, #164]	; (8002d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cec:	1d3c      	adds	r4, r7, #4
 8002cee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cf0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	637b      	str	r3, [r7, #52]	; 0x34
 8002d00:	2300      	movs	r3, #0
 8002d02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d08:	4b22      	ldr	r3, [pc, #136]	; (8002d94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d10:	f003 030c 	and.w	r3, r3, #12
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d002      	beq.n	8002d1e <HAL_RCC_GetSysClockFreq+0x46>
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	d003      	beq.n	8002d24 <HAL_RCC_GetSysClockFreq+0x4c>
 8002d1c:	e02c      	b.n	8002d78 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d1e:	4b1e      	ldr	r3, [pc, #120]	; (8002d98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d20:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d22:	e02c      	b.n	8002d7e <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d26:	0c9b      	lsrs	r3, r3, #18
 8002d28:	f003 030f 	and.w	r3, r3, #15
 8002d2c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002d30:	4413      	add	r3, r2
 8002d32:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d012      	beq.n	8002d68 <HAL_RCC_GetSysClockFreq+0x90>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002d42:	4b14      	ldr	r3, [pc, #80]	; (8002d94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d46:	f003 030f 	and.w	r3, r3, #15
 8002d4a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002d4e:	4413      	add	r3, r2
 8002d50:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8002d54:	62bb      	str	r3, [r7, #40]	; 0x28
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	4a0f      	ldr	r2, [pc, #60]	; (8002d98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d5a:	fb02 f203 	mul.w	r2, r2, r3
 8002d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d64:	637b      	str	r3, [r7, #52]	; 0x34
 8002d66:	e004      	b.n	8002d72 <HAL_RCC_GetSysClockFreq+0x9a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	4a0c      	ldr	r2, [pc, #48]	; (8002d9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d6c:	fb02 f303 	mul.w	r3, r2, r3
 8002d70:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 8002d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d74:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d76:	e002      	b.n	8002d7e <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d78:	4b07      	ldr	r3, [pc, #28]	; (8002d98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d7a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3738      	adds	r7, #56	; 0x38
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bc90      	pop	{r4, r7}
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	08005224 	.word	0x08005224
 8002d90:	08005234 	.word	0x08005234
 8002d94:	40021000 	.word	0x40021000
 8002d98:	007a1200 	.word	0x007a1200
 8002d9c:	003d0900 	.word	0x003d0900

08002da0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002da4:	4b02      	ldr	r3, [pc, #8]	; (8002db0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002da6:	681b      	ldr	r3, [r3, #0]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr
 8002db0:	20000010 	.word	0x20000010

08002db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002db8:	f7ff fff2 	bl	8002da0 <HAL_RCC_GetHCLKFreq>
 8002dbc:	4601      	mov	r1, r0
 8002dbe:	4b05      	ldr	r3, [pc, #20]	; (8002dd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	0a1b      	lsrs	r3, r3, #8
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	4a03      	ldr	r2, [pc, #12]	; (8002dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dca:	5cd3      	ldrb	r3, [r2, r3]
 8002dcc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	08005274 	.word	0x08005274

08002ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002de0:	f7ff ffde 	bl	8002da0 <HAL_RCC_GetHCLKFreq>
 8002de4:	4601      	mov	r1, r0
 8002de6:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	0adb      	lsrs	r3, r3, #11
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	4a03      	ldr	r2, [pc, #12]	; (8002e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002df2:	5cd3      	ldrb	r3, [r2, r3]
 8002df4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	08005274 	.word	0x08005274

08002e04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e0c:	4b0a      	ldr	r3, [pc, #40]	; (8002e38 <RCC_Delay+0x34>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a0a      	ldr	r2, [pc, #40]	; (8002e3c <RCC_Delay+0x38>)
 8002e12:	fba2 2303 	umull	r2, r3, r2, r3
 8002e16:	0a5b      	lsrs	r3, r3, #9
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	fb02 f303 	mul.w	r3, r2, r3
 8002e1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e20:	bf00      	nop
  }
  while (Delay --);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	1e5a      	subs	r2, r3, #1
 8002e26:	60fa      	str	r2, [r7, #12]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1f9      	bne.n	8002e20 <RCC_Delay+0x1c>
}
 8002e2c:	bf00      	nop
 8002e2e:	3714      	adds	r7, #20
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bc80      	pop	{r7}
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	20000010 	.word	0x20000010
 8002e3c:	10624dd3 	.word	0x10624dd3

08002e40 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	613b      	str	r3, [r7, #16]
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d07d      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e60:	4b47      	ldr	r3, [pc, #284]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10d      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e6c:	4b44      	ldr	r3, [pc, #272]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	4a43      	ldr	r2, [pc, #268]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e76:	61d3      	str	r3, [r2, #28]
 8002e78:	4b41      	ldr	r3, [pc, #260]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e80:	60bb      	str	r3, [r7, #8]
 8002e82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e84:	2301      	movs	r3, #1
 8002e86:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e88:	4b3e      	ldr	r3, [pc, #248]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d118      	bne.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e94:	4b3b      	ldr	r3, [pc, #236]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a3a      	ldr	r2, [pc, #232]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8002e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ea0:	f7fe fec2 	bl	8001c28 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea6:	e008      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea8:	f7fe febe 	bl	8001c28 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b64      	cmp	r3, #100	; 0x64
 8002eb4:	d901      	bls.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e05e      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x138>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eba:	4b32      	ldr	r3, [pc, #200]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ec6:	4b2e      	ldr	r3, [pc, #184]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ece:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d02e      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d027      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ee4:	4b26      	ldr	r3, [pc, #152]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002eee:	4b26      	ldr	r3, [pc, #152]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ef4:	4b24      	ldr	r3, [pc, #144]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002efa:	4a21      	ldr	r2, [pc, #132]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d014      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0a:	f7fe fe8d 	bl	8001c28 <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f10:	e00a      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f12:	f7fe fe89 	bl	8001c28 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e027      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x138>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f28:	4b15      	ldr	r3, [pc, #84]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0ee      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f34:	4b12      	ldr	r3, [pc, #72]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	490f      	ldr	r1, [pc, #60]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f46:	7dfb      	ldrb	r3, [r7, #23]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d105      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f4c:	4b0c      	ldr	r3, [pc, #48]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	4a0b      	ldr	r2, [pc, #44]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002f52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f56:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d008      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f64:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	4903      	ldr	r1, [pc, #12]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	604b      	str	r3, [r1, #4]
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3718      	adds	r7, #24
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40021000 	.word	0x40021000
 8002f84:	40007000 	.word	0x40007000
 8002f88:	42420440 	.word	0x42420440

08002f8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e04b      	b.n	8003036 <HAL_SPI_Init+0xaa>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d106      	bne.n	8002fbe <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f7fe fbb1 	bl	8001720 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fd4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	69db      	ldr	r3, [r3, #28]
 8003000:	431a      	orrs	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	ea42 0103 	orr.w	r1, r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	0c1a      	lsrs	r2, r3, #16
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f002 0204 	and.w	r2, r2, #4
 8003024:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b088      	sub	sp, #32
 8003042:	af00      	add	r7, sp, #0
 8003044:	60f8      	str	r0, [r7, #12]
 8003046:	60b9      	str	r1, [r7, #8]
 8003048:	603b      	str	r3, [r7, #0]
 800304a:	4613      	mov	r3, r2
 800304c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800304e:	2300      	movs	r3, #0
 8003050:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003058:	2b01      	cmp	r3, #1
 800305a:	d101      	bne.n	8003060 <HAL_SPI_Transmit+0x22>
 800305c:	2302      	movs	r3, #2
 800305e:	e11e      	b.n	800329e <HAL_SPI_Transmit+0x260>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003068:	f7fe fdde 	bl	8001c28 <HAL_GetTick>
 800306c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800306e:	88fb      	ldrh	r3, [r7, #6]
 8003070:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b01      	cmp	r3, #1
 800307c:	d002      	beq.n	8003084 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800307e:	2302      	movs	r3, #2
 8003080:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003082:	e103      	b.n	800328c <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d002      	beq.n	8003090 <HAL_SPI_Transmit+0x52>
 800308a:	88fb      	ldrh	r3, [r7, #6]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d102      	bne.n	8003096 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003094:	e0fa      	b.n	800328c <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2203      	movs	r2, #3
 800309a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	88fa      	ldrh	r2, [r7, #6]
 80030ae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	88fa      	ldrh	r2, [r7, #6]
 80030b4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030dc:	d107      	bne.n	80030ee <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f8:	2b40      	cmp	r3, #64	; 0x40
 80030fa:	d007      	beq.n	800310c <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800310a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003114:	d14b      	bne.n	80031ae <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d002      	beq.n	8003124 <HAL_SPI_Transmit+0xe6>
 800311e:	8afb      	ldrh	r3, [r7, #22]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d13e      	bne.n	80031a2 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003128:	881a      	ldrh	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003134:	1c9a      	adds	r2, r3, #2
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800313e:	b29b      	uxth	r3, r3
 8003140:	3b01      	subs	r3, #1
 8003142:	b29a      	uxth	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003148:	e02b      	b.n	80031a2 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b02      	cmp	r3, #2
 8003156:	d112      	bne.n	800317e <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315c:	881a      	ldrh	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003168:	1c9a      	adds	r2, r3, #2
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	86da      	strh	r2, [r3, #54]	; 0x36
 800317c:	e011      	b.n	80031a2 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800317e:	f7fe fd53 	bl	8001c28 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	429a      	cmp	r2, r3
 800318c:	d803      	bhi.n	8003196 <HAL_SPI_Transmit+0x158>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003194:	d102      	bne.n	800319c <HAL_SPI_Transmit+0x15e>
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d102      	bne.n	80031a2 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80031a0:	e074      	b.n	800328c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1ce      	bne.n	800314a <HAL_SPI_Transmit+0x10c>
 80031ac:	e04c      	b.n	8003248 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d002      	beq.n	80031bc <HAL_SPI_Transmit+0x17e>
 80031b6:	8afb      	ldrh	r3, [r7, #22]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d140      	bne.n	800323e <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	330c      	adds	r3, #12
 80031c6:	7812      	ldrb	r2, [r2, #0]
 80031c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031d8:	b29b      	uxth	r3, r3
 80031da:	3b01      	subs	r3, #1
 80031dc:	b29a      	uxth	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80031e2:	e02c      	b.n	800323e <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d113      	bne.n	800321a <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	330c      	adds	r3, #12
 80031fc:	7812      	ldrb	r2, [r2, #0]
 80031fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003204:	1c5a      	adds	r2, r3, #1
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800320e:	b29b      	uxth	r3, r3
 8003210:	3b01      	subs	r3, #1
 8003212:	b29a      	uxth	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	86da      	strh	r2, [r3, #54]	; 0x36
 8003218:	e011      	b.n	800323e <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800321a:	f7fe fd05 	bl	8001c28 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d803      	bhi.n	8003232 <HAL_SPI_Transmit+0x1f4>
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003230:	d102      	bne.n	8003238 <HAL_SPI_Transmit+0x1fa>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d102      	bne.n	800323e <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800323c:	e026      	b.n	800328c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003242:	b29b      	uxth	r3, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1cd      	bne.n	80031e4 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	6839      	ldr	r1, [r7, #0]
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 fa43 	bl	80036d8 <SPI_EndRxTxTransaction>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d002      	beq.n	800325e <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2220      	movs	r2, #32
 800325c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10a      	bne.n	800327c <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003266:	2300      	movs	r3, #0
 8003268:	613b      	str	r3, [r7, #16]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	613b      	str	r3, [r7, #16]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	77fb      	strb	r3, [r7, #31]
 8003288:	e000      	b.n	800328c <HAL_SPI_Transmit+0x24e>
  }

error:
 800328a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800329c:	7ffb      	ldrb	r3, [r7, #31]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3720      	adds	r7, #32
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b08c      	sub	sp, #48	; 0x30
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	60f8      	str	r0, [r7, #12]
 80032ae:	60b9      	str	r1, [r7, #8]
 80032b0:	607a      	str	r2, [r7, #4]
 80032b2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80032b4:	2301      	movs	r3, #1
 80032b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80032b8:	2300      	movs	r3, #0
 80032ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d101      	bne.n	80032cc <HAL_SPI_TransmitReceive+0x26>
 80032c8:	2302      	movs	r3, #2
 80032ca:	e18a      	b.n	80035e2 <HAL_SPI_TransmitReceive+0x33c>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032d4:	f7fe fca8 	bl	8001c28 <HAL_GetTick>
 80032d8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80032ea:	887b      	ldrh	r3, [r7, #2]
 80032ec:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80032ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d00f      	beq.n	8003316 <HAL_SPI_TransmitReceive+0x70>
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032fc:	d107      	bne.n	800330e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d103      	bne.n	800330e <HAL_SPI_TransmitReceive+0x68>
 8003306:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800330a:	2b04      	cmp	r3, #4
 800330c:	d003      	beq.n	8003316 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800330e:	2302      	movs	r3, #2
 8003310:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003314:	e15b      	b.n	80035ce <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d005      	beq.n	8003328 <HAL_SPI_TransmitReceive+0x82>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d002      	beq.n	8003328 <HAL_SPI_TransmitReceive+0x82>
 8003322:	887b      	ldrh	r3, [r7, #2]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d103      	bne.n	8003330 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800332e:	e14e      	b.n	80035ce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b04      	cmp	r3, #4
 800333a:	d003      	beq.n	8003344 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2205      	movs	r2, #5
 8003340:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	887a      	ldrh	r2, [r7, #2]
 8003354:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	887a      	ldrh	r2, [r7, #2]
 800335a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	887a      	ldrh	r2, [r7, #2]
 8003366:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	887a      	ldrh	r2, [r7, #2]
 800336c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003384:	2b40      	cmp	r3, #64	; 0x40
 8003386:	d007      	beq.n	8003398 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003396:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033a0:	d178      	bne.n	8003494 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d002      	beq.n	80033b0 <HAL_SPI_TransmitReceive+0x10a>
 80033aa:	8b7b      	ldrh	r3, [r7, #26]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d166      	bne.n	800347e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b4:	881a      	ldrh	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c0:	1c9a      	adds	r2, r3, #2
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	3b01      	subs	r3, #1
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033d4:	e053      	b.n	800347e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d11b      	bne.n	800341c <HAL_SPI_TransmitReceive+0x176>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d016      	beq.n	800341c <HAL_SPI_TransmitReceive+0x176>
 80033ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d113      	bne.n	800341c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f8:	881a      	ldrh	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003404:	1c9a      	adds	r2, r3, #2
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800340e:	b29b      	uxth	r3, r3
 8003410:	3b01      	subs	r3, #1
 8003412:	b29a      	uxth	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b01      	cmp	r3, #1
 8003428:	d119      	bne.n	800345e <HAL_SPI_TransmitReceive+0x1b8>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800342e:	b29b      	uxth	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d014      	beq.n	800345e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68da      	ldr	r2, [r3, #12]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343e:	b292      	uxth	r2, r2
 8003440:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003446:	1c9a      	adds	r2, r3, #2
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003450:	b29b      	uxth	r3, r3
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800345a:	2301      	movs	r3, #1
 800345c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800345e:	f7fe fbe3 	bl	8001c28 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800346a:	429a      	cmp	r2, r3
 800346c:	d807      	bhi.n	800347e <HAL_SPI_TransmitReceive+0x1d8>
 800346e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003474:	d003      	beq.n	800347e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800347c:	e0a7      	b.n	80035ce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003482:	b29b      	uxth	r3, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1a6      	bne.n	80033d6 <HAL_SPI_TransmitReceive+0x130>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800348c:	b29b      	uxth	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1a1      	bne.n	80033d6 <HAL_SPI_TransmitReceive+0x130>
 8003492:	e07c      	b.n	800358e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d002      	beq.n	80034a2 <HAL_SPI_TransmitReceive+0x1fc>
 800349c:	8b7b      	ldrh	r3, [r7, #26]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d16b      	bne.n	800357a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	330c      	adds	r3, #12
 80034ac:	7812      	ldrb	r2, [r2, #0]
 80034ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b4:	1c5a      	adds	r2, r3, #1
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034be:	b29b      	uxth	r3, r3
 80034c0:	3b01      	subs	r3, #1
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034c8:	e057      	b.n	800357a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d11c      	bne.n	8003512 <HAL_SPI_TransmitReceive+0x26c>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034dc:	b29b      	uxth	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d017      	beq.n	8003512 <HAL_SPI_TransmitReceive+0x26c>
 80034e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d114      	bne.n	8003512 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	330c      	adds	r3, #12
 80034f2:	7812      	ldrb	r2, [r2, #0]
 80034f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	1c5a      	adds	r2, r3, #1
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003504:	b29b      	uxth	r3, r3
 8003506:	3b01      	subs	r3, #1
 8003508:	b29a      	uxth	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800350e:	2300      	movs	r3, #0
 8003510:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b01      	cmp	r3, #1
 800351e:	d119      	bne.n	8003554 <HAL_SPI_TransmitReceive+0x2ae>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003524:	b29b      	uxth	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d014      	beq.n	8003554 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68da      	ldr	r2, [r3, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003534:	b2d2      	uxtb	r2, r2
 8003536:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353c:	1c5a      	adds	r2, r3, #1
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003546:	b29b      	uxth	r3, r3
 8003548:	3b01      	subs	r3, #1
 800354a:	b29a      	uxth	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003550:	2301      	movs	r3, #1
 8003552:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003554:	f7fe fb68 	bl	8001c28 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003560:	429a      	cmp	r2, r3
 8003562:	d803      	bhi.n	800356c <HAL_SPI_TransmitReceive+0x2c6>
 8003564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356a:	d102      	bne.n	8003572 <HAL_SPI_TransmitReceive+0x2cc>
 800356c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800356e:	2b00      	cmp	r3, #0
 8003570:	d103      	bne.n	800357a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003578:	e029      	b.n	80035ce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800357e:	b29b      	uxth	r3, r3
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1a2      	bne.n	80034ca <HAL_SPI_TransmitReceive+0x224>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003588:	b29b      	uxth	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d19d      	bne.n	80034ca <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800358e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003590:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 f8a0 	bl	80036d8 <SPI_EndRxTxTransaction>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d006      	beq.n	80035ac <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2220      	movs	r2, #32
 80035a8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80035aa:	e010      	b.n	80035ce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10b      	bne.n	80035cc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035b4:	2300      	movs	r3, #0
 80035b6:	617b      	str	r3, [r7, #20]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	617b      	str	r3, [r7, #20]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	617b      	str	r3, [r7, #20]
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	e000      	b.n	80035ce <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80035cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80035de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3730      	adds	r7, #48	; 0x30
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b083      	sub	sp, #12
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035f8:	b2db      	uxtb	r3, r3
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr

08003604 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	603b      	str	r3, [r7, #0]
 8003610:	4613      	mov	r3, r2
 8003612:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003614:	e04c      	b.n	80036b0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361c:	d048      	beq.n	80036b0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800361e:	f7fe fb03 	bl	8001c28 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	429a      	cmp	r2, r3
 800362c:	d902      	bls.n	8003634 <SPI_WaitFlagStateUntilTimeout+0x30>
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d13d      	bne.n	80036b0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003642:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800364c:	d111      	bne.n	8003672 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003656:	d004      	beq.n	8003662 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003660:	d107      	bne.n	8003672 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003670:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800367a:	d10f      	bne.n	800369c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800369a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e00f      	b.n	80036d0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	4013      	ands	r3, r2
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	429a      	cmp	r2, r3
 80036be:	bf0c      	ite	eq
 80036c0:	2301      	moveq	r3, #1
 80036c2:	2300      	movne	r3, #0
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	461a      	mov	r2, r3
 80036c8:	79fb      	ldrb	r3, [r7, #7]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d1a3      	bne.n	8003616 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af02      	add	r7, sp, #8
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	2200      	movs	r2, #0
 80036ec:	2180      	movs	r1, #128	; 0x80
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f7ff ff88 	bl	8003604 <SPI_WaitFlagStateUntilTimeout>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d007      	beq.n	800370a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fe:	f043 0220 	orr.w	r2, r3, #32
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e000      	b.n	800370c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e01d      	b.n	8003762 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d106      	bne.n	8003740 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7fe f83a 	bl	80017b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2202      	movs	r2, #2
 8003744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	3304      	adds	r3, #4
 8003750:	4619      	mov	r1, r3
 8003752:	4610      	mov	r0, r2
 8003754:	f000 fb80 	bl	8003e58 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800376a:	b480      	push	{r7}
 800376c:	b085      	sub	sp, #20
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68da      	ldr	r2, [r3, #12]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f042 0201 	orr.w	r2, r2, #1
 8003780:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2b06      	cmp	r3, #6
 8003792:	d007      	beq.n	80037a4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0201 	orr.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr

080037b0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68da      	ldr	r2, [r3, #12]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0201 	bic.w	r2, r2, #1
 80037c6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6a1a      	ldr	r2, [r3, #32]
 80037ce:	f241 1311 	movw	r3, #4369	; 0x1111
 80037d2:	4013      	ands	r3, r2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10f      	bne.n	80037f8 <HAL_TIM_Base_Stop_IT+0x48>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6a1a      	ldr	r2, [r3, #32]
 80037de:	f240 4344 	movw	r3, #1092	; 0x444
 80037e2:	4013      	ands	r3, r2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d107      	bne.n	80037f8 <HAL_TIM_Base_Stop_IT+0x48>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 0201 	bic.w	r2, r2, #1
 80037f6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	bc80      	pop	{r7}
 8003802:	4770      	bx	lr

08003804 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e01d      	b.n	8003852 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d106      	bne.n	8003830 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f815 	bl	800385a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2202      	movs	r2, #2
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3304      	adds	r3, #4
 8003840:	4619      	mov	r1, r3
 8003842:	4610      	mov	r0, r2
 8003844:	f000 fb08 	bl	8003e58 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr

0800386c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2201      	movs	r2, #1
 800387c:	6839      	ldr	r1, [r7, #0]
 800387e:	4618      	mov	r0, r3
 8003880:	f000 fddc 	bl	800443c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a1a      	ldr	r2, [pc, #104]	; (80038f4 <HAL_TIM_PWM_Start+0x88>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d00e      	beq.n	80038ac <HAL_TIM_PWM_Start+0x40>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a19      	ldr	r2, [pc, #100]	; (80038f8 <HAL_TIM_PWM_Start+0x8c>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d009      	beq.n	80038ac <HAL_TIM_PWM_Start+0x40>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a17      	ldr	r2, [pc, #92]	; (80038fc <HAL_TIM_PWM_Start+0x90>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d004      	beq.n	80038ac <HAL_TIM_PWM_Start+0x40>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a16      	ldr	r2, [pc, #88]	; (8003900 <HAL_TIM_PWM_Start+0x94>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d101      	bne.n	80038b0 <HAL_TIM_PWM_Start+0x44>
 80038ac:	2301      	movs	r3, #1
 80038ae:	e000      	b.n	80038b2 <HAL_TIM_PWM_Start+0x46>
 80038b0:	2300      	movs	r3, #0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d007      	beq.n	80038c6 <HAL_TIM_PWM_Start+0x5a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2b06      	cmp	r3, #6
 80038d6:	d007      	beq.n	80038e8 <HAL_TIM_PWM_Start+0x7c>
  {
    __HAL_TIM_ENABLE(htim);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f042 0201 	orr.w	r2, r2, #1
 80038e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	40012c00 	.word	0x40012c00
 80038f8:	40014000 	.word	0x40014000
 80038fc:	40014400 	.word	0x40014400
 8003900:	40014800 	.word	0x40014800

08003904 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b02      	cmp	r3, #2
 8003918:	d122      	bne.n	8003960 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b02      	cmp	r3, #2
 8003926:	d11b      	bne.n	8003960 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f06f 0202 	mvn.w	r2, #2
 8003930:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 fa6a 	bl	8003e20 <HAL_TIM_IC_CaptureCallback>
 800394c:	e005      	b.n	800395a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 fa5d 	bl	8003e0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 fa6c 	bl	8003e32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f003 0304 	and.w	r3, r3, #4
 800396a:	2b04      	cmp	r3, #4
 800396c:	d122      	bne.n	80039b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b04      	cmp	r3, #4
 800397a:	d11b      	bne.n	80039b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f06f 0204 	mvn.w	r2, #4
 8003984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2202      	movs	r2, #2
 800398a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 fa40 	bl	8003e20 <HAL_TIM_IC_CaptureCallback>
 80039a0:	e005      	b.n	80039ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 fa33 	bl	8003e0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 fa42 	bl	8003e32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d122      	bne.n	8003a08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f003 0308 	and.w	r3, r3, #8
 80039cc:	2b08      	cmp	r3, #8
 80039ce:	d11b      	bne.n	8003a08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f06f 0208 	mvn.w	r2, #8
 80039d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2204      	movs	r2, #4
 80039de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	f003 0303 	and.w	r3, r3, #3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 fa16 	bl	8003e20 <HAL_TIM_IC_CaptureCallback>
 80039f4:	e005      	b.n	8003a02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 fa09 	bl	8003e0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 fa18 	bl	8003e32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f003 0310 	and.w	r3, r3, #16
 8003a12:	2b10      	cmp	r3, #16
 8003a14:	d122      	bne.n	8003a5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f003 0310 	and.w	r3, r3, #16
 8003a20:	2b10      	cmp	r3, #16
 8003a22:	d11b      	bne.n	8003a5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f06f 0210 	mvn.w	r2, #16
 8003a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2208      	movs	r2, #8
 8003a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f9ec 	bl	8003e20 <HAL_TIM_IC_CaptureCallback>
 8003a48:	e005      	b.n	8003a56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f9df 	bl	8003e0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f9ee 	bl	8003e32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d10e      	bne.n	8003a88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d107      	bne.n	8003a88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f06f 0201 	mvn.w	r2, #1
 8003a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7fc fc4e 	bl	8000324 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a92:	2b80      	cmp	r3, #128	; 0x80
 8003a94:	d10e      	bne.n	8003ab4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa0:	2b80      	cmp	r3, #128	; 0x80
 8003aa2:	d107      	bne.n	8003ab4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 fd35 	bl	800451e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003abe:	2b40      	cmp	r3, #64	; 0x40
 8003ac0:	d10e      	bne.n	8003ae0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003acc:	2b40      	cmp	r3, #64	; 0x40
 8003ace:	d107      	bne.n	8003ae0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f9b2 	bl	8003e44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	f003 0320 	and.w	r3, r3, #32
 8003aea:	2b20      	cmp	r3, #32
 8003aec:	d10e      	bne.n	8003b0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f003 0320 	and.w	r3, r3, #32
 8003af8:	2b20      	cmp	r3, #32
 8003afa:	d107      	bne.n	8003b0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f06f 0220 	mvn.w	r2, #32
 8003b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 fd00 	bl	800450c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b0c:	bf00      	nop
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d101      	bne.n	8003b2e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	e0b4      	b.n	8003c98 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b0c      	cmp	r3, #12
 8003b42:	f200 809f 	bhi.w	8003c84 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003b46:	a201      	add	r2, pc, #4	; (adr r2, 8003b4c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4c:	08003b81 	.word	0x08003b81
 8003b50:	08003c85 	.word	0x08003c85
 8003b54:	08003c85 	.word	0x08003c85
 8003b58:	08003c85 	.word	0x08003c85
 8003b5c:	08003bc1 	.word	0x08003bc1
 8003b60:	08003c85 	.word	0x08003c85
 8003b64:	08003c85 	.word	0x08003c85
 8003b68:	08003c85 	.word	0x08003c85
 8003b6c:	08003c03 	.word	0x08003c03
 8003b70:	08003c85 	.word	0x08003c85
 8003b74:	08003c85 	.word	0x08003c85
 8003b78:	08003c85 	.word	0x08003c85
 8003b7c:	08003c43 	.word	0x08003c43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68b9      	ldr	r1, [r7, #8]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 f9e6 	bl	8003f58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	699a      	ldr	r2, [r3, #24]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 0208 	orr.w	r2, r2, #8
 8003b9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699a      	ldr	r2, [r3, #24]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 0204 	bic.w	r2, r2, #4
 8003baa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6999      	ldr	r1, [r3, #24]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	691a      	ldr	r2, [r3, #16]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	619a      	str	r2, [r3, #24]
      break;
 8003bbe:	e062      	b.n	8003c86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68b9      	ldr	r1, [r7, #8]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 fa4a 	bl	8004060 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	699a      	ldr	r2, [r3, #24]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699a      	ldr	r2, [r3, #24]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6999      	ldr	r1, [r3, #24]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	021a      	lsls	r2, r3, #8
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	619a      	str	r2, [r3, #24]
      break;
 8003c00:	e041      	b.n	8003c86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68b9      	ldr	r1, [r7, #8]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 faa5 	bl	8004158 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	69da      	ldr	r2, [r3, #28]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f042 0208 	orr.w	r2, r2, #8
 8003c1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	69da      	ldr	r2, [r3, #28]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0204 	bic.w	r2, r2, #4
 8003c2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	69d9      	ldr	r1, [r3, #28]
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	691a      	ldr	r2, [r3, #16]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	61da      	str	r2, [r3, #28]
      break;
 8003c40:	e021      	b.n	8003c86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68b9      	ldr	r1, [r7, #8]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 fb01 	bl	8004250 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	69da      	ldr	r2, [r3, #28]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	69da      	ldr	r2, [r3, #28]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	69d9      	ldr	r1, [r3, #28]
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	021a      	lsls	r2, r3, #8
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	61da      	str	r2, [r3, #28]
      break;
 8003c82:	e000      	b.n	8003c86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003c84:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d101      	bne.n	8003cb8 <HAL_TIM_ConfigClockSource+0x18>
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	e0a6      	b.n	8003e06 <HAL_TIM_ConfigClockSource+0x166>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003cd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cde:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b40      	cmp	r3, #64	; 0x40
 8003cee:	d067      	beq.n	8003dc0 <HAL_TIM_ConfigClockSource+0x120>
 8003cf0:	2b40      	cmp	r3, #64	; 0x40
 8003cf2:	d80b      	bhi.n	8003d0c <HAL_TIM_ConfigClockSource+0x6c>
 8003cf4:	2b10      	cmp	r3, #16
 8003cf6:	d073      	beq.n	8003de0 <HAL_TIM_ConfigClockSource+0x140>
 8003cf8:	2b10      	cmp	r3, #16
 8003cfa:	d802      	bhi.n	8003d02 <HAL_TIM_ConfigClockSource+0x62>
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d06f      	beq.n	8003de0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003d00:	e078      	b.n	8003df4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d02:	2b20      	cmp	r3, #32
 8003d04:	d06c      	beq.n	8003de0 <HAL_TIM_ConfigClockSource+0x140>
 8003d06:	2b30      	cmp	r3, #48	; 0x30
 8003d08:	d06a      	beq.n	8003de0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003d0a:	e073      	b.n	8003df4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d0c:	2b70      	cmp	r3, #112	; 0x70
 8003d0e:	d00d      	beq.n	8003d2c <HAL_TIM_ConfigClockSource+0x8c>
 8003d10:	2b70      	cmp	r3, #112	; 0x70
 8003d12:	d804      	bhi.n	8003d1e <HAL_TIM_ConfigClockSource+0x7e>
 8003d14:	2b50      	cmp	r3, #80	; 0x50
 8003d16:	d033      	beq.n	8003d80 <HAL_TIM_ConfigClockSource+0xe0>
 8003d18:	2b60      	cmp	r3, #96	; 0x60
 8003d1a:	d041      	beq.n	8003da0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003d1c:	e06a      	b.n	8003df4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d22:	d066      	beq.n	8003df2 <HAL_TIM_ConfigClockSource+0x152>
 8003d24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d28:	d017      	beq.n	8003d5a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003d2a:	e063      	b.n	8003df4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6818      	ldr	r0, [r3, #0]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	6899      	ldr	r1, [r3, #8]
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f000 fb5f 	bl	80043fe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d4e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	609a      	str	r2, [r3, #8]
      break;
 8003d58:	e04c      	b.n	8003df4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6818      	ldr	r0, [r3, #0]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	6899      	ldr	r1, [r3, #8]
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	f000 fb48 	bl	80043fe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d7c:	609a      	str	r2, [r3, #8]
      break;
 8003d7e:	e039      	b.n	8003df4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6818      	ldr	r0, [r3, #0]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	6859      	ldr	r1, [r3, #4]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	f000 fabf 	bl	8004310 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2150      	movs	r1, #80	; 0x50
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 fb16 	bl	80043ca <TIM_ITRx_SetConfig>
      break;
 8003d9e:	e029      	b.n	8003df4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6818      	ldr	r0, [r3, #0]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	6859      	ldr	r1, [r3, #4]
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	461a      	mov	r2, r3
 8003dae:	f000 fadd 	bl	800436c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2160      	movs	r1, #96	; 0x60
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 fb06 	bl	80043ca <TIM_ITRx_SetConfig>
      break;
 8003dbe:	e019      	b.n	8003df4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6818      	ldr	r0, [r3, #0]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	6859      	ldr	r1, [r3, #4]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	461a      	mov	r2, r3
 8003dce:	f000 fa9f 	bl	8004310 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2140      	movs	r1, #64	; 0x40
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f000 faf6 	bl	80043ca <TIM_ITRx_SetConfig>
      break;
 8003dde:	e009      	b.n	8003df4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4619      	mov	r1, r3
 8003dea:	4610      	mov	r0, r2
 8003dec:	f000 faed 	bl	80043ca <TIM_ITRx_SetConfig>
      break;
 8003df0:	e000      	b.n	8003df4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003df2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e16:	bf00      	nop
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bc80      	pop	{r7}
 8003e1e:	4770      	bx	lr

08003e20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bc80      	pop	{r7}
 8003e30:	4770      	bx	lr

08003e32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b083      	sub	sp, #12
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bc80      	pop	{r7}
 8003e42:	4770      	bx	lr

08003e44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bc80      	pop	{r7}
 8003e54:	4770      	bx	lr
	...

08003e58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a35      	ldr	r2, [pc, #212]	; (8003f40 <TIM_Base_SetConfig+0xe8>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d00b      	beq.n	8003e88 <TIM_Base_SetConfig+0x30>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e76:	d007      	beq.n	8003e88 <TIM_Base_SetConfig+0x30>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a32      	ldr	r2, [pc, #200]	; (8003f44 <TIM_Base_SetConfig+0xec>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d003      	beq.n	8003e88 <TIM_Base_SetConfig+0x30>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a31      	ldr	r2, [pc, #196]	; (8003f48 <TIM_Base_SetConfig+0xf0>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d108      	bne.n	8003e9a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a28      	ldr	r2, [pc, #160]	; (8003f40 <TIM_Base_SetConfig+0xe8>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d017      	beq.n	8003ed2 <TIM_Base_SetConfig+0x7a>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea8:	d013      	beq.n	8003ed2 <TIM_Base_SetConfig+0x7a>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a25      	ldr	r2, [pc, #148]	; (8003f44 <TIM_Base_SetConfig+0xec>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d00f      	beq.n	8003ed2 <TIM_Base_SetConfig+0x7a>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a24      	ldr	r2, [pc, #144]	; (8003f48 <TIM_Base_SetConfig+0xf0>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d00b      	beq.n	8003ed2 <TIM_Base_SetConfig+0x7a>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a23      	ldr	r2, [pc, #140]	; (8003f4c <TIM_Base_SetConfig+0xf4>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d007      	beq.n	8003ed2 <TIM_Base_SetConfig+0x7a>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a22      	ldr	r2, [pc, #136]	; (8003f50 <TIM_Base_SetConfig+0xf8>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d003      	beq.n	8003ed2 <TIM_Base_SetConfig+0x7a>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a21      	ldr	r2, [pc, #132]	; (8003f54 <TIM_Base_SetConfig+0xfc>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d108      	bne.n	8003ee4 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ed8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	689a      	ldr	r2, [r3, #8]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a0d      	ldr	r2, [pc, #52]	; (8003f40 <TIM_Base_SetConfig+0xe8>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d00b      	beq.n	8003f28 <TIM_Base_SetConfig+0xd0>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a0e      	ldr	r2, [pc, #56]	; (8003f4c <TIM_Base_SetConfig+0xf4>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d007      	beq.n	8003f28 <TIM_Base_SetConfig+0xd0>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a0d      	ldr	r2, [pc, #52]	; (8003f50 <TIM_Base_SetConfig+0xf8>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d003      	beq.n	8003f28 <TIM_Base_SetConfig+0xd0>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a0c      	ldr	r2, [pc, #48]	; (8003f54 <TIM_Base_SetConfig+0xfc>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d103      	bne.n	8003f30 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	691a      	ldr	r2, [r3, #16]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	615a      	str	r2, [r3, #20]
}
 8003f36:	bf00      	nop
 8003f38:	3714      	adds	r7, #20
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bc80      	pop	{r7}
 8003f3e:	4770      	bx	lr
 8003f40:	40012c00 	.word	0x40012c00
 8003f44:	40000400 	.word	0x40000400
 8003f48:	40000800 	.word	0x40000800
 8003f4c:	40014000 	.word	0x40014000
 8003f50:	40014400 	.word	0x40014400
 8003f54:	40014800 	.word	0x40014800

08003f58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b087      	sub	sp, #28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	f023 0201 	bic.w	r2, r3, #1
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f023 0303 	bic.w	r3, r3, #3
 8003f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f023 0302 	bic.w	r3, r3, #2
 8003fa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a28      	ldr	r2, [pc, #160]	; (8004050 <TIM_OC1_SetConfig+0xf8>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d00b      	beq.n	8003fcc <TIM_OC1_SetConfig+0x74>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a27      	ldr	r2, [pc, #156]	; (8004054 <TIM_OC1_SetConfig+0xfc>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d007      	beq.n	8003fcc <TIM_OC1_SetConfig+0x74>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a26      	ldr	r2, [pc, #152]	; (8004058 <TIM_OC1_SetConfig+0x100>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d003      	beq.n	8003fcc <TIM_OC1_SetConfig+0x74>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a25      	ldr	r2, [pc, #148]	; (800405c <TIM_OC1_SetConfig+0x104>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d10c      	bne.n	8003fe6 <TIM_OC1_SetConfig+0x8e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	f023 0308 	bic.w	r3, r3, #8
 8003fd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f023 0304 	bic.w	r3, r3, #4
 8003fe4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a19      	ldr	r2, [pc, #100]	; (8004050 <TIM_OC1_SetConfig+0xf8>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d00b      	beq.n	8004006 <TIM_OC1_SetConfig+0xae>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a18      	ldr	r2, [pc, #96]	; (8004054 <TIM_OC1_SetConfig+0xfc>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d007      	beq.n	8004006 <TIM_OC1_SetConfig+0xae>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a17      	ldr	r2, [pc, #92]	; (8004058 <TIM_OC1_SetConfig+0x100>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d003      	beq.n	8004006 <TIM_OC1_SetConfig+0xae>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a16      	ldr	r2, [pc, #88]	; (800405c <TIM_OC1_SetConfig+0x104>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d111      	bne.n	800402a <TIM_OC1_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800400c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004014:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	4313      	orrs	r3, r2
 800401e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	4313      	orrs	r3, r2
 8004028:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	621a      	str	r2, [r3, #32]
}
 8004044:	bf00      	nop
 8004046:	371c      	adds	r7, #28
 8004048:	46bd      	mov	sp, r7
 800404a:	bc80      	pop	{r7}
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	40012c00 	.word	0x40012c00
 8004054:	40014000 	.word	0x40014000
 8004058:	40014400 	.word	0x40014400
 800405c:	40014800 	.word	0x40014800

08004060 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004060:	b480      	push	{r7}
 8004062:	b087      	sub	sp, #28
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	f023 0210 	bic.w	r2, r3, #16
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800408e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004096:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	021b      	lsls	r3, r3, #8
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f023 0320 	bic.w	r3, r3, #32
 80040aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	011b      	lsls	r3, r3, #4
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a23      	ldr	r2, [pc, #140]	; (8004148 <TIM_OC2_SetConfig+0xe8>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d10d      	bne.n	80040dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	011b      	lsls	r3, r3, #4
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a1a      	ldr	r2, [pc, #104]	; (8004148 <TIM_OC2_SetConfig+0xe8>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d00b      	beq.n	80040fc <TIM_OC2_SetConfig+0x9c>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a19      	ldr	r2, [pc, #100]	; (800414c <TIM_OC2_SetConfig+0xec>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d007      	beq.n	80040fc <TIM_OC2_SetConfig+0x9c>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a18      	ldr	r2, [pc, #96]	; (8004150 <TIM_OC2_SetConfig+0xf0>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d003      	beq.n	80040fc <TIM_OC2_SetConfig+0x9c>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a17      	ldr	r2, [pc, #92]	; (8004154 <TIM_OC2_SetConfig+0xf4>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d113      	bne.n	8004124 <TIM_OC2_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004102:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800410a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	4313      	orrs	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	4313      	orrs	r3, r2
 8004122:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	621a      	str	r2, [r3, #32]
}
 800413e:	bf00      	nop
 8004140:	371c      	adds	r7, #28
 8004142:	46bd      	mov	sp, r7
 8004144:	bc80      	pop	{r7}
 8004146:	4770      	bx	lr
 8004148:	40012c00 	.word	0x40012c00
 800414c:	40014000 	.word	0x40014000
 8004150:	40014400 	.word	0x40014400
 8004154:	40014800 	.word	0x40014800

08004158 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004158:	b480      	push	{r7}
 800415a:	b087      	sub	sp, #28
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f023 0303 	bic.w	r3, r3, #3
 800418e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	4313      	orrs	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	021b      	lsls	r3, r3, #8
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a23      	ldr	r2, [pc, #140]	; (8004240 <TIM_OC3_SetConfig+0xe8>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d10d      	bne.n	80041d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	021b      	lsls	r3, r3, #8
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a1a      	ldr	r2, [pc, #104]	; (8004240 <TIM_OC3_SetConfig+0xe8>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d00b      	beq.n	80041f2 <TIM_OC3_SetConfig+0x9a>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a19      	ldr	r2, [pc, #100]	; (8004244 <TIM_OC3_SetConfig+0xec>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d007      	beq.n	80041f2 <TIM_OC3_SetConfig+0x9a>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a18      	ldr	r2, [pc, #96]	; (8004248 <TIM_OC3_SetConfig+0xf0>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d003      	beq.n	80041f2 <TIM_OC3_SetConfig+0x9a>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a17      	ldr	r2, [pc, #92]	; (800424c <TIM_OC3_SetConfig+0xf4>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d113      	bne.n	800421a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004200:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	011b      	lsls	r3, r3, #4
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4313      	orrs	r3, r2
 800420c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	011b      	lsls	r3, r3, #4
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	4313      	orrs	r3, r2
 8004218:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	621a      	str	r2, [r3, #32]
}
 8004234:	bf00      	nop
 8004236:	371c      	adds	r7, #28
 8004238:	46bd      	mov	sp, r7
 800423a:	bc80      	pop	{r7}
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	40012c00 	.word	0x40012c00
 8004244:	40014000 	.word	0x40014000
 8004248:	40014400 	.word	0x40014400
 800424c:	40014800 	.word	0x40014800

08004250 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004250:	b480      	push	{r7}
 8004252:	b087      	sub	sp, #28
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	69db      	ldr	r3, [r3, #28]
 8004276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800427e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004286:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	021b      	lsls	r3, r3, #8
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	4313      	orrs	r3, r2
 8004292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800429a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	031b      	lsls	r3, r3, #12
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a15      	ldr	r2, [pc, #84]	; (8004300 <TIM_OC4_SetConfig+0xb0>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d00b      	beq.n	80042c8 <TIM_OC4_SetConfig+0x78>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a14      	ldr	r2, [pc, #80]	; (8004304 <TIM_OC4_SetConfig+0xb4>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d007      	beq.n	80042c8 <TIM_OC4_SetConfig+0x78>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a13      	ldr	r2, [pc, #76]	; (8004308 <TIM_OC4_SetConfig+0xb8>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d003      	beq.n	80042c8 <TIM_OC4_SetConfig+0x78>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a12      	ldr	r2, [pc, #72]	; (800430c <TIM_OC4_SetConfig+0xbc>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d109      	bne.n	80042dc <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	019b      	lsls	r3, r3, #6
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	4313      	orrs	r3, r2
 80042da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	621a      	str	r2, [r3, #32]
}
 80042f6:	bf00      	nop
 80042f8:	371c      	adds	r7, #28
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bc80      	pop	{r7}
 80042fe:	4770      	bx	lr
 8004300:	40012c00 	.word	0x40012c00
 8004304:	40014000 	.word	0x40014000
 8004308:	40014400 	.word	0x40014400
 800430c:	40014800 	.word	0x40014800

08004310 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004310:	b480      	push	{r7}
 8004312:	b087      	sub	sp, #28
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	f023 0201 	bic.w	r2, r3, #1
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800433a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	011b      	lsls	r3, r3, #4
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	4313      	orrs	r3, r2
 8004344:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f023 030a 	bic.w	r3, r3, #10
 800434c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	4313      	orrs	r3, r2
 8004354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	621a      	str	r2, [r3, #32]
}
 8004362:	bf00      	nop
 8004364:	371c      	adds	r7, #28
 8004366:	46bd      	mov	sp, r7
 8004368:	bc80      	pop	{r7}
 800436a:	4770      	bx	lr

0800436c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800436c:	b480      	push	{r7}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	f023 0210 	bic.w	r2, r3, #16
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004396:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	031b      	lsls	r3, r3, #12
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	4313      	orrs	r3, r2
 80043a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	011b      	lsls	r3, r3, #4
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	621a      	str	r2, [r3, #32]
}
 80043c0:	bf00      	nop
 80043c2:	371c      	adds	r7, #28
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bc80      	pop	{r7}
 80043c8:	4770      	bx	lr

080043ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043ca:	b480      	push	{r7}
 80043cc:	b085      	sub	sp, #20
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
 80043d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	f043 0307 	orr.w	r3, r3, #7
 80043ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	609a      	str	r2, [r3, #8]
}
 80043f4:	bf00      	nop
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bc80      	pop	{r7}
 80043fc:	4770      	bx	lr

080043fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043fe:	b480      	push	{r7}
 8004400:	b087      	sub	sp, #28
 8004402:	af00      	add	r7, sp, #0
 8004404:	60f8      	str	r0, [r7, #12]
 8004406:	60b9      	str	r1, [r7, #8]
 8004408:	607a      	str	r2, [r7, #4]
 800440a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004418:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	021a      	lsls	r2, r3, #8
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	431a      	orrs	r2, r3
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	4313      	orrs	r3, r2
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	4313      	orrs	r3, r2
 800442a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	609a      	str	r2, [r3, #8]
}
 8004432:	bf00      	nop
 8004434:	371c      	adds	r7, #28
 8004436:	46bd      	mov	sp, r7
 8004438:	bc80      	pop	{r7}
 800443a:	4770      	bx	lr

0800443c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800443c:	b480      	push	{r7}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	f003 031f 	and.w	r3, r3, #31
 800444e:	2201      	movs	r2, #1
 8004450:	fa02 f303 	lsl.w	r3, r2, r3
 8004454:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6a1a      	ldr	r2, [r3, #32]
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	43db      	mvns	r3, r3
 800445e:	401a      	ands	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a1a      	ldr	r2, [r3, #32]
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	f003 031f 	and.w	r3, r3, #31
 800446e:	6879      	ldr	r1, [r7, #4]
 8004470:	fa01 f303 	lsl.w	r3, r1, r3
 8004474:	431a      	orrs	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	621a      	str	r2, [r3, #32]
}
 800447a:	bf00      	nop
 800447c:	371c      	adds	r7, #28
 800447e:	46bd      	mov	sp, r7
 8004480:	bc80      	pop	{r7}
 8004482:	4770      	bx	lr

08004484 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004494:	2b01      	cmp	r3, #1
 8004496:	d101      	bne.n	800449c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004498:	2302      	movs	r3, #2
 800449a:	e032      	b.n	8004502 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2202      	movs	r2, #2
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044d4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	68ba      	ldr	r2, [r7, #8]
 80044dc:	4313      	orrs	r3, r2
 80044de:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3714      	adds	r7, #20
 8004506:	46bd      	mov	sp, r7
 8004508:	bc80      	pop	{r7}
 800450a:	4770      	bx	lr

0800450c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	bc80      	pop	{r7}
 800451c:	4770      	bx	lr

0800451e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800451e:	b480      	push	{r7}
 8004520:	b083      	sub	sp, #12
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	bc80      	pop	{r7}
 800452e:	4770      	bx	lr

08004530 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e03f      	b.n	80045c2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d106      	bne.n	800455c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7fd f9e2 	bl	8001920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2224      	movs	r2, #36	; 0x24
 8004560:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68da      	ldr	r2, [r3, #12]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004572:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f829 	bl	80045cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	691a      	ldr	r2, [r3, #16]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004588:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	695a      	ldr	r2, [r3, #20]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004598:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68da      	ldr	r2, [r3, #12]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2220      	movs	r2, #32
 80045b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2220      	movs	r2, #32
 80045bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
	...

080045cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68da      	ldr	r2, [r3, #12]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	611a      	str	r2, [r3, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

#if defined(USART_CR1_OVER8)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689a      	ldr	r2, [r3, #8]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	431a      	orrs	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	695b      	ldr	r3, [r3, #20]
 80045f8:	431a      	orrs	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	4313      	orrs	r3, r2
 8004600:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800460c:	f023 030c 	bic.w	r3, r3, #12
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6812      	ldr	r2, [r2, #0]
 8004614:	68f9      	ldr	r1, [r7, #12]
 8004616:	430b      	orrs	r3, r1
 8004618:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	699a      	ldr	r2, [r3, #24]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	430a      	orrs	r2, r1
 800462e:	615a      	str	r2, [r3, #20]

#if defined(USART_CR1_OVER8)
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004638:	f040 80a5 	bne.w	8004786 <UART_SetConfig+0x1ba>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if(huart->Instance == USART1)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4aa4      	ldr	r2, [pc, #656]	; (80048d4 <UART_SetConfig+0x308>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d14f      	bne.n	80046e6 <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004646:	f7fe fbc9 	bl	8002ddc <HAL_RCC_GetPCLK2Freq>
 800464a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	4613      	mov	r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4413      	add	r3, r2
 8004654:	009a      	lsls	r2, r3, #2
 8004656:	441a      	add	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004662:	4a9d      	ldr	r2, [pc, #628]	; (80048d8 <UART_SetConfig+0x30c>)
 8004664:	fba2 2303 	umull	r2, r3, r2, r3
 8004668:	095b      	lsrs	r3, r3, #5
 800466a:	0119      	lsls	r1, r3, #4
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	4613      	mov	r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4413      	add	r3, r2
 8004674:	009a      	lsls	r2, r3, #2
 8004676:	441a      	add	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004682:	4b95      	ldr	r3, [pc, #596]	; (80048d8 <UART_SetConfig+0x30c>)
 8004684:	fba3 0302 	umull	r0, r3, r3, r2
 8004688:	095b      	lsrs	r3, r3, #5
 800468a:	2064      	movs	r0, #100	; 0x64
 800468c:	fb00 f303 	mul.w	r3, r0, r3
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	3332      	adds	r3, #50	; 0x32
 8004696:	4a90      	ldr	r2, [pc, #576]	; (80048d8 <UART_SetConfig+0x30c>)
 8004698:	fba2 2303 	umull	r2, r3, r2, r3
 800469c:	095b      	lsrs	r3, r3, #5
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046a4:	4419      	add	r1, r3
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	4613      	mov	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	009a      	lsls	r2, r3, #2
 80046b0:	441a      	add	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80046bc:	4b86      	ldr	r3, [pc, #536]	; (80048d8 <UART_SetConfig+0x30c>)
 80046be:	fba3 0302 	umull	r0, r3, r3, r2
 80046c2:	095b      	lsrs	r3, r3, #5
 80046c4:	2064      	movs	r0, #100	; 0x64
 80046c6:	fb00 f303 	mul.w	r3, r0, r3
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	00db      	lsls	r3, r3, #3
 80046ce:	3332      	adds	r3, #50	; 0x32
 80046d0:	4a81      	ldr	r2, [pc, #516]	; (80048d8 <UART_SetConfig+0x30c>)
 80046d2:	fba2 2303 	umull	r2, r3, r2, r3
 80046d6:	095b      	lsrs	r3, r3, #5
 80046d8:	f003 0207 	and.w	r2, r3, #7
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	440a      	add	r2, r1
 80046e2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80046e4:	e0f1      	b.n	80048ca <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 80046e6:	f7fe fb65 	bl	8002db4 <HAL_RCC_GetPCLK1Freq>
 80046ea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	4613      	mov	r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	4413      	add	r3, r2
 80046f4:	009a      	lsls	r2, r3, #2
 80046f6:	441a      	add	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004702:	4a75      	ldr	r2, [pc, #468]	; (80048d8 <UART_SetConfig+0x30c>)
 8004704:	fba2 2303 	umull	r2, r3, r2, r3
 8004708:	095b      	lsrs	r3, r3, #5
 800470a:	0119      	lsls	r1, r3, #4
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	4613      	mov	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4413      	add	r3, r2
 8004714:	009a      	lsls	r2, r3, #2
 8004716:	441a      	add	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004722:	4b6d      	ldr	r3, [pc, #436]	; (80048d8 <UART_SetConfig+0x30c>)
 8004724:	fba3 0302 	umull	r0, r3, r3, r2
 8004728:	095b      	lsrs	r3, r3, #5
 800472a:	2064      	movs	r0, #100	; 0x64
 800472c:	fb00 f303 	mul.w	r3, r0, r3
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	3332      	adds	r3, #50	; 0x32
 8004736:	4a68      	ldr	r2, [pc, #416]	; (80048d8 <UART_SetConfig+0x30c>)
 8004738:	fba2 2303 	umull	r2, r3, r2, r3
 800473c:	095b      	lsrs	r3, r3, #5
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004744:	4419      	add	r1, r3
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	4613      	mov	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	009a      	lsls	r2, r3, #2
 8004750:	441a      	add	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	005b      	lsls	r3, r3, #1
 8004758:	fbb2 f2f3 	udiv	r2, r2, r3
 800475c:	4b5e      	ldr	r3, [pc, #376]	; (80048d8 <UART_SetConfig+0x30c>)
 800475e:	fba3 0302 	umull	r0, r3, r3, r2
 8004762:	095b      	lsrs	r3, r3, #5
 8004764:	2064      	movs	r0, #100	; 0x64
 8004766:	fb00 f303 	mul.w	r3, r0, r3
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	00db      	lsls	r3, r3, #3
 800476e:	3332      	adds	r3, #50	; 0x32
 8004770:	4a59      	ldr	r2, [pc, #356]	; (80048d8 <UART_SetConfig+0x30c>)
 8004772:	fba2 2303 	umull	r2, r3, r2, r3
 8004776:	095b      	lsrs	r3, r3, #5
 8004778:	f003 0207 	and.w	r2, r3, #7
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	440a      	add	r2, r1
 8004782:	609a      	str	r2, [r3, #8]
}
 8004784:	e0a1      	b.n	80048ca <UART_SetConfig+0x2fe>
    if(huart->Instance == USART1)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a52      	ldr	r2, [pc, #328]	; (80048d4 <UART_SetConfig+0x308>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d14e      	bne.n	800482e <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004790:	f7fe fb24 	bl	8002ddc <HAL_RCC_GetPCLK2Freq>
 8004794:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004796:	68ba      	ldr	r2, [r7, #8]
 8004798:	4613      	mov	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	009a      	lsls	r2, r3, #2
 80047a0:	441a      	add	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ac:	4a4a      	ldr	r2, [pc, #296]	; (80048d8 <UART_SetConfig+0x30c>)
 80047ae:	fba2 2303 	umull	r2, r3, r2, r3
 80047b2:	095b      	lsrs	r3, r3, #5
 80047b4:	0119      	lsls	r1, r3, #4
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	4613      	mov	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4413      	add	r3, r2
 80047be:	009a      	lsls	r2, r3, #2
 80047c0:	441a      	add	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80047cc:	4b42      	ldr	r3, [pc, #264]	; (80048d8 <UART_SetConfig+0x30c>)
 80047ce:	fba3 0302 	umull	r0, r3, r3, r2
 80047d2:	095b      	lsrs	r3, r3, #5
 80047d4:	2064      	movs	r0, #100	; 0x64
 80047d6:	fb00 f303 	mul.w	r3, r0, r3
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	011b      	lsls	r3, r3, #4
 80047de:	3332      	adds	r3, #50	; 0x32
 80047e0:	4a3d      	ldr	r2, [pc, #244]	; (80048d8 <UART_SetConfig+0x30c>)
 80047e2:	fba2 2303 	umull	r2, r3, r2, r3
 80047e6:	095b      	lsrs	r3, r3, #5
 80047e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047ec:	4419      	add	r1, r3
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	4613      	mov	r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4413      	add	r3, r2
 80047f6:	009a      	lsls	r2, r3, #2
 80047f8:	441a      	add	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	fbb2 f2f3 	udiv	r2, r2, r3
 8004804:	4b34      	ldr	r3, [pc, #208]	; (80048d8 <UART_SetConfig+0x30c>)
 8004806:	fba3 0302 	umull	r0, r3, r3, r2
 800480a:	095b      	lsrs	r3, r3, #5
 800480c:	2064      	movs	r0, #100	; 0x64
 800480e:	fb00 f303 	mul.w	r3, r0, r3
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	011b      	lsls	r3, r3, #4
 8004816:	3332      	adds	r3, #50	; 0x32
 8004818:	4a2f      	ldr	r2, [pc, #188]	; (80048d8 <UART_SetConfig+0x30c>)
 800481a:	fba2 2303 	umull	r2, r3, r2, r3
 800481e:	095b      	lsrs	r3, r3, #5
 8004820:	f003 020f 	and.w	r2, r3, #15
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	440a      	add	r2, r1
 800482a:	609a      	str	r2, [r3, #8]
}
 800482c:	e04d      	b.n	80048ca <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 800482e:	f7fe fac1 	bl	8002db4 <HAL_RCC_GetPCLK1Freq>
 8004832:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	4613      	mov	r3, r2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	4413      	add	r3, r2
 800483c:	009a      	lsls	r2, r3, #2
 800483e:	441a      	add	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	fbb2 f3f3 	udiv	r3, r2, r3
 800484a:	4a23      	ldr	r2, [pc, #140]	; (80048d8 <UART_SetConfig+0x30c>)
 800484c:	fba2 2303 	umull	r2, r3, r2, r3
 8004850:	095b      	lsrs	r3, r3, #5
 8004852:	0119      	lsls	r1, r3, #4
 8004854:	68ba      	ldr	r2, [r7, #8]
 8004856:	4613      	mov	r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	4413      	add	r3, r2
 800485c:	009a      	lsls	r2, r3, #2
 800485e:	441a      	add	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	fbb2 f2f3 	udiv	r2, r2, r3
 800486a:	4b1b      	ldr	r3, [pc, #108]	; (80048d8 <UART_SetConfig+0x30c>)
 800486c:	fba3 0302 	umull	r0, r3, r3, r2
 8004870:	095b      	lsrs	r3, r3, #5
 8004872:	2064      	movs	r0, #100	; 0x64
 8004874:	fb00 f303 	mul.w	r3, r0, r3
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	011b      	lsls	r3, r3, #4
 800487c:	3332      	adds	r3, #50	; 0x32
 800487e:	4a16      	ldr	r2, [pc, #88]	; (80048d8 <UART_SetConfig+0x30c>)
 8004880:	fba2 2303 	umull	r2, r3, r2, r3
 8004884:	095b      	lsrs	r3, r3, #5
 8004886:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800488a:	4419      	add	r1, r3
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	4613      	mov	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	009a      	lsls	r2, r3, #2
 8004896:	441a      	add	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	fbb2 f2f3 	udiv	r2, r2, r3
 80048a2:	4b0d      	ldr	r3, [pc, #52]	; (80048d8 <UART_SetConfig+0x30c>)
 80048a4:	fba3 0302 	umull	r0, r3, r3, r2
 80048a8:	095b      	lsrs	r3, r3, #5
 80048aa:	2064      	movs	r0, #100	; 0x64
 80048ac:	fb00 f303 	mul.w	r3, r0, r3
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	011b      	lsls	r3, r3, #4
 80048b4:	3332      	adds	r3, #50	; 0x32
 80048b6:	4a08      	ldr	r2, [pc, #32]	; (80048d8 <UART_SetConfig+0x30c>)
 80048b8:	fba2 2303 	umull	r2, r3, r2, r3
 80048bc:	095b      	lsrs	r3, r3, #5
 80048be:	f003 020f 	and.w	r2, r3, #15
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	440a      	add	r2, r1
 80048c8:	609a      	str	r2, [r3, #8]
}
 80048ca:	bf00      	nop
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	40013800 	.word	0x40013800
 80048d8:	51eb851f 	.word	0x51eb851f

080048dc <__errno>:
 80048dc:	4b01      	ldr	r3, [pc, #4]	; (80048e4 <__errno+0x8>)
 80048de:	6818      	ldr	r0, [r3, #0]
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	2000001c 	.word	0x2000001c

080048e8 <__libc_init_array>:
 80048e8:	b570      	push	{r4, r5, r6, lr}
 80048ea:	2500      	movs	r5, #0
 80048ec:	4e0c      	ldr	r6, [pc, #48]	; (8004920 <__libc_init_array+0x38>)
 80048ee:	4c0d      	ldr	r4, [pc, #52]	; (8004924 <__libc_init_array+0x3c>)
 80048f0:	1ba4      	subs	r4, r4, r6
 80048f2:	10a4      	asrs	r4, r4, #2
 80048f4:	42a5      	cmp	r5, r4
 80048f6:	d109      	bne.n	800490c <__libc_init_array+0x24>
 80048f8:	f000 fc50 	bl	800519c <_init>
 80048fc:	2500      	movs	r5, #0
 80048fe:	4e0a      	ldr	r6, [pc, #40]	; (8004928 <__libc_init_array+0x40>)
 8004900:	4c0a      	ldr	r4, [pc, #40]	; (800492c <__libc_init_array+0x44>)
 8004902:	1ba4      	subs	r4, r4, r6
 8004904:	10a4      	asrs	r4, r4, #2
 8004906:	42a5      	cmp	r5, r4
 8004908:	d105      	bne.n	8004916 <__libc_init_array+0x2e>
 800490a:	bd70      	pop	{r4, r5, r6, pc}
 800490c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004910:	4798      	blx	r3
 8004912:	3501      	adds	r5, #1
 8004914:	e7ee      	b.n	80048f4 <__libc_init_array+0xc>
 8004916:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800491a:	4798      	blx	r3
 800491c:	3501      	adds	r5, #1
 800491e:	e7f2      	b.n	8004906 <__libc_init_array+0x1e>
 8004920:	080052b0 	.word	0x080052b0
 8004924:	080052b0 	.word	0x080052b0
 8004928:	080052b0 	.word	0x080052b0
 800492c:	080052b4 	.word	0x080052b4

08004930 <memcpy>:
 8004930:	b510      	push	{r4, lr}
 8004932:	1e43      	subs	r3, r0, #1
 8004934:	440a      	add	r2, r1
 8004936:	4291      	cmp	r1, r2
 8004938:	d100      	bne.n	800493c <memcpy+0xc>
 800493a:	bd10      	pop	{r4, pc}
 800493c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004940:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004944:	e7f7      	b.n	8004936 <memcpy+0x6>

08004946 <memset>:
 8004946:	4603      	mov	r3, r0
 8004948:	4402      	add	r2, r0
 800494a:	4293      	cmp	r3, r2
 800494c:	d100      	bne.n	8004950 <memset+0xa>
 800494e:	4770      	bx	lr
 8004950:	f803 1b01 	strb.w	r1, [r3], #1
 8004954:	e7f9      	b.n	800494a <memset+0x4>

08004956 <_vsniprintf_r>:
 8004956:	b530      	push	{r4, r5, lr}
 8004958:	1e14      	subs	r4, r2, #0
 800495a:	4605      	mov	r5, r0
 800495c:	b09b      	sub	sp, #108	; 0x6c
 800495e:	4618      	mov	r0, r3
 8004960:	da05      	bge.n	800496e <_vsniprintf_r+0x18>
 8004962:	238b      	movs	r3, #139	; 0x8b
 8004964:	f04f 30ff 	mov.w	r0, #4294967295
 8004968:	602b      	str	r3, [r5, #0]
 800496a:	b01b      	add	sp, #108	; 0x6c
 800496c:	bd30      	pop	{r4, r5, pc}
 800496e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004972:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004976:	bf0c      	ite	eq
 8004978:	4623      	moveq	r3, r4
 800497a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800497e:	9302      	str	r3, [sp, #8]
 8004980:	9305      	str	r3, [sp, #20]
 8004982:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004986:	9100      	str	r1, [sp, #0]
 8004988:	9104      	str	r1, [sp, #16]
 800498a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800498e:	4602      	mov	r2, r0
 8004990:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004992:	4669      	mov	r1, sp
 8004994:	4628      	mov	r0, r5
 8004996:	f000 f873 	bl	8004a80 <_svfiprintf_r>
 800499a:	1c43      	adds	r3, r0, #1
 800499c:	bfbc      	itt	lt
 800499e:	238b      	movlt	r3, #139	; 0x8b
 80049a0:	602b      	strlt	r3, [r5, #0]
 80049a2:	2c00      	cmp	r4, #0
 80049a4:	d0e1      	beq.n	800496a <_vsniprintf_r+0x14>
 80049a6:	2200      	movs	r2, #0
 80049a8:	9b00      	ldr	r3, [sp, #0]
 80049aa:	701a      	strb	r2, [r3, #0]
 80049ac:	e7dd      	b.n	800496a <_vsniprintf_r+0x14>
	...

080049b0 <vsniprintf>:
 80049b0:	b507      	push	{r0, r1, r2, lr}
 80049b2:	9300      	str	r3, [sp, #0]
 80049b4:	4613      	mov	r3, r2
 80049b6:	460a      	mov	r2, r1
 80049b8:	4601      	mov	r1, r0
 80049ba:	4803      	ldr	r0, [pc, #12]	; (80049c8 <vsniprintf+0x18>)
 80049bc:	6800      	ldr	r0, [r0, #0]
 80049be:	f7ff ffca 	bl	8004956 <_vsniprintf_r>
 80049c2:	b003      	add	sp, #12
 80049c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80049c8:	2000001c 	.word	0x2000001c

080049cc <__ssputs_r>:
 80049cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049d0:	688e      	ldr	r6, [r1, #8]
 80049d2:	4682      	mov	sl, r0
 80049d4:	429e      	cmp	r6, r3
 80049d6:	460c      	mov	r4, r1
 80049d8:	4690      	mov	r8, r2
 80049da:	4699      	mov	r9, r3
 80049dc:	d837      	bhi.n	8004a4e <__ssputs_r+0x82>
 80049de:	898a      	ldrh	r2, [r1, #12]
 80049e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80049e4:	d031      	beq.n	8004a4a <__ssputs_r+0x7e>
 80049e6:	2302      	movs	r3, #2
 80049e8:	6825      	ldr	r5, [r4, #0]
 80049ea:	6909      	ldr	r1, [r1, #16]
 80049ec:	1a6f      	subs	r7, r5, r1
 80049ee:	6965      	ldr	r5, [r4, #20]
 80049f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80049f4:	fb95 f5f3 	sdiv	r5, r5, r3
 80049f8:	f109 0301 	add.w	r3, r9, #1
 80049fc:	443b      	add	r3, r7
 80049fe:	429d      	cmp	r5, r3
 8004a00:	bf38      	it	cc
 8004a02:	461d      	movcc	r5, r3
 8004a04:	0553      	lsls	r3, r2, #21
 8004a06:	d530      	bpl.n	8004a6a <__ssputs_r+0x9e>
 8004a08:	4629      	mov	r1, r5
 8004a0a:	f000 fb2d 	bl	8005068 <_malloc_r>
 8004a0e:	4606      	mov	r6, r0
 8004a10:	b950      	cbnz	r0, 8004a28 <__ssputs_r+0x5c>
 8004a12:	230c      	movs	r3, #12
 8004a14:	f04f 30ff 	mov.w	r0, #4294967295
 8004a18:	f8ca 3000 	str.w	r3, [sl]
 8004a1c:	89a3      	ldrh	r3, [r4, #12]
 8004a1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a22:	81a3      	strh	r3, [r4, #12]
 8004a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a28:	463a      	mov	r2, r7
 8004a2a:	6921      	ldr	r1, [r4, #16]
 8004a2c:	f7ff ff80 	bl	8004930 <memcpy>
 8004a30:	89a3      	ldrh	r3, [r4, #12]
 8004a32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a3a:	81a3      	strh	r3, [r4, #12]
 8004a3c:	6126      	str	r6, [r4, #16]
 8004a3e:	443e      	add	r6, r7
 8004a40:	6026      	str	r6, [r4, #0]
 8004a42:	464e      	mov	r6, r9
 8004a44:	6165      	str	r5, [r4, #20]
 8004a46:	1bed      	subs	r5, r5, r7
 8004a48:	60a5      	str	r5, [r4, #8]
 8004a4a:	454e      	cmp	r6, r9
 8004a4c:	d900      	bls.n	8004a50 <__ssputs_r+0x84>
 8004a4e:	464e      	mov	r6, r9
 8004a50:	4632      	mov	r2, r6
 8004a52:	4641      	mov	r1, r8
 8004a54:	6820      	ldr	r0, [r4, #0]
 8004a56:	f000 faa1 	bl	8004f9c <memmove>
 8004a5a:	68a3      	ldr	r3, [r4, #8]
 8004a5c:	2000      	movs	r0, #0
 8004a5e:	1b9b      	subs	r3, r3, r6
 8004a60:	60a3      	str	r3, [r4, #8]
 8004a62:	6823      	ldr	r3, [r4, #0]
 8004a64:	441e      	add	r6, r3
 8004a66:	6026      	str	r6, [r4, #0]
 8004a68:	e7dc      	b.n	8004a24 <__ssputs_r+0x58>
 8004a6a:	462a      	mov	r2, r5
 8004a6c:	f000 fb56 	bl	800511c <_realloc_r>
 8004a70:	4606      	mov	r6, r0
 8004a72:	2800      	cmp	r0, #0
 8004a74:	d1e2      	bne.n	8004a3c <__ssputs_r+0x70>
 8004a76:	6921      	ldr	r1, [r4, #16]
 8004a78:	4650      	mov	r0, sl
 8004a7a:	f000 faa9 	bl	8004fd0 <_free_r>
 8004a7e:	e7c8      	b.n	8004a12 <__ssputs_r+0x46>

08004a80 <_svfiprintf_r>:
 8004a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a84:	461d      	mov	r5, r3
 8004a86:	898b      	ldrh	r3, [r1, #12]
 8004a88:	b09d      	sub	sp, #116	; 0x74
 8004a8a:	061f      	lsls	r7, r3, #24
 8004a8c:	4680      	mov	r8, r0
 8004a8e:	460c      	mov	r4, r1
 8004a90:	4616      	mov	r6, r2
 8004a92:	d50f      	bpl.n	8004ab4 <_svfiprintf_r+0x34>
 8004a94:	690b      	ldr	r3, [r1, #16]
 8004a96:	b96b      	cbnz	r3, 8004ab4 <_svfiprintf_r+0x34>
 8004a98:	2140      	movs	r1, #64	; 0x40
 8004a9a:	f000 fae5 	bl	8005068 <_malloc_r>
 8004a9e:	6020      	str	r0, [r4, #0]
 8004aa0:	6120      	str	r0, [r4, #16]
 8004aa2:	b928      	cbnz	r0, 8004ab0 <_svfiprintf_r+0x30>
 8004aa4:	230c      	movs	r3, #12
 8004aa6:	f8c8 3000 	str.w	r3, [r8]
 8004aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8004aae:	e0c8      	b.n	8004c42 <_svfiprintf_r+0x1c2>
 8004ab0:	2340      	movs	r3, #64	; 0x40
 8004ab2:	6163      	str	r3, [r4, #20]
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ab8:	2320      	movs	r3, #32
 8004aba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004abe:	2330      	movs	r3, #48	; 0x30
 8004ac0:	f04f 0b01 	mov.w	fp, #1
 8004ac4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ac8:	9503      	str	r5, [sp, #12]
 8004aca:	4637      	mov	r7, r6
 8004acc:	463d      	mov	r5, r7
 8004ace:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004ad2:	b10b      	cbz	r3, 8004ad8 <_svfiprintf_r+0x58>
 8004ad4:	2b25      	cmp	r3, #37	; 0x25
 8004ad6:	d13e      	bne.n	8004b56 <_svfiprintf_r+0xd6>
 8004ad8:	ebb7 0a06 	subs.w	sl, r7, r6
 8004adc:	d00b      	beq.n	8004af6 <_svfiprintf_r+0x76>
 8004ade:	4653      	mov	r3, sl
 8004ae0:	4632      	mov	r2, r6
 8004ae2:	4621      	mov	r1, r4
 8004ae4:	4640      	mov	r0, r8
 8004ae6:	f7ff ff71 	bl	80049cc <__ssputs_r>
 8004aea:	3001      	adds	r0, #1
 8004aec:	f000 80a4 	beq.w	8004c38 <_svfiprintf_r+0x1b8>
 8004af0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004af2:	4453      	add	r3, sl
 8004af4:	9309      	str	r3, [sp, #36]	; 0x24
 8004af6:	783b      	ldrb	r3, [r7, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 809d 	beq.w	8004c38 <_svfiprintf_r+0x1b8>
 8004afe:	2300      	movs	r3, #0
 8004b00:	f04f 32ff 	mov.w	r2, #4294967295
 8004b04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b08:	9304      	str	r3, [sp, #16]
 8004b0a:	9307      	str	r3, [sp, #28]
 8004b0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b10:	931a      	str	r3, [sp, #104]	; 0x68
 8004b12:	462f      	mov	r7, r5
 8004b14:	2205      	movs	r2, #5
 8004b16:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004b1a:	4850      	ldr	r0, [pc, #320]	; (8004c5c <_svfiprintf_r+0x1dc>)
 8004b1c:	f000 fa30 	bl	8004f80 <memchr>
 8004b20:	9b04      	ldr	r3, [sp, #16]
 8004b22:	b9d0      	cbnz	r0, 8004b5a <_svfiprintf_r+0xda>
 8004b24:	06d9      	lsls	r1, r3, #27
 8004b26:	bf44      	itt	mi
 8004b28:	2220      	movmi	r2, #32
 8004b2a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004b2e:	071a      	lsls	r2, r3, #28
 8004b30:	bf44      	itt	mi
 8004b32:	222b      	movmi	r2, #43	; 0x2b
 8004b34:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004b38:	782a      	ldrb	r2, [r5, #0]
 8004b3a:	2a2a      	cmp	r2, #42	; 0x2a
 8004b3c:	d015      	beq.n	8004b6a <_svfiprintf_r+0xea>
 8004b3e:	462f      	mov	r7, r5
 8004b40:	2000      	movs	r0, #0
 8004b42:	250a      	movs	r5, #10
 8004b44:	9a07      	ldr	r2, [sp, #28]
 8004b46:	4639      	mov	r1, r7
 8004b48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b4c:	3b30      	subs	r3, #48	; 0x30
 8004b4e:	2b09      	cmp	r3, #9
 8004b50:	d94d      	bls.n	8004bee <_svfiprintf_r+0x16e>
 8004b52:	b1b8      	cbz	r0, 8004b84 <_svfiprintf_r+0x104>
 8004b54:	e00f      	b.n	8004b76 <_svfiprintf_r+0xf6>
 8004b56:	462f      	mov	r7, r5
 8004b58:	e7b8      	b.n	8004acc <_svfiprintf_r+0x4c>
 8004b5a:	4a40      	ldr	r2, [pc, #256]	; (8004c5c <_svfiprintf_r+0x1dc>)
 8004b5c:	463d      	mov	r5, r7
 8004b5e:	1a80      	subs	r0, r0, r2
 8004b60:	fa0b f000 	lsl.w	r0, fp, r0
 8004b64:	4318      	orrs	r0, r3
 8004b66:	9004      	str	r0, [sp, #16]
 8004b68:	e7d3      	b.n	8004b12 <_svfiprintf_r+0x92>
 8004b6a:	9a03      	ldr	r2, [sp, #12]
 8004b6c:	1d11      	adds	r1, r2, #4
 8004b6e:	6812      	ldr	r2, [r2, #0]
 8004b70:	9103      	str	r1, [sp, #12]
 8004b72:	2a00      	cmp	r2, #0
 8004b74:	db01      	blt.n	8004b7a <_svfiprintf_r+0xfa>
 8004b76:	9207      	str	r2, [sp, #28]
 8004b78:	e004      	b.n	8004b84 <_svfiprintf_r+0x104>
 8004b7a:	4252      	negs	r2, r2
 8004b7c:	f043 0302 	orr.w	r3, r3, #2
 8004b80:	9207      	str	r2, [sp, #28]
 8004b82:	9304      	str	r3, [sp, #16]
 8004b84:	783b      	ldrb	r3, [r7, #0]
 8004b86:	2b2e      	cmp	r3, #46	; 0x2e
 8004b88:	d10c      	bne.n	8004ba4 <_svfiprintf_r+0x124>
 8004b8a:	787b      	ldrb	r3, [r7, #1]
 8004b8c:	2b2a      	cmp	r3, #42	; 0x2a
 8004b8e:	d133      	bne.n	8004bf8 <_svfiprintf_r+0x178>
 8004b90:	9b03      	ldr	r3, [sp, #12]
 8004b92:	3702      	adds	r7, #2
 8004b94:	1d1a      	adds	r2, r3, #4
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	9203      	str	r2, [sp, #12]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	bfb8      	it	lt
 8004b9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ba2:	9305      	str	r3, [sp, #20]
 8004ba4:	4d2e      	ldr	r5, [pc, #184]	; (8004c60 <_svfiprintf_r+0x1e0>)
 8004ba6:	2203      	movs	r2, #3
 8004ba8:	7839      	ldrb	r1, [r7, #0]
 8004baa:	4628      	mov	r0, r5
 8004bac:	f000 f9e8 	bl	8004f80 <memchr>
 8004bb0:	b138      	cbz	r0, 8004bc2 <_svfiprintf_r+0x142>
 8004bb2:	2340      	movs	r3, #64	; 0x40
 8004bb4:	1b40      	subs	r0, r0, r5
 8004bb6:	fa03 f000 	lsl.w	r0, r3, r0
 8004bba:	9b04      	ldr	r3, [sp, #16]
 8004bbc:	3701      	adds	r7, #1
 8004bbe:	4303      	orrs	r3, r0
 8004bc0:	9304      	str	r3, [sp, #16]
 8004bc2:	7839      	ldrb	r1, [r7, #0]
 8004bc4:	2206      	movs	r2, #6
 8004bc6:	4827      	ldr	r0, [pc, #156]	; (8004c64 <_svfiprintf_r+0x1e4>)
 8004bc8:	1c7e      	adds	r6, r7, #1
 8004bca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004bce:	f000 f9d7 	bl	8004f80 <memchr>
 8004bd2:	2800      	cmp	r0, #0
 8004bd4:	d038      	beq.n	8004c48 <_svfiprintf_r+0x1c8>
 8004bd6:	4b24      	ldr	r3, [pc, #144]	; (8004c68 <_svfiprintf_r+0x1e8>)
 8004bd8:	bb13      	cbnz	r3, 8004c20 <_svfiprintf_r+0x1a0>
 8004bda:	9b03      	ldr	r3, [sp, #12]
 8004bdc:	3307      	adds	r3, #7
 8004bde:	f023 0307 	bic.w	r3, r3, #7
 8004be2:	3308      	adds	r3, #8
 8004be4:	9303      	str	r3, [sp, #12]
 8004be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004be8:	444b      	add	r3, r9
 8004bea:	9309      	str	r3, [sp, #36]	; 0x24
 8004bec:	e76d      	b.n	8004aca <_svfiprintf_r+0x4a>
 8004bee:	fb05 3202 	mla	r2, r5, r2, r3
 8004bf2:	2001      	movs	r0, #1
 8004bf4:	460f      	mov	r7, r1
 8004bf6:	e7a6      	b.n	8004b46 <_svfiprintf_r+0xc6>
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	250a      	movs	r5, #10
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	3701      	adds	r7, #1
 8004c00:	9305      	str	r3, [sp, #20]
 8004c02:	4638      	mov	r0, r7
 8004c04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c08:	3a30      	subs	r2, #48	; 0x30
 8004c0a:	2a09      	cmp	r2, #9
 8004c0c:	d903      	bls.n	8004c16 <_svfiprintf_r+0x196>
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d0c8      	beq.n	8004ba4 <_svfiprintf_r+0x124>
 8004c12:	9105      	str	r1, [sp, #20]
 8004c14:	e7c6      	b.n	8004ba4 <_svfiprintf_r+0x124>
 8004c16:	fb05 2101 	mla	r1, r5, r1, r2
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	4607      	mov	r7, r0
 8004c1e:	e7f0      	b.n	8004c02 <_svfiprintf_r+0x182>
 8004c20:	ab03      	add	r3, sp, #12
 8004c22:	9300      	str	r3, [sp, #0]
 8004c24:	4622      	mov	r2, r4
 8004c26:	4b11      	ldr	r3, [pc, #68]	; (8004c6c <_svfiprintf_r+0x1ec>)
 8004c28:	a904      	add	r1, sp, #16
 8004c2a:	4640      	mov	r0, r8
 8004c2c:	f3af 8000 	nop.w
 8004c30:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004c34:	4681      	mov	r9, r0
 8004c36:	d1d6      	bne.n	8004be6 <_svfiprintf_r+0x166>
 8004c38:	89a3      	ldrh	r3, [r4, #12]
 8004c3a:	065b      	lsls	r3, r3, #25
 8004c3c:	f53f af35 	bmi.w	8004aaa <_svfiprintf_r+0x2a>
 8004c40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c42:	b01d      	add	sp, #116	; 0x74
 8004c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c48:	ab03      	add	r3, sp, #12
 8004c4a:	9300      	str	r3, [sp, #0]
 8004c4c:	4622      	mov	r2, r4
 8004c4e:	4b07      	ldr	r3, [pc, #28]	; (8004c6c <_svfiprintf_r+0x1ec>)
 8004c50:	a904      	add	r1, sp, #16
 8004c52:	4640      	mov	r0, r8
 8004c54:	f000 f882 	bl	8004d5c <_printf_i>
 8004c58:	e7ea      	b.n	8004c30 <_svfiprintf_r+0x1b0>
 8004c5a:	bf00      	nop
 8004c5c:	0800527c 	.word	0x0800527c
 8004c60:	08005282 	.word	0x08005282
 8004c64:	08005286 	.word	0x08005286
 8004c68:	00000000 	.word	0x00000000
 8004c6c:	080049cd 	.word	0x080049cd

08004c70 <_printf_common>:
 8004c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c74:	4691      	mov	r9, r2
 8004c76:	461f      	mov	r7, r3
 8004c78:	688a      	ldr	r2, [r1, #8]
 8004c7a:	690b      	ldr	r3, [r1, #16]
 8004c7c:	4606      	mov	r6, r0
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	bfb8      	it	lt
 8004c82:	4613      	movlt	r3, r2
 8004c84:	f8c9 3000 	str.w	r3, [r9]
 8004c88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c8c:	460c      	mov	r4, r1
 8004c8e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c92:	b112      	cbz	r2, 8004c9a <_printf_common+0x2a>
 8004c94:	3301      	adds	r3, #1
 8004c96:	f8c9 3000 	str.w	r3, [r9]
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	0699      	lsls	r1, r3, #26
 8004c9e:	bf42      	ittt	mi
 8004ca0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004ca4:	3302      	addmi	r3, #2
 8004ca6:	f8c9 3000 	strmi.w	r3, [r9]
 8004caa:	6825      	ldr	r5, [r4, #0]
 8004cac:	f015 0506 	ands.w	r5, r5, #6
 8004cb0:	d107      	bne.n	8004cc2 <_printf_common+0x52>
 8004cb2:	f104 0a19 	add.w	sl, r4, #25
 8004cb6:	68e3      	ldr	r3, [r4, #12]
 8004cb8:	f8d9 2000 	ldr.w	r2, [r9]
 8004cbc:	1a9b      	subs	r3, r3, r2
 8004cbe:	42ab      	cmp	r3, r5
 8004cc0:	dc29      	bgt.n	8004d16 <_printf_common+0xa6>
 8004cc2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004cc6:	6822      	ldr	r2, [r4, #0]
 8004cc8:	3300      	adds	r3, #0
 8004cca:	bf18      	it	ne
 8004ccc:	2301      	movne	r3, #1
 8004cce:	0692      	lsls	r2, r2, #26
 8004cd0:	d42e      	bmi.n	8004d30 <_printf_common+0xc0>
 8004cd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cd6:	4639      	mov	r1, r7
 8004cd8:	4630      	mov	r0, r6
 8004cda:	47c0      	blx	r8
 8004cdc:	3001      	adds	r0, #1
 8004cde:	d021      	beq.n	8004d24 <_printf_common+0xb4>
 8004ce0:	6823      	ldr	r3, [r4, #0]
 8004ce2:	68e5      	ldr	r5, [r4, #12]
 8004ce4:	f003 0306 	and.w	r3, r3, #6
 8004ce8:	2b04      	cmp	r3, #4
 8004cea:	bf18      	it	ne
 8004cec:	2500      	movne	r5, #0
 8004cee:	f8d9 2000 	ldr.w	r2, [r9]
 8004cf2:	f04f 0900 	mov.w	r9, #0
 8004cf6:	bf08      	it	eq
 8004cf8:	1aad      	subeq	r5, r5, r2
 8004cfa:	68a3      	ldr	r3, [r4, #8]
 8004cfc:	6922      	ldr	r2, [r4, #16]
 8004cfe:	bf08      	it	eq
 8004d00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d04:	4293      	cmp	r3, r2
 8004d06:	bfc4      	itt	gt
 8004d08:	1a9b      	subgt	r3, r3, r2
 8004d0a:	18ed      	addgt	r5, r5, r3
 8004d0c:	341a      	adds	r4, #26
 8004d0e:	454d      	cmp	r5, r9
 8004d10:	d11a      	bne.n	8004d48 <_printf_common+0xd8>
 8004d12:	2000      	movs	r0, #0
 8004d14:	e008      	b.n	8004d28 <_printf_common+0xb8>
 8004d16:	2301      	movs	r3, #1
 8004d18:	4652      	mov	r2, sl
 8004d1a:	4639      	mov	r1, r7
 8004d1c:	4630      	mov	r0, r6
 8004d1e:	47c0      	blx	r8
 8004d20:	3001      	adds	r0, #1
 8004d22:	d103      	bne.n	8004d2c <_printf_common+0xbc>
 8004d24:	f04f 30ff 	mov.w	r0, #4294967295
 8004d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d2c:	3501      	adds	r5, #1
 8004d2e:	e7c2      	b.n	8004cb6 <_printf_common+0x46>
 8004d30:	2030      	movs	r0, #48	; 0x30
 8004d32:	18e1      	adds	r1, r4, r3
 8004d34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d38:	1c5a      	adds	r2, r3, #1
 8004d3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d3e:	4422      	add	r2, r4
 8004d40:	3302      	adds	r3, #2
 8004d42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d46:	e7c4      	b.n	8004cd2 <_printf_common+0x62>
 8004d48:	2301      	movs	r3, #1
 8004d4a:	4622      	mov	r2, r4
 8004d4c:	4639      	mov	r1, r7
 8004d4e:	4630      	mov	r0, r6
 8004d50:	47c0      	blx	r8
 8004d52:	3001      	adds	r0, #1
 8004d54:	d0e6      	beq.n	8004d24 <_printf_common+0xb4>
 8004d56:	f109 0901 	add.w	r9, r9, #1
 8004d5a:	e7d8      	b.n	8004d0e <_printf_common+0x9e>

08004d5c <_printf_i>:
 8004d5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d60:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004d64:	460c      	mov	r4, r1
 8004d66:	7e09      	ldrb	r1, [r1, #24]
 8004d68:	b085      	sub	sp, #20
 8004d6a:	296e      	cmp	r1, #110	; 0x6e
 8004d6c:	4617      	mov	r7, r2
 8004d6e:	4606      	mov	r6, r0
 8004d70:	4698      	mov	r8, r3
 8004d72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d74:	f000 80b3 	beq.w	8004ede <_printf_i+0x182>
 8004d78:	d822      	bhi.n	8004dc0 <_printf_i+0x64>
 8004d7a:	2963      	cmp	r1, #99	; 0x63
 8004d7c:	d036      	beq.n	8004dec <_printf_i+0x90>
 8004d7e:	d80a      	bhi.n	8004d96 <_printf_i+0x3a>
 8004d80:	2900      	cmp	r1, #0
 8004d82:	f000 80b9 	beq.w	8004ef8 <_printf_i+0x19c>
 8004d86:	2958      	cmp	r1, #88	; 0x58
 8004d88:	f000 8083 	beq.w	8004e92 <_printf_i+0x136>
 8004d8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d90:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004d94:	e032      	b.n	8004dfc <_printf_i+0xa0>
 8004d96:	2964      	cmp	r1, #100	; 0x64
 8004d98:	d001      	beq.n	8004d9e <_printf_i+0x42>
 8004d9a:	2969      	cmp	r1, #105	; 0x69
 8004d9c:	d1f6      	bne.n	8004d8c <_printf_i+0x30>
 8004d9e:	6820      	ldr	r0, [r4, #0]
 8004da0:	6813      	ldr	r3, [r2, #0]
 8004da2:	0605      	lsls	r5, r0, #24
 8004da4:	f103 0104 	add.w	r1, r3, #4
 8004da8:	d52a      	bpl.n	8004e00 <_printf_i+0xa4>
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6011      	str	r1, [r2, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	da03      	bge.n	8004dba <_printf_i+0x5e>
 8004db2:	222d      	movs	r2, #45	; 0x2d
 8004db4:	425b      	negs	r3, r3
 8004db6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004dba:	486f      	ldr	r0, [pc, #444]	; (8004f78 <_printf_i+0x21c>)
 8004dbc:	220a      	movs	r2, #10
 8004dbe:	e039      	b.n	8004e34 <_printf_i+0xd8>
 8004dc0:	2973      	cmp	r1, #115	; 0x73
 8004dc2:	f000 809d 	beq.w	8004f00 <_printf_i+0x1a4>
 8004dc6:	d808      	bhi.n	8004dda <_printf_i+0x7e>
 8004dc8:	296f      	cmp	r1, #111	; 0x6f
 8004dca:	d020      	beq.n	8004e0e <_printf_i+0xb2>
 8004dcc:	2970      	cmp	r1, #112	; 0x70
 8004dce:	d1dd      	bne.n	8004d8c <_printf_i+0x30>
 8004dd0:	6823      	ldr	r3, [r4, #0]
 8004dd2:	f043 0320 	orr.w	r3, r3, #32
 8004dd6:	6023      	str	r3, [r4, #0]
 8004dd8:	e003      	b.n	8004de2 <_printf_i+0x86>
 8004dda:	2975      	cmp	r1, #117	; 0x75
 8004ddc:	d017      	beq.n	8004e0e <_printf_i+0xb2>
 8004dde:	2978      	cmp	r1, #120	; 0x78
 8004de0:	d1d4      	bne.n	8004d8c <_printf_i+0x30>
 8004de2:	2378      	movs	r3, #120	; 0x78
 8004de4:	4865      	ldr	r0, [pc, #404]	; (8004f7c <_printf_i+0x220>)
 8004de6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004dea:	e055      	b.n	8004e98 <_printf_i+0x13c>
 8004dec:	6813      	ldr	r3, [r2, #0]
 8004dee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004df2:	1d19      	adds	r1, r3, #4
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6011      	str	r1, [r2, #0]
 8004df8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e08c      	b.n	8004f1a <_printf_i+0x1be>
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e06:	6011      	str	r1, [r2, #0]
 8004e08:	bf18      	it	ne
 8004e0a:	b21b      	sxthne	r3, r3
 8004e0c:	e7cf      	b.n	8004dae <_printf_i+0x52>
 8004e0e:	6813      	ldr	r3, [r2, #0]
 8004e10:	6825      	ldr	r5, [r4, #0]
 8004e12:	1d18      	adds	r0, r3, #4
 8004e14:	6010      	str	r0, [r2, #0]
 8004e16:	0628      	lsls	r0, r5, #24
 8004e18:	d501      	bpl.n	8004e1e <_printf_i+0xc2>
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	e002      	b.n	8004e24 <_printf_i+0xc8>
 8004e1e:	0668      	lsls	r0, r5, #25
 8004e20:	d5fb      	bpl.n	8004e1a <_printf_i+0xbe>
 8004e22:	881b      	ldrh	r3, [r3, #0]
 8004e24:	296f      	cmp	r1, #111	; 0x6f
 8004e26:	bf14      	ite	ne
 8004e28:	220a      	movne	r2, #10
 8004e2a:	2208      	moveq	r2, #8
 8004e2c:	4852      	ldr	r0, [pc, #328]	; (8004f78 <_printf_i+0x21c>)
 8004e2e:	2100      	movs	r1, #0
 8004e30:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e34:	6865      	ldr	r5, [r4, #4]
 8004e36:	2d00      	cmp	r5, #0
 8004e38:	60a5      	str	r5, [r4, #8]
 8004e3a:	f2c0 8095 	blt.w	8004f68 <_printf_i+0x20c>
 8004e3e:	6821      	ldr	r1, [r4, #0]
 8004e40:	f021 0104 	bic.w	r1, r1, #4
 8004e44:	6021      	str	r1, [r4, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d13d      	bne.n	8004ec6 <_printf_i+0x16a>
 8004e4a:	2d00      	cmp	r5, #0
 8004e4c:	f040 808e 	bne.w	8004f6c <_printf_i+0x210>
 8004e50:	4665      	mov	r5, ip
 8004e52:	2a08      	cmp	r2, #8
 8004e54:	d10b      	bne.n	8004e6e <_printf_i+0x112>
 8004e56:	6823      	ldr	r3, [r4, #0]
 8004e58:	07db      	lsls	r3, r3, #31
 8004e5a:	d508      	bpl.n	8004e6e <_printf_i+0x112>
 8004e5c:	6923      	ldr	r3, [r4, #16]
 8004e5e:	6862      	ldr	r2, [r4, #4]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	bfde      	ittt	le
 8004e64:	2330      	movle	r3, #48	; 0x30
 8004e66:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e6e:	ebac 0305 	sub.w	r3, ip, r5
 8004e72:	6123      	str	r3, [r4, #16]
 8004e74:	f8cd 8000 	str.w	r8, [sp]
 8004e78:	463b      	mov	r3, r7
 8004e7a:	aa03      	add	r2, sp, #12
 8004e7c:	4621      	mov	r1, r4
 8004e7e:	4630      	mov	r0, r6
 8004e80:	f7ff fef6 	bl	8004c70 <_printf_common>
 8004e84:	3001      	adds	r0, #1
 8004e86:	d14d      	bne.n	8004f24 <_printf_i+0x1c8>
 8004e88:	f04f 30ff 	mov.w	r0, #4294967295
 8004e8c:	b005      	add	sp, #20
 8004e8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e92:	4839      	ldr	r0, [pc, #228]	; (8004f78 <_printf_i+0x21c>)
 8004e94:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004e98:	6813      	ldr	r3, [r2, #0]
 8004e9a:	6821      	ldr	r1, [r4, #0]
 8004e9c:	1d1d      	adds	r5, r3, #4
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6015      	str	r5, [r2, #0]
 8004ea2:	060a      	lsls	r2, r1, #24
 8004ea4:	d50b      	bpl.n	8004ebe <_printf_i+0x162>
 8004ea6:	07ca      	lsls	r2, r1, #31
 8004ea8:	bf44      	itt	mi
 8004eaa:	f041 0120 	orrmi.w	r1, r1, #32
 8004eae:	6021      	strmi	r1, [r4, #0]
 8004eb0:	b91b      	cbnz	r3, 8004eba <_printf_i+0x15e>
 8004eb2:	6822      	ldr	r2, [r4, #0]
 8004eb4:	f022 0220 	bic.w	r2, r2, #32
 8004eb8:	6022      	str	r2, [r4, #0]
 8004eba:	2210      	movs	r2, #16
 8004ebc:	e7b7      	b.n	8004e2e <_printf_i+0xd2>
 8004ebe:	064d      	lsls	r5, r1, #25
 8004ec0:	bf48      	it	mi
 8004ec2:	b29b      	uxthmi	r3, r3
 8004ec4:	e7ef      	b.n	8004ea6 <_printf_i+0x14a>
 8004ec6:	4665      	mov	r5, ip
 8004ec8:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ecc:	fb02 3311 	mls	r3, r2, r1, r3
 8004ed0:	5cc3      	ldrb	r3, [r0, r3]
 8004ed2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	2900      	cmp	r1, #0
 8004eda:	d1f5      	bne.n	8004ec8 <_printf_i+0x16c>
 8004edc:	e7b9      	b.n	8004e52 <_printf_i+0xf6>
 8004ede:	6813      	ldr	r3, [r2, #0]
 8004ee0:	6825      	ldr	r5, [r4, #0]
 8004ee2:	1d18      	adds	r0, r3, #4
 8004ee4:	6961      	ldr	r1, [r4, #20]
 8004ee6:	6010      	str	r0, [r2, #0]
 8004ee8:	0628      	lsls	r0, r5, #24
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	d501      	bpl.n	8004ef2 <_printf_i+0x196>
 8004eee:	6019      	str	r1, [r3, #0]
 8004ef0:	e002      	b.n	8004ef8 <_printf_i+0x19c>
 8004ef2:	066a      	lsls	r2, r5, #25
 8004ef4:	d5fb      	bpl.n	8004eee <_printf_i+0x192>
 8004ef6:	8019      	strh	r1, [r3, #0]
 8004ef8:	2300      	movs	r3, #0
 8004efa:	4665      	mov	r5, ip
 8004efc:	6123      	str	r3, [r4, #16]
 8004efe:	e7b9      	b.n	8004e74 <_printf_i+0x118>
 8004f00:	6813      	ldr	r3, [r2, #0]
 8004f02:	1d19      	adds	r1, r3, #4
 8004f04:	6011      	str	r1, [r2, #0]
 8004f06:	681d      	ldr	r5, [r3, #0]
 8004f08:	6862      	ldr	r2, [r4, #4]
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	f000 f837 	bl	8004f80 <memchr>
 8004f12:	b108      	cbz	r0, 8004f18 <_printf_i+0x1bc>
 8004f14:	1b40      	subs	r0, r0, r5
 8004f16:	6060      	str	r0, [r4, #4]
 8004f18:	6863      	ldr	r3, [r4, #4]
 8004f1a:	6123      	str	r3, [r4, #16]
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f22:	e7a7      	b.n	8004e74 <_printf_i+0x118>
 8004f24:	6923      	ldr	r3, [r4, #16]
 8004f26:	462a      	mov	r2, r5
 8004f28:	4639      	mov	r1, r7
 8004f2a:	4630      	mov	r0, r6
 8004f2c:	47c0      	blx	r8
 8004f2e:	3001      	adds	r0, #1
 8004f30:	d0aa      	beq.n	8004e88 <_printf_i+0x12c>
 8004f32:	6823      	ldr	r3, [r4, #0]
 8004f34:	079b      	lsls	r3, r3, #30
 8004f36:	d413      	bmi.n	8004f60 <_printf_i+0x204>
 8004f38:	68e0      	ldr	r0, [r4, #12]
 8004f3a:	9b03      	ldr	r3, [sp, #12]
 8004f3c:	4298      	cmp	r0, r3
 8004f3e:	bfb8      	it	lt
 8004f40:	4618      	movlt	r0, r3
 8004f42:	e7a3      	b.n	8004e8c <_printf_i+0x130>
 8004f44:	2301      	movs	r3, #1
 8004f46:	464a      	mov	r2, r9
 8004f48:	4639      	mov	r1, r7
 8004f4a:	4630      	mov	r0, r6
 8004f4c:	47c0      	blx	r8
 8004f4e:	3001      	adds	r0, #1
 8004f50:	d09a      	beq.n	8004e88 <_printf_i+0x12c>
 8004f52:	3501      	adds	r5, #1
 8004f54:	68e3      	ldr	r3, [r4, #12]
 8004f56:	9a03      	ldr	r2, [sp, #12]
 8004f58:	1a9b      	subs	r3, r3, r2
 8004f5a:	42ab      	cmp	r3, r5
 8004f5c:	dcf2      	bgt.n	8004f44 <_printf_i+0x1e8>
 8004f5e:	e7eb      	b.n	8004f38 <_printf_i+0x1dc>
 8004f60:	2500      	movs	r5, #0
 8004f62:	f104 0919 	add.w	r9, r4, #25
 8004f66:	e7f5      	b.n	8004f54 <_printf_i+0x1f8>
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1ac      	bne.n	8004ec6 <_printf_i+0x16a>
 8004f6c:	7803      	ldrb	r3, [r0, #0]
 8004f6e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f76:	e76c      	b.n	8004e52 <_printf_i+0xf6>
 8004f78:	0800528d 	.word	0x0800528d
 8004f7c:	0800529e 	.word	0x0800529e

08004f80 <memchr>:
 8004f80:	b510      	push	{r4, lr}
 8004f82:	b2c9      	uxtb	r1, r1
 8004f84:	4402      	add	r2, r0
 8004f86:	4290      	cmp	r0, r2
 8004f88:	4603      	mov	r3, r0
 8004f8a:	d101      	bne.n	8004f90 <memchr+0x10>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	e003      	b.n	8004f98 <memchr+0x18>
 8004f90:	781c      	ldrb	r4, [r3, #0]
 8004f92:	3001      	adds	r0, #1
 8004f94:	428c      	cmp	r4, r1
 8004f96:	d1f6      	bne.n	8004f86 <memchr+0x6>
 8004f98:	4618      	mov	r0, r3
 8004f9a:	bd10      	pop	{r4, pc}

08004f9c <memmove>:
 8004f9c:	4288      	cmp	r0, r1
 8004f9e:	b510      	push	{r4, lr}
 8004fa0:	eb01 0302 	add.w	r3, r1, r2
 8004fa4:	d807      	bhi.n	8004fb6 <memmove+0x1a>
 8004fa6:	1e42      	subs	r2, r0, #1
 8004fa8:	4299      	cmp	r1, r3
 8004faa:	d00a      	beq.n	8004fc2 <memmove+0x26>
 8004fac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fb0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004fb4:	e7f8      	b.n	8004fa8 <memmove+0xc>
 8004fb6:	4283      	cmp	r3, r0
 8004fb8:	d9f5      	bls.n	8004fa6 <memmove+0xa>
 8004fba:	1881      	adds	r1, r0, r2
 8004fbc:	1ad2      	subs	r2, r2, r3
 8004fbe:	42d3      	cmn	r3, r2
 8004fc0:	d100      	bne.n	8004fc4 <memmove+0x28>
 8004fc2:	bd10      	pop	{r4, pc}
 8004fc4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004fc8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004fcc:	e7f7      	b.n	8004fbe <memmove+0x22>
	...

08004fd0 <_free_r>:
 8004fd0:	b538      	push	{r3, r4, r5, lr}
 8004fd2:	4605      	mov	r5, r0
 8004fd4:	2900      	cmp	r1, #0
 8004fd6:	d043      	beq.n	8005060 <_free_r+0x90>
 8004fd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fdc:	1f0c      	subs	r4, r1, #4
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	bfb8      	it	lt
 8004fe2:	18e4      	addlt	r4, r4, r3
 8004fe4:	f000 f8d0 	bl	8005188 <__malloc_lock>
 8004fe8:	4a1e      	ldr	r2, [pc, #120]	; (8005064 <_free_r+0x94>)
 8004fea:	6813      	ldr	r3, [r2, #0]
 8004fec:	4610      	mov	r0, r2
 8004fee:	b933      	cbnz	r3, 8004ffe <_free_r+0x2e>
 8004ff0:	6063      	str	r3, [r4, #4]
 8004ff2:	6014      	str	r4, [r2, #0]
 8004ff4:	4628      	mov	r0, r5
 8004ff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ffa:	f000 b8c6 	b.w	800518a <__malloc_unlock>
 8004ffe:	42a3      	cmp	r3, r4
 8005000:	d90b      	bls.n	800501a <_free_r+0x4a>
 8005002:	6821      	ldr	r1, [r4, #0]
 8005004:	1862      	adds	r2, r4, r1
 8005006:	4293      	cmp	r3, r2
 8005008:	bf01      	itttt	eq
 800500a:	681a      	ldreq	r2, [r3, #0]
 800500c:	685b      	ldreq	r3, [r3, #4]
 800500e:	1852      	addeq	r2, r2, r1
 8005010:	6022      	streq	r2, [r4, #0]
 8005012:	6063      	str	r3, [r4, #4]
 8005014:	6004      	str	r4, [r0, #0]
 8005016:	e7ed      	b.n	8004ff4 <_free_r+0x24>
 8005018:	4613      	mov	r3, r2
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	b10a      	cbz	r2, 8005022 <_free_r+0x52>
 800501e:	42a2      	cmp	r2, r4
 8005020:	d9fa      	bls.n	8005018 <_free_r+0x48>
 8005022:	6819      	ldr	r1, [r3, #0]
 8005024:	1858      	adds	r0, r3, r1
 8005026:	42a0      	cmp	r0, r4
 8005028:	d10b      	bne.n	8005042 <_free_r+0x72>
 800502a:	6820      	ldr	r0, [r4, #0]
 800502c:	4401      	add	r1, r0
 800502e:	1858      	adds	r0, r3, r1
 8005030:	4282      	cmp	r2, r0
 8005032:	6019      	str	r1, [r3, #0]
 8005034:	d1de      	bne.n	8004ff4 <_free_r+0x24>
 8005036:	6810      	ldr	r0, [r2, #0]
 8005038:	6852      	ldr	r2, [r2, #4]
 800503a:	4401      	add	r1, r0
 800503c:	6019      	str	r1, [r3, #0]
 800503e:	605a      	str	r2, [r3, #4]
 8005040:	e7d8      	b.n	8004ff4 <_free_r+0x24>
 8005042:	d902      	bls.n	800504a <_free_r+0x7a>
 8005044:	230c      	movs	r3, #12
 8005046:	602b      	str	r3, [r5, #0]
 8005048:	e7d4      	b.n	8004ff4 <_free_r+0x24>
 800504a:	6820      	ldr	r0, [r4, #0]
 800504c:	1821      	adds	r1, r4, r0
 800504e:	428a      	cmp	r2, r1
 8005050:	bf01      	itttt	eq
 8005052:	6811      	ldreq	r1, [r2, #0]
 8005054:	6852      	ldreq	r2, [r2, #4]
 8005056:	1809      	addeq	r1, r1, r0
 8005058:	6021      	streq	r1, [r4, #0]
 800505a:	6062      	str	r2, [r4, #4]
 800505c:	605c      	str	r4, [r3, #4]
 800505e:	e7c9      	b.n	8004ff4 <_free_r+0x24>
 8005060:	bd38      	pop	{r3, r4, r5, pc}
 8005062:	bf00      	nop
 8005064:	200000a0 	.word	0x200000a0

08005068 <_malloc_r>:
 8005068:	b570      	push	{r4, r5, r6, lr}
 800506a:	1ccd      	adds	r5, r1, #3
 800506c:	f025 0503 	bic.w	r5, r5, #3
 8005070:	3508      	adds	r5, #8
 8005072:	2d0c      	cmp	r5, #12
 8005074:	bf38      	it	cc
 8005076:	250c      	movcc	r5, #12
 8005078:	2d00      	cmp	r5, #0
 800507a:	4606      	mov	r6, r0
 800507c:	db01      	blt.n	8005082 <_malloc_r+0x1a>
 800507e:	42a9      	cmp	r1, r5
 8005080:	d903      	bls.n	800508a <_malloc_r+0x22>
 8005082:	230c      	movs	r3, #12
 8005084:	6033      	str	r3, [r6, #0]
 8005086:	2000      	movs	r0, #0
 8005088:	bd70      	pop	{r4, r5, r6, pc}
 800508a:	f000 f87d 	bl	8005188 <__malloc_lock>
 800508e:	4a21      	ldr	r2, [pc, #132]	; (8005114 <_malloc_r+0xac>)
 8005090:	6814      	ldr	r4, [r2, #0]
 8005092:	4621      	mov	r1, r4
 8005094:	b991      	cbnz	r1, 80050bc <_malloc_r+0x54>
 8005096:	4c20      	ldr	r4, [pc, #128]	; (8005118 <_malloc_r+0xb0>)
 8005098:	6823      	ldr	r3, [r4, #0]
 800509a:	b91b      	cbnz	r3, 80050a4 <_malloc_r+0x3c>
 800509c:	4630      	mov	r0, r6
 800509e:	f000 f863 	bl	8005168 <_sbrk_r>
 80050a2:	6020      	str	r0, [r4, #0]
 80050a4:	4629      	mov	r1, r5
 80050a6:	4630      	mov	r0, r6
 80050a8:	f000 f85e 	bl	8005168 <_sbrk_r>
 80050ac:	1c43      	adds	r3, r0, #1
 80050ae:	d124      	bne.n	80050fa <_malloc_r+0x92>
 80050b0:	230c      	movs	r3, #12
 80050b2:	4630      	mov	r0, r6
 80050b4:	6033      	str	r3, [r6, #0]
 80050b6:	f000 f868 	bl	800518a <__malloc_unlock>
 80050ba:	e7e4      	b.n	8005086 <_malloc_r+0x1e>
 80050bc:	680b      	ldr	r3, [r1, #0]
 80050be:	1b5b      	subs	r3, r3, r5
 80050c0:	d418      	bmi.n	80050f4 <_malloc_r+0x8c>
 80050c2:	2b0b      	cmp	r3, #11
 80050c4:	d90f      	bls.n	80050e6 <_malloc_r+0x7e>
 80050c6:	600b      	str	r3, [r1, #0]
 80050c8:	18cc      	adds	r4, r1, r3
 80050ca:	50cd      	str	r5, [r1, r3]
 80050cc:	4630      	mov	r0, r6
 80050ce:	f000 f85c 	bl	800518a <__malloc_unlock>
 80050d2:	f104 000b 	add.w	r0, r4, #11
 80050d6:	1d23      	adds	r3, r4, #4
 80050d8:	f020 0007 	bic.w	r0, r0, #7
 80050dc:	1ac3      	subs	r3, r0, r3
 80050de:	d0d3      	beq.n	8005088 <_malloc_r+0x20>
 80050e0:	425a      	negs	r2, r3
 80050e2:	50e2      	str	r2, [r4, r3]
 80050e4:	e7d0      	b.n	8005088 <_malloc_r+0x20>
 80050e6:	684b      	ldr	r3, [r1, #4]
 80050e8:	428c      	cmp	r4, r1
 80050ea:	bf16      	itet	ne
 80050ec:	6063      	strne	r3, [r4, #4]
 80050ee:	6013      	streq	r3, [r2, #0]
 80050f0:	460c      	movne	r4, r1
 80050f2:	e7eb      	b.n	80050cc <_malloc_r+0x64>
 80050f4:	460c      	mov	r4, r1
 80050f6:	6849      	ldr	r1, [r1, #4]
 80050f8:	e7cc      	b.n	8005094 <_malloc_r+0x2c>
 80050fa:	1cc4      	adds	r4, r0, #3
 80050fc:	f024 0403 	bic.w	r4, r4, #3
 8005100:	42a0      	cmp	r0, r4
 8005102:	d005      	beq.n	8005110 <_malloc_r+0xa8>
 8005104:	1a21      	subs	r1, r4, r0
 8005106:	4630      	mov	r0, r6
 8005108:	f000 f82e 	bl	8005168 <_sbrk_r>
 800510c:	3001      	adds	r0, #1
 800510e:	d0cf      	beq.n	80050b0 <_malloc_r+0x48>
 8005110:	6025      	str	r5, [r4, #0]
 8005112:	e7db      	b.n	80050cc <_malloc_r+0x64>
 8005114:	200000a0 	.word	0x200000a0
 8005118:	200000a4 	.word	0x200000a4

0800511c <_realloc_r>:
 800511c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800511e:	4607      	mov	r7, r0
 8005120:	4614      	mov	r4, r2
 8005122:	460e      	mov	r6, r1
 8005124:	b921      	cbnz	r1, 8005130 <_realloc_r+0x14>
 8005126:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800512a:	4611      	mov	r1, r2
 800512c:	f7ff bf9c 	b.w	8005068 <_malloc_r>
 8005130:	b922      	cbnz	r2, 800513c <_realloc_r+0x20>
 8005132:	f7ff ff4d 	bl	8004fd0 <_free_r>
 8005136:	4625      	mov	r5, r4
 8005138:	4628      	mov	r0, r5
 800513a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800513c:	f000 f826 	bl	800518c <_malloc_usable_size_r>
 8005140:	42a0      	cmp	r0, r4
 8005142:	d20f      	bcs.n	8005164 <_realloc_r+0x48>
 8005144:	4621      	mov	r1, r4
 8005146:	4638      	mov	r0, r7
 8005148:	f7ff ff8e 	bl	8005068 <_malloc_r>
 800514c:	4605      	mov	r5, r0
 800514e:	2800      	cmp	r0, #0
 8005150:	d0f2      	beq.n	8005138 <_realloc_r+0x1c>
 8005152:	4631      	mov	r1, r6
 8005154:	4622      	mov	r2, r4
 8005156:	f7ff fbeb 	bl	8004930 <memcpy>
 800515a:	4631      	mov	r1, r6
 800515c:	4638      	mov	r0, r7
 800515e:	f7ff ff37 	bl	8004fd0 <_free_r>
 8005162:	e7e9      	b.n	8005138 <_realloc_r+0x1c>
 8005164:	4635      	mov	r5, r6
 8005166:	e7e7      	b.n	8005138 <_realloc_r+0x1c>

08005168 <_sbrk_r>:
 8005168:	b538      	push	{r3, r4, r5, lr}
 800516a:	2300      	movs	r3, #0
 800516c:	4c05      	ldr	r4, [pc, #20]	; (8005184 <_sbrk_r+0x1c>)
 800516e:	4605      	mov	r5, r0
 8005170:	4608      	mov	r0, r1
 8005172:	6023      	str	r3, [r4, #0]
 8005174:	f7fc fc76 	bl	8001a64 <_sbrk>
 8005178:	1c43      	adds	r3, r0, #1
 800517a:	d102      	bne.n	8005182 <_sbrk_r+0x1a>
 800517c:	6823      	ldr	r3, [r4, #0]
 800517e:	b103      	cbz	r3, 8005182 <_sbrk_r+0x1a>
 8005180:	602b      	str	r3, [r5, #0]
 8005182:	bd38      	pop	{r3, r4, r5, pc}
 8005184:	20000478 	.word	0x20000478

08005188 <__malloc_lock>:
 8005188:	4770      	bx	lr

0800518a <__malloc_unlock>:
 800518a:	4770      	bx	lr

0800518c <_malloc_usable_size_r>:
 800518c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005190:	1f18      	subs	r0, r3, #4
 8005192:	2b00      	cmp	r3, #0
 8005194:	bfbc      	itt	lt
 8005196:	580b      	ldrlt	r3, [r1, r0]
 8005198:	18c0      	addlt	r0, r0, r3
 800519a:	4770      	bx	lr

0800519c <_init>:
 800519c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800519e:	bf00      	nop
 80051a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051a2:	bc08      	pop	{r3}
 80051a4:	469e      	mov	lr, r3
 80051a6:	4770      	bx	lr

080051a8 <_fini>:
 80051a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051aa:	bf00      	nop
 80051ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ae:	bc08      	pop	{r3}
 80051b0:	469e      	mov	lr, r3
 80051b2:	4770      	bx	lr
