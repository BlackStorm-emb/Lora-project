
LORA_sample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035e0  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080037b0  080037b0  000137b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003848  08003848  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003848  08003848  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003848  08003848  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003848  08003848  00013848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800384c  0800384c  0001384c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003850  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  20000070  080038c0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  080038c0  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ced9  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f29  00000000  00000000  0002cf72  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e98  00000000  00000000  0002eea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d90  00000000  00000000  0002fd38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002480  00000000  00000000  00030ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a7e4  00000000  00000000  00032f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00058a31  00000000  00000000  0003d72c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009615d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004054  00000000  00000000  000961d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003798 	.word	0x08003798

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08003798 	.word	0x08003798

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin)
{
 8000220:	b4b0      	push	{r4, r5, r7}
 8000222:	b08b      	sub	sp, #44	; 0x2c
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
 800022c:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.en_pin = en_pin;
 800022e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000232:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000236:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000238:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800023a:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 800023c:	683b      	ldr	r3, [r7, #0]
 800023e:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	613b      	str	r3, [r7, #16]

	return lcd;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	461d      	mov	r5, r3
 800024c:	f107 0410 	add.w	r4, r7, #16
 8000250:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000252:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000254:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000258:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800025c:	68f8      	ldr	r0, [r7, #12]
 800025e:	372c      	adds	r7, #44	; 0x2c
 8000260:	46bd      	mov	sp, r7
 8000262:	bcb0      	pop	{r4, r5, r7}
 8000264:	4770      	bx	lr

08000266 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000266:	b580      	push	{r7, lr}
 8000268:	b082      	sub	sp, #8
 800026a:	af00      	add	r7, sp, #0
 800026c:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, 0x33);
 800026e:	2133      	movs	r1, #51	; 0x33
 8000270:	6878      	ldr	r0, [r7, #4]
 8000272:	f000 f86a 	bl	800034a <lcd_write_command>
	lcd_write_command(lcd, 0x32);
 8000276:	2132      	movs	r1, #50	; 0x32
 8000278:	6878      	ldr	r0, [r7, #4]
 800027a:	f000 f866 	bl	800034a <lcd_write_command>
	lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 800027e:	2128      	movs	r1, #40	; 0x28
 8000280:	6878      	ldr	r0, [r7, #4]
 8000282:	f000 f862 	bl	800034a <lcd_write_command>

	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000286:	2101      	movs	r1, #1
 8000288:	6878      	ldr	r0, [r7, #4]
 800028a:	f000 f85e 	bl	800034a <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 800028e:	210c      	movs	r1, #12
 8000290:	6878      	ldr	r0, [r7, #4]
 8000292:	f000 f85a 	bl	800034a <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000296:	2106      	movs	r1, #6
 8000298:	6878      	ldr	r0, [r7, #4]
 800029a:	f000 f856 	bl	800034a <lcd_write_command>
}
 800029e:	bf00      	nop
 80002a0:	3708      	adds	r7, #8
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}

080002a6 <Lcd_disable_cursor>:

void Lcd_no_blink(Lcd_HandleTypeDef * lcd){
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D | OPT_C);		// Lcd-on, cursor-on, no-blink
}

void Lcd_disable_cursor(Lcd_HandleTypeDef * lcd){
 80002a6:	b580      	push	{r7, lr}
 80002a8:	b082      	sub	sp, #8
 80002aa:	af00      	add	r7, sp, #0
 80002ac:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 80002ae:	210c      	movs	r1, #12
 80002b0:	6878      	ldr	r0, [r7, #4]
 80002b2:	f000 f84a 	bl	800034a <lcd_write_command>
}
 80002b6:	bf00      	nop
 80002b8:	3708      	adds	r7, #8
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}

080002be <Lcd_printf>:

/**
 * Printf() for lcd
 */
void Lcd_printf(Lcd_HandleTypeDef * lcd, char * format, ...) {
 80002be:	b40e      	push	{r1, r2, r3}
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b08d      	sub	sp, #52	; 0x34
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
	char buf[PRINTF_BUF];
	va_list ap;
	va_start(ap, format);
 80002c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80002cc:	60fb      	str	r3, [r7, #12]
    vsnprintf(buf, sizeof(buf), format, ap);
 80002ce:	f107 0010 	add.w	r0, r7, #16
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80002d6:	2120      	movs	r1, #32
 80002d8:	f002 fe68 	bl	8002fac <vsniprintf>
    Lcd_string(lcd, buf);
 80002dc:	f107 0310 	add.w	r3, r7, #16
 80002e0:	4619      	mov	r1, r3
 80002e2:	6878      	ldr	r0, [r7, #4]
 80002e4:	f000 f807 	bl	80002f6 <Lcd_string>
    va_end(ap);
}
 80002e8:	bf00      	nop
 80002ea:	3734      	adds	r7, #52	; 0x34
 80002ec:	46bd      	mov	sp, r7
 80002ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80002f2:	b003      	add	sp, #12
 80002f4:	4770      	bx	lr

080002f6 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 80002f6:	b590      	push	{r4, r7, lr}
 80002f8:	b085      	sub	sp, #20
 80002fa:	af00      	add	r7, sp, #0
 80002fc:	6078      	str	r0, [r7, #4]
 80002fe:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000300:	2300      	movs	r3, #0
 8000302:	73fb      	strb	r3, [r7, #15]
 8000304:	e00a      	b.n	800031c <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000306:	7bfb      	ldrb	r3, [r7, #15]
 8000308:	683a      	ldr	r2, [r7, #0]
 800030a:	4413      	add	r3, r2
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	4619      	mov	r1, r3
 8000310:	6878      	ldr	r0, [r7, #4]
 8000312:	f000 f83d 	bl	8000390 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000316:	7bfb      	ldrb	r3, [r7, #15]
 8000318:	3301      	adds	r3, #1
 800031a:	73fb      	strb	r3, [r7, #15]
 800031c:	7bfc      	ldrb	r4, [r7, #15]
 800031e:	6838      	ldr	r0, [r7, #0]
 8000320:	f7ff ff76 	bl	8000210 <strlen>
 8000324:	4603      	mov	r3, r0
 8000326:	429c      	cmp	r4, r3
 8000328:	d3ed      	bcc.n	8000306 <Lcd_string+0x10>
	}
}
 800032a:	bf00      	nop
 800032c:	3714      	adds	r7, #20
 800032e:	46bd      	mov	sp, r7
 8000330:	bd90      	pop	{r4, r7, pc}

08000332 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000332:	b580      	push	{r7, lr}
 8000334:	b082      	sub	sp, #8
 8000336:	af00      	add	r7, sp, #0
 8000338:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 800033a:	2101      	movs	r1, #1
 800033c:	6878      	ldr	r0, [r7, #4]
 800033e:	f000 f804 	bl	800034a <lcd_write_command>
}
 8000342:	bf00      	nop
 8000344:	3708      	adds	r7, #8
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}

0800034a <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 800034a:	b580      	push	{r7, lr}
 800034c:	b082      	sub	sp, #8
 800034e:	af00      	add	r7, sp, #0
 8000350:	6078      	str	r0, [r7, #4]
 8000352:	460b      	mov	r3, r1
 8000354:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	6898      	ldr	r0, [r3, #8]
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	899b      	ldrh	r3, [r3, #12]
 800035e:	2200      	movs	r2, #0
 8000360:	4619      	mov	r1, r3
 8000362:	f001 f9cd 	bl	8001700 <HAL_GPIO_WritePin>

	lcd_write(lcd, (command >> 4), LCD_NIB);
 8000366:	78fb      	ldrb	r3, [r7, #3]
 8000368:	091b      	lsrs	r3, r3, #4
 800036a:	b2db      	uxtb	r3, r3
 800036c:	2204      	movs	r2, #4
 800036e:	4619      	mov	r1, r3
 8000370:	6878      	ldr	r0, [r7, #4]
 8000372:	f000 f830 	bl	80003d6 <lcd_write>
	lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000376:	78fb      	ldrb	r3, [r7, #3]
 8000378:	f003 030f 	and.w	r3, r3, #15
 800037c:	b2db      	uxtb	r3, r3
 800037e:	2204      	movs	r2, #4
 8000380:	4619      	mov	r1, r3
 8000382:	6878      	ldr	r0, [r7, #4]
 8000384:	f000 f827 	bl	80003d6 <lcd_write>

}
 8000388:	bf00      	nop
 800038a:	3708      	adds	r7, #8
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}

08000390 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	460b      	mov	r3, r1
 800039a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	6898      	ldr	r0, [r3, #8]
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	899b      	ldrh	r3, [r3, #12]
 80003a4:	2201      	movs	r2, #1
 80003a6:	4619      	mov	r1, r3
 80003a8:	f001 f9aa 	bl	8001700 <HAL_GPIO_WritePin>

	lcd_write(lcd, data >> 4, LCD_NIB);
 80003ac:	78fb      	ldrb	r3, [r7, #3]
 80003ae:	091b      	lsrs	r3, r3, #4
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	2204      	movs	r2, #4
 80003b4:	4619      	mov	r1, r3
 80003b6:	6878      	ldr	r0, [r7, #4]
 80003b8:	f000 f80d 	bl	80003d6 <lcd_write>
	lcd_write(lcd, data & 0x0F, LCD_NIB);
 80003bc:	78fb      	ldrb	r3, [r7, #3]
 80003be:	f003 030f 	and.w	r3, r3, #15
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	2204      	movs	r2, #4
 80003c6:	4619      	mov	r1, r3
 80003c8:	6878      	ldr	r0, [r7, #4]
 80003ca:	f000 f804 	bl	80003d6 <lcd_write>

}
 80003ce:	bf00      	nop
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}

080003d6 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 80003d6:	b580      	push	{r7, lr}
 80003d8:	b084      	sub	sp, #16
 80003da:	af00      	add	r7, sp, #0
 80003dc:	6078      	str	r0, [r7, #4]
 80003de:	460b      	mov	r3, r1
 80003e0:	70fb      	strb	r3, [r7, #3]
 80003e2:	4613      	mov	r3, r2
 80003e4:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 80003e6:	2300      	movs	r3, #0
 80003e8:	73fb      	strb	r3, [r7, #15]
 80003ea:	e019      	b.n	8000420 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681a      	ldr	r2, [r3, #0]
 80003f0:	7bfb      	ldrb	r3, [r7, #15]
 80003f2:	009b      	lsls	r3, r3, #2
 80003f4:	4413      	add	r3, r2
 80003f6:	6818      	ldr	r0, [r3, #0]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	685a      	ldr	r2, [r3, #4]
 80003fc:	7bfb      	ldrb	r3, [r7, #15]
 80003fe:	005b      	lsls	r3, r3, #1
 8000400:	4413      	add	r3, r2
 8000402:	8819      	ldrh	r1, [r3, #0]
 8000404:	78fa      	ldrb	r2, [r7, #3]
 8000406:	7bfb      	ldrb	r3, [r7, #15]
 8000408:	fa42 f303 	asr.w	r3, r2, r3
 800040c:	b2db      	uxtb	r3, r3
 800040e:	f003 0301 	and.w	r3, r3, #1
 8000412:	b2db      	uxtb	r3, r3
 8000414:	461a      	mov	r2, r3
 8000416:	f001 f973 	bl	8001700 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 800041a:	7bfb      	ldrb	r3, [r7, #15]
 800041c:	3301      	adds	r3, #1
 800041e:	73fb      	strb	r3, [r7, #15]
 8000420:	7bfa      	ldrb	r2, [r7, #15]
 8000422:	78bb      	ldrb	r3, [r7, #2]
 8000424:	429a      	cmp	r2, r3
 8000426:	d3e1      	bcc.n	80003ec <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	6918      	ldr	r0, [r3, #16]
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	8a9b      	ldrh	r3, [r3, #20]
 8000430:	2201      	movs	r2, #1
 8000432:	4619      	mov	r1, r3
 8000434:	f001 f964 	bl	8001700 <HAL_GPIO_WritePin>
	DELAY(1);
 8000438:	2001      	movs	r0, #1
 800043a:	f000 fcf7 	bl	8000e2c <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	6918      	ldr	r0, [r3, #16]
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	8a9b      	ldrh	r3, [r3, #20]
 8000446:	2200      	movs	r2, #0
 8000448:	4619      	mov	r1, r3
 800044a:	f001 f959 	bl	8001700 <HAL_GPIO_WritePin>
}
 800044e:	bf00      	nop
 8000450:	3710      	adds	r7, #16
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
	...

08000458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000458:	b5b0      	push	{r4, r5, r7, lr}
 800045a:	b096      	sub	sp, #88	; 0x58
 800045c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
  Lcd_PortType ports[] = {
 800045e:	4b33      	ldr	r3, [pc, #204]	; (800052c <main+0xd4>)
 8000460:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000464:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000466:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  GPIOA, GPIOB, GPIOB, GPIOB
  };

  Lcd_PinType pins[] = {LCD_DB4_Pin, LCD_DB5_Pin, LCD_DB6_Pin, LCD_DB7_Pin};
 800046a:	4a31      	ldr	r2, [pc, #196]	; (8000530 <main+0xd8>)
 800046c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000470:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000474:	e883 0003 	stmia.w	r3, {r0, r1}

  Lcd_HandleTypeDef lcd;
  lcd = Lcd_create(ports, pins, GPIOA, LCD_A0_Pin, GPIOA, LCD_E_Pin);
 8000478:	4638      	mov	r0, r7
 800047a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800047e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000482:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000486:	9302      	str	r3, [sp, #8]
 8000488:	4b2a      	ldr	r3, [pc, #168]	; (8000534 <main+0xdc>)
 800048a:	9301      	str	r3, [sp, #4]
 800048c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000490:	9300      	str	r3, [sp, #0]
 8000492:	4b28      	ldr	r3, [pc, #160]	; (8000534 <main+0xdc>)
 8000494:	f7ff fec4 	bl	8000220 <Lcd_create>
 8000498:	f107 0418 	add.w	r4, r7, #24
 800049c:	463d      	mov	r5, r7
 800049e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80004a6:	e884 0003 	stmia.w	r4, {r0, r1}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004aa:	f000 fc66 	bl	8000d7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ae:	f000 f847 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b2:	f000 f9af 	bl	8000814 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004b6:	f000 f899 	bl	80005ec <MX_ADC1_Init>
  MX_SPI1_Init();
 80004ba:	f000 f8d5 	bl	8000668 <MX_SPI1_Init>
  MX_TIM2_Init();
 80004be:	f000 f909 	bl	80006d4 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80004c2:	f000 f97d 	bl	80007c0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  Lcd_init(&lcd);
 80004c6:	f107 0318 	add.w	r3, r7, #24
 80004ca:	4618      	mov	r0, r3
 80004cc:	f7ff fecb 	bl	8000266 <Lcd_init>
  Lcd_clear(&lcd);
 80004d0:	f107 0318 	add.w	r3, r7, #24
 80004d4:	4618      	mov	r0, r3
 80004d6:	f7ff ff2c 	bl	8000332 <Lcd_clear>
  Lcd_printf(&lcd, "Hello World %d%d", 9, 12);
 80004da:	f107 0018 	add.w	r0, r7, #24
 80004de:	230c      	movs	r3, #12
 80004e0:	2209      	movs	r2, #9
 80004e2:	4915      	ldr	r1, [pc, #84]	; (8000538 <main+0xe0>)
 80004e4:	f7ff feeb 	bl	80002be <Lcd_printf>

  //Lcd_string(&lcd, "Hello World");
  Lcd_disable_cursor(&lcd);
 80004e8:	f107 0318 	add.w	r3, r7, #24
 80004ec:	4618      	mov	r0, r3
 80004ee:	f7ff feda 	bl	80002a6 <Lcd_disable_cursor>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_WritePin(GPIOB, HL4_Pin, GPIO_PIN_SET);
 80004f2:	2201      	movs	r2, #1
 80004f4:	2102      	movs	r1, #2
 80004f6:	4811      	ldr	r0, [pc, #68]	; (800053c <main+0xe4>)
 80004f8:	f001 f902 	bl	8001700 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, HL3_Pin, GPIO_PIN_RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	2104      	movs	r1, #4
 8000500:	480e      	ldr	r0, [pc, #56]	; (800053c <main+0xe4>)
 8000502:	f001 f8fd 	bl	8001700 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000506:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800050a:	f000 fc8f 	bl	8000e2c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, HL4_Pin, GPIO_PIN_RESET);
 800050e:	2200      	movs	r2, #0
 8000510:	2102      	movs	r1, #2
 8000512:	480a      	ldr	r0, [pc, #40]	; (800053c <main+0xe4>)
 8000514:	f001 f8f4 	bl	8001700 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, HL3_Pin, GPIO_PIN_SET);
 8000518:	2201      	movs	r2, #1
 800051a:	2104      	movs	r1, #4
 800051c:	4807      	ldr	r0, [pc, #28]	; (800053c <main+0xe4>)
 800051e:	f001 f8ef 	bl	8001700 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000522:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000526:	f000 fc81 	bl	8000e2c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, HL4_Pin, GPIO_PIN_SET);
 800052a:	e7e2      	b.n	80004f2 <main+0x9a>
 800052c:	080037c4 	.word	0x080037c4
 8000530:	080037d4 	.word	0x080037d4
 8000534:	40010800 	.word	0x40010800
 8000538:	080037b0 	.word	0x080037b0
 800053c:	40010c00 	.word	0x40010c00

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b092      	sub	sp, #72	; 0x48
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0320 	add.w	r3, r7, #32
 800054a:	2228      	movs	r2, #40	; 0x28
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f002 fcf7 	bl	8002f42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000564:	463b      	mov	r3, r7
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800056e:	2301      	movs	r3, #1
 8000570:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000572:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000576:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000578:	2300      	movs	r3, #0
 800057a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057c:	2302      	movs	r3, #2
 800057e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000580:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000584:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000586:	2300      	movs	r3, #0
 8000588:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	4618      	mov	r0, r3
 8000590:	f001 f8ce 	bl	8001730 <HAL_RCC_OscConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800059a:	f000 f9c5 	bl	8000928 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059e:	230f      	movs	r3, #15
 80005a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a2:	2302      	movs	r3, #2
 80005a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005b2:	f107 030c 	add.w	r3, r7, #12
 80005b6:	2100      	movs	r1, #0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f001 fb39 	bl	8001c30 <HAL_RCC_ClockConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80005c4:	f000 f9b0 	bl	8000928 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005c8:	2302      	movs	r3, #2
 80005ca:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005d0:	463b      	mov	r3, r7
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 fc98 	bl	8001f08 <HAL_RCCEx_PeriphCLKConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80005de:	f000 f9a3 	bl	8000928 <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3748      	adds	r7, #72	; 0x48
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80005fc:	4b18      	ldr	r3, [pc, #96]	; (8000660 <MX_ADC1_Init+0x74>)
 80005fe:	4a19      	ldr	r2, [pc, #100]	; (8000664 <MX_ADC1_Init+0x78>)
 8000600:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000602:	4b17      	ldr	r3, [pc, #92]	; (8000660 <MX_ADC1_Init+0x74>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000608:	4b15      	ldr	r3, [pc, #84]	; (8000660 <MX_ADC1_Init+0x74>)
 800060a:	2200      	movs	r2, #0
 800060c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800060e:	4b14      	ldr	r3, [pc, #80]	; (8000660 <MX_ADC1_Init+0x74>)
 8000610:	2200      	movs	r2, #0
 8000612:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <MX_ADC1_Init+0x74>)
 8000616:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800061a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800061c:	4b10      	ldr	r3, [pc, #64]	; (8000660 <MX_ADC1_Init+0x74>)
 800061e:	2200      	movs	r2, #0
 8000620:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000622:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <MX_ADC1_Init+0x74>)
 8000624:	2201      	movs	r2, #1
 8000626:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000628:	480d      	ldr	r0, [pc, #52]	; (8000660 <MX_ADC1_Init+0x74>)
 800062a:	f000 fc21 	bl	8000e70 <HAL_ADC_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000634:	f000 f978 	bl	8000928 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000638:	2301      	movs	r3, #1
 800063a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800063c:	2301      	movs	r3, #1
 800063e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	4619      	mov	r1, r3
 8000648:	4805      	ldr	r0, [pc, #20]	; (8000660 <MX_ADC1_Init+0x74>)
 800064a:	f000 fce9 	bl	8001020 <HAL_ADC_ConfigChannel>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000654:	f000 f968 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000658:	bf00      	nop
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	200000d8 	.word	0x200000d8
 8000664:	40012400 	.word	0x40012400

08000668 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800066c:	4b17      	ldr	r3, [pc, #92]	; (80006cc <MX_SPI1_Init+0x64>)
 800066e:	4a18      	ldr	r2, [pc, #96]	; (80006d0 <MX_SPI1_Init+0x68>)
 8000670:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000672:	4b16      	ldr	r3, [pc, #88]	; (80006cc <MX_SPI1_Init+0x64>)
 8000674:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000678:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800067a:	4b14      	ldr	r3, [pc, #80]	; (80006cc <MX_SPI1_Init+0x64>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <MX_SPI1_Init+0x64>)
 8000682:	2200      	movs	r2, #0
 8000684:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000686:	4b11      	ldr	r3, [pc, #68]	; (80006cc <MX_SPI1_Init+0x64>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800068c:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <MX_SPI1_Init+0x64>)
 800068e:	2200      	movs	r2, #0
 8000690:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <MX_SPI1_Init+0x64>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <MX_SPI1_Init+0x64>)
 800069a:	2200      	movs	r2, #0
 800069c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <MX_SPI1_Init+0x64>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_SPI1_Init+0x64>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006aa:	4b08      	ldr	r3, [pc, #32]	; (80006cc <MX_SPI1_Init+0x64>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_SPI1_Init+0x64>)
 80006b2:	220a      	movs	r2, #10
 80006b4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_SPI1_Init+0x64>)
 80006b8:	f001 fccc 	bl	8002054 <HAL_SPI_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_SPI1_Init+0x5e>
  {
    Error_Handler();
 80006c2:	f000 f931 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000108 	.word	0x20000108
 80006d0:	40013000 	.word	0x40013000

080006d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08e      	sub	sp, #56	; 0x38
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e8:	f107 0320 	add.w	r3, r7, #32
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
 8000700:	615a      	str	r2, [r3, #20]
 8000702:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000704:	4b2d      	ldr	r3, [pc, #180]	; (80007bc <MX_TIM2_Init+0xe8>)
 8000706:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800070a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 800070c:	4b2b      	ldr	r3, [pc, #172]	; (80007bc <MX_TIM2_Init+0xe8>)
 800070e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000712:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000714:	4b29      	ldr	r3, [pc, #164]	; (80007bc <MX_TIM2_Init+0xe8>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 800071a:	4b28      	ldr	r3, [pc, #160]	; (80007bc <MX_TIM2_Init+0xe8>)
 800071c:	220a      	movs	r2, #10
 800071e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000720:	4b26      	ldr	r3, [pc, #152]	; (80007bc <MX_TIM2_Init+0xe8>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000726:	4b25      	ldr	r3, [pc, #148]	; (80007bc <MX_TIM2_Init+0xe8>)
 8000728:	2280      	movs	r2, #128	; 0x80
 800072a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800072c:	4823      	ldr	r0, [pc, #140]	; (80007bc <MX_TIM2_Init+0xe8>)
 800072e:	f001 fcea 	bl	8002106 <HAL_TIM_Base_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000738:	f000 f8f6 	bl	8000928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800073c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000740:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000742:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000746:	4619      	mov	r1, r3
 8000748:	481c      	ldr	r0, [pc, #112]	; (80007bc <MX_TIM2_Init+0xe8>)
 800074a:	f001 fe01 	bl	8002350 <HAL_TIM_ConfigClockSource>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000754:	f000 f8e8 	bl	8000928 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000758:	4818      	ldr	r0, [pc, #96]	; (80007bc <MX_TIM2_Init+0xe8>)
 800075a:	f001 fcff 	bl	800215c <HAL_TIM_PWM_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000764:	f000 f8e0 	bl	8000928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000768:	2300      	movs	r3, #0
 800076a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800076c:	2300      	movs	r3, #0
 800076e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000770:	f107 0320 	add.w	r3, r7, #32
 8000774:	4619      	mov	r1, r3
 8000776:	4811      	ldr	r0, [pc, #68]	; (80007bc <MX_TIM2_Init+0xe8>)
 8000778:	f002 f994 	bl	8002aa4 <HAL_TIMEx_MasterConfigSynchronization>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000782:	f000 f8d1 	bl	8000928 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000786:	2360      	movs	r3, #96	; 0x60
 8000788:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	2200      	movs	r2, #0
 800079a:	4619      	mov	r1, r3
 800079c:	4807      	ldr	r0, [pc, #28]	; (80007bc <MX_TIM2_Init+0xe8>)
 800079e:	f001 fd11 	bl	80021c4 <HAL_TIM_PWM_ConfigChannel>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80007a8:	f000 f8be 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007ac:	4803      	ldr	r0, [pc, #12]	; (80007bc <MX_TIM2_Init+0xe8>)
 80007ae:	f000 f995 	bl	8000adc <HAL_TIM_MspPostInit>

}
 80007b2:	bf00      	nop
 80007b4:	3738      	adds	r7, #56	; 0x38
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000160 	.word	0x20000160

080007c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_USART3_UART_Init+0x4c>)
 80007c6:	4a12      	ldr	r2, [pc, #72]	; (8000810 <MX_USART3_UART_Init+0x50>)
 80007c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <MX_USART3_UART_Init+0x4c>)
 80007cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_USART3_UART_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_USART3_UART_Init+0x4c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <MX_USART3_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_USART3_UART_Init+0x4c>)
 80007e6:	220c      	movs	r2, #12
 80007e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <MX_USART3_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_USART3_UART_Init+0x4c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_USART3_UART_Init+0x4c>)
 80007f8:	f002 f998 	bl	8002b2c <HAL_UART_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000802:	f000 f891 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000098 	.word	0x20000098
 8000810:	40004800 	.word	0x40004800

08000814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b088      	sub	sp, #32
 8000818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 0310 	add.w	r3, r7, #16
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000828:	4b3b      	ldr	r3, [pc, #236]	; (8000918 <MX_GPIO_Init+0x104>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	4a3a      	ldr	r2, [pc, #232]	; (8000918 <MX_GPIO_Init+0x104>)
 800082e:	f043 0310 	orr.w	r3, r3, #16
 8000832:	6193      	str	r3, [r2, #24]
 8000834:	4b38      	ldr	r3, [pc, #224]	; (8000918 <MX_GPIO_Init+0x104>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	f003 0310 	and.w	r3, r3, #16
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000840:	4b35      	ldr	r3, [pc, #212]	; (8000918 <MX_GPIO_Init+0x104>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	4a34      	ldr	r2, [pc, #208]	; (8000918 <MX_GPIO_Init+0x104>)
 8000846:	f043 0320 	orr.w	r3, r3, #32
 800084a:	6193      	str	r3, [r2, #24]
 800084c:	4b32      	ldr	r3, [pc, #200]	; (8000918 <MX_GPIO_Init+0x104>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	f003 0320 	and.w	r3, r3, #32
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000858:	4b2f      	ldr	r3, [pc, #188]	; (8000918 <MX_GPIO_Init+0x104>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	4a2e      	ldr	r2, [pc, #184]	; (8000918 <MX_GPIO_Init+0x104>)
 800085e:	f043 0304 	orr.w	r3, r3, #4
 8000862:	6193      	str	r3, [r2, #24]
 8000864:	4b2c      	ldr	r3, [pc, #176]	; (8000918 <MX_GPIO_Init+0x104>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	f003 0304 	and.w	r3, r3, #4
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000870:	4b29      	ldr	r3, [pc, #164]	; (8000918 <MX_GPIO_Init+0x104>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	4a28      	ldr	r2, [pc, #160]	; (8000918 <MX_GPIO_Init+0x104>)
 8000876:	f043 0308 	orr.w	r3, r3, #8
 800087a:	6193      	str	r3, [r2, #24]
 800087c:	4b26      	ldr	r3, [pc, #152]	; (8000918 <MX_GPIO_Init+0x104>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	f003 0308 	and.w	r3, r3, #8
 8000884:	603b      	str	r3, [r7, #0]
 8000886:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LORA_RST_Pin|LORA_DIO0_Pin|LCD_DB4_Pin|LCD_E_Pin
 8000888:	2200      	movs	r2, #0
 800088a:	f240 710c 	movw	r1, #1804	; 0x70c
 800088e:	4823      	ldr	r0, [pc, #140]	; (800091c <MX_GPIO_Init+0x108>)
 8000890:	f000 ff36 	bl	8001700 <HAL_GPIO_WritePin>
                          |LCD_A0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay_Pin|HL4_Pin|HL3_Pin|BL_E_Pin
 8000894:	2200      	movs	r2, #0
 8000896:	f24f 2107 	movw	r1, #61959	; 0xf207
 800089a:	4821      	ldr	r0, [pc, #132]	; (8000920 <MX_GPIO_Init+0x10c>)
 800089c:	f000 ff30 	bl	8001700 <HAL_GPIO_WritePin>
                          |LCD_DB7_Pin|LCD_DB6_Pin|LCD_DB5_Pin|PB6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : but_1_Pin but_2_Pin */
  GPIO_InitStruct.Pin = but_1_Pin|but_2_Pin;
 80008a0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80008a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a6:	2300      	movs	r3, #0
 80008a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ae:	f107 0310 	add.w	r3, r7, #16
 80008b2:	4619      	mov	r1, r3
 80008b4:	481b      	ldr	r0, [pc, #108]	; (8000924 <MX_GPIO_Init+0x110>)
 80008b6:	f000 fdc9 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_RST_Pin LORA_DIO0_Pin LCD_DB4_Pin LCD_E_Pin
                           LCD_A0_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|LORA_DIO0_Pin|LCD_DB4_Pin|LCD_E_Pin
 80008ba:	f240 730c 	movw	r3, #1804	; 0x70c
 80008be:	613b      	str	r3, [r7, #16]
                          |LCD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c0:	2301      	movs	r3, #1
 80008c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2302      	movs	r3, #2
 80008ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008cc:	f107 0310 	add.w	r3, r7, #16
 80008d0:	4619      	mov	r1, r3
 80008d2:	4812      	ldr	r0, [pc, #72]	; (800091c <MX_GPIO_Init+0x108>)
 80008d4:	f000 fdba 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay_Pin HL4_Pin HL3_Pin BL_E_Pin
                           LCD_DB7_Pin LCD_DB6_Pin LCD_DB5_Pin PB6_Pin */
  GPIO_InitStruct.Pin = Relay_Pin|HL4_Pin|HL3_Pin|BL_E_Pin
 80008d8:	f24f 2307 	movw	r3, #61959	; 0xf207
 80008dc:	613b      	str	r3, [r7, #16]
                          |LCD_DB7_Pin|LCD_DB6_Pin|LCD_DB5_Pin|PB6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008de:	2301      	movs	r3, #1
 80008e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2302      	movs	r3, #2
 80008e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ea:	f107 0310 	add.w	r3, r7, #16
 80008ee:	4619      	mov	r1, r3
 80008f0:	480b      	ldr	r0, [pc, #44]	; (8000920 <MX_GPIO_Init+0x10c>)
 80008f2:	f000 fdab 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12_Pin PA11_Pin PB5_Pin PB8_Pin
                           PB7_Pin */
  GPIO_InitStruct.Pin = PA12_Pin|PA11_Pin|PB5_Pin|PB8_Pin
 80008f6:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 80008fa:	613b      	str	r3, [r7, #16]
                          |PB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000904:	f107 0310 	add.w	r3, r7, #16
 8000908:	4619      	mov	r1, r3
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_GPIO_Init+0x10c>)
 800090c:	f000 fd9e 	bl	800144c <HAL_GPIO_Init>

}
 8000910:	bf00      	nop
 8000912:	3720      	adds	r7, #32
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40021000 	.word	0x40021000
 800091c:	40010800 	.word	0x40010800
 8000920:	40010c00 	.word	0x40010c00
 8000924:	40011000 	.word	0x40011000

08000928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr

08000934 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <HAL_MspInit+0x5c>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	4a14      	ldr	r2, [pc, #80]	; (8000990 <HAL_MspInit+0x5c>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6193      	str	r3, [r2, #24]
 8000946:	4b12      	ldr	r3, [pc, #72]	; (8000990 <HAL_MspInit+0x5c>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <HAL_MspInit+0x5c>)
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	4a0e      	ldr	r2, [pc, #56]	; (8000990 <HAL_MspInit+0x5c>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095c:	61d3      	str	r3, [r2, #28]
 800095e:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <HAL_MspInit+0x5c>)
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800096a:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <HAL_MspInit+0x60>)
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	4a04      	ldr	r2, [pc, #16]	; (8000994 <HAL_MspInit+0x60>)
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000986:	bf00      	nop
 8000988:	3714      	adds	r7, #20
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr
 8000990:	40021000 	.word	0x40021000
 8000994:	40010000 	.word	0x40010000

08000998 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b088      	sub	sp, #32
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 0310 	add.w	r3, r7, #16
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a14      	ldr	r2, [pc, #80]	; (8000a04 <HAL_ADC_MspInit+0x6c>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d121      	bne.n	80009fc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009b8:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <HAL_ADC_MspInit+0x70>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	4a12      	ldr	r2, [pc, #72]	; (8000a08 <HAL_ADC_MspInit+0x70>)
 80009be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009c2:	6193      	str	r3, [r2, #24]
 80009c4:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <HAL_ADC_MspInit+0x70>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d0:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <HAL_ADC_MspInit+0x70>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	4a0c      	ldr	r2, [pc, #48]	; (8000a08 <HAL_ADC_MspInit+0x70>)
 80009d6:	f043 0304 	orr.w	r3, r3, #4
 80009da:	6193      	str	r3, [r2, #24]
 80009dc:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <HAL_ADC_MspInit+0x70>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	f003 0304 	and.w	r3, r3, #4
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = TEMP_Pin|Cell_Voltage_Pin;
 80009e8:	2303      	movs	r3, #3
 80009ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f0:	f107 0310 	add.w	r3, r7, #16
 80009f4:	4619      	mov	r1, r3
 80009f6:	4805      	ldr	r0, [pc, #20]	; (8000a0c <HAL_ADC_MspInit+0x74>)
 80009f8:	f000 fd28 	bl	800144c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009fc:	bf00      	nop
 80009fe:	3720      	adds	r7, #32
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40012400 	.word	0x40012400
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	40010800 	.word	0x40010800

08000a10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b088      	sub	sp, #32
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0310 	add.w	r3, r7, #16
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a1b      	ldr	r2, [pc, #108]	; (8000a98 <HAL_SPI_MspInit+0x88>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d12f      	bne.n	8000a90 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a30:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <HAL_SPI_MspInit+0x8c>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	4a19      	ldr	r2, [pc, #100]	; (8000a9c <HAL_SPI_MspInit+0x8c>)
 8000a36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a3a:	6193      	str	r3, [r2, #24]
 8000a3c:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <HAL_SPI_MspInit+0x8c>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <HAL_SPI_MspInit+0x8c>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	4a13      	ldr	r2, [pc, #76]	; (8000a9c <HAL_SPI_MspInit+0x8c>)
 8000a4e:	f043 0304 	orr.w	r3, r3, #4
 8000a52:	6193      	str	r3, [r2, #24]
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <HAL_SPI_MspInit+0x8c>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	f003 0304 	and.w	r3, r3, #4
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000a60:	2350      	movs	r3, #80	; 0x50
 8000a62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6c:	f107 0310 	add.w	r3, r7, #16
 8000a70:	4619      	mov	r1, r3
 8000a72:	480b      	ldr	r0, [pc, #44]	; (8000aa0 <HAL_SPI_MspInit+0x90>)
 8000a74:	f000 fcea 	bl	800144c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000a78:	23a0      	movs	r3, #160	; 0xa0
 8000a7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a80:	2303      	movs	r3, #3
 8000a82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a84:	f107 0310 	add.w	r3, r7, #16
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <HAL_SPI_MspInit+0x90>)
 8000a8c:	f000 fcde 	bl	800144c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a90:	bf00      	nop
 8000a92:	3720      	adds	r7, #32
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40013000 	.word	0x40013000
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	40010800 	.word	0x40010800

08000aa4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ab4:	d10b      	bne.n	8000ace <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <HAL_TIM_Base_MspInit+0x34>)
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	4a07      	ldr	r2, [pc, #28]	; (8000ad8 <HAL_TIM_Base_MspInit+0x34>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	61d3      	str	r3, [r2, #28]
 8000ac2:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <HAL_TIM_Base_MspInit+0x34>)
 8000ac4:	69db      	ldr	r3, [r3, #28]
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ace:	bf00      	nop
 8000ad0:	3714      	adds	r7, #20
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr
 8000ad8:	40021000 	.word	0x40021000

08000adc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b088      	sub	sp, #32
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 030c 	add.w	r3, r7, #12
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000afa:	d12a      	bne.n	8000b52 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afc:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <HAL_TIM_MspPostInit+0x80>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	4a16      	ldr	r2, [pc, #88]	; (8000b5c <HAL_TIM_MspPostInit+0x80>)
 8000b02:	f043 0304 	orr.w	r3, r3, #4
 8000b06:	6193      	str	r3, [r2, #24]
 8000b08:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <HAL_TIM_MspPostInit+0x80>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	f003 0304 	and.w	r3, r3, #4
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b18:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b22:	f107 030c 	add.w	r3, r7, #12
 8000b26:	4619      	mov	r1, r3
 8000b28:	480d      	ldr	r0, [pc, #52]	; (8000b60 <HAL_TIM_MspPostInit+0x84>)
 8000b2a:	f000 fc8f 	bl	800144c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <HAL_TIM_MspPostInit+0x88>)
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	61fb      	str	r3, [r7, #28]
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000b3a:	61fb      	str	r3, [r7, #28]
 8000b3c:	69fb      	ldr	r3, [r7, #28]
 8000b3e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000b42:	61fb      	str	r3, [r7, #28]
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b4a:	61fb      	str	r3, [r7, #28]
 8000b4c:	4a05      	ldr	r2, [pc, #20]	; (8000b64 <HAL_TIM_MspPostInit+0x88>)
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b52:	bf00      	nop
 8000b54:	3720      	adds	r7, #32
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	40010800 	.word	0x40010800
 8000b64:	40010000 	.word	0x40010000

08000b68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0310 	add.w	r3, r7, #16
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a1c      	ldr	r2, [pc, #112]	; (8000bf4 <HAL_UART_MspInit+0x8c>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d131      	bne.n	8000bec <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b88:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <HAL_UART_MspInit+0x90>)
 8000b8a:	69db      	ldr	r3, [r3, #28]
 8000b8c:	4a1a      	ldr	r2, [pc, #104]	; (8000bf8 <HAL_UART_MspInit+0x90>)
 8000b8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b92:	61d3      	str	r3, [r2, #28]
 8000b94:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <HAL_UART_MspInit+0x90>)
 8000b96:	69db      	ldr	r3, [r3, #28]
 8000b98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba0:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <HAL_UART_MspInit+0x90>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	4a14      	ldr	r2, [pc, #80]	; (8000bf8 <HAL_UART_MspInit+0x90>)
 8000ba6:	f043 0308 	orr.w	r3, r3, #8
 8000baa:	6193      	str	r3, [r2, #24]
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <HAL_UART_MspInit+0x90>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	f003 0308 	and.w	r3, r3, #8
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc6:	f107 0310 	add.w	r3, r7, #16
 8000bca:	4619      	mov	r1, r3
 8000bcc:	480b      	ldr	r0, [pc, #44]	; (8000bfc <HAL_UART_MspInit+0x94>)
 8000bce:	f000 fc3d 	bl	800144c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000bd2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be0:	f107 0310 	add.w	r3, r7, #16
 8000be4:	4619      	mov	r1, r3
 8000be6:	4805      	ldr	r0, [pc, #20]	; (8000bfc <HAL_UART_MspInit+0x94>)
 8000be8:	f000 fc30 	bl	800144c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000bec:	bf00      	nop
 8000bee:	3720      	adds	r7, #32
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40004800 	.word	0x40004800
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	40010c00 	.word	0x40010c00

08000c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr

08000c0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <HardFault_Handler+0x4>

08000c12 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c16:	e7fe      	b.n	8000c16 <MemManage_Handler+0x4>

08000c18 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <BusFault_Handler+0x4>

08000c1e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c22:	e7fe      	b.n	8000c22 <UsageFault_Handler+0x4>

08000c24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr

08000c30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr

08000c3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr

08000c48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c4c:	f000 f8d2 	bl	8000df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c5c:	4a14      	ldr	r2, [pc, #80]	; (8000cb0 <_sbrk+0x5c>)
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <_sbrk+0x60>)
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <_sbrk+0x64>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d102      	bne.n	8000c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <_sbrk+0x64>)
 8000c72:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <_sbrk+0x68>)
 8000c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d207      	bcs.n	8000c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c84:	f002 f928 	bl	8002ed8 <__errno>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	230c      	movs	r3, #12
 8000c8c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c92:	e009      	b.n	8000ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <_sbrk+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c9a:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <_sbrk+0x64>)
 8000ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20002000 	.word	0x20002000
 8000cb4:	00000400 	.word	0x00000400
 8000cb8:	2000008c 	.word	0x2000008c
 8000cbc:	200001a8 	.word	0x200001a8

08000cc0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000cc4:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <SystemInit+0x64>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a16      	ldr	r2, [pc, #88]	; (8000d24 <SystemInit+0x64>)
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000cd0:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <SystemInit+0x64>)
 8000cd2:	685a      	ldr	r2, [r3, #4]
 8000cd4:	4913      	ldr	r1, [pc, #76]	; (8000d24 <SystemInit+0x64>)
 8000cd6:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <SystemInit+0x68>)
 8000cd8:	4013      	ands	r3, r2
 8000cda:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <SystemInit+0x64>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a10      	ldr	r2, [pc, #64]	; (8000d24 <SystemInit+0x64>)
 8000ce2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cea:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cec:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <SystemInit+0x64>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0c      	ldr	r2, [pc, #48]	; (8000d24 <SystemInit+0x64>)
 8000cf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cf6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <SystemInit+0x64>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	4a09      	ldr	r2, [pc, #36]	; (8000d24 <SystemInit+0x64>)
 8000cfe:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000d02:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
#elif defined(STM32F100xB) || defined(STM32F100xE)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <SystemInit+0x64>)
 8000d06:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000d0a:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <SystemInit+0x64>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <SystemInit+0x6c>)
 8000d14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d18:	609a      	str	r2, [r3, #8]
#endif 
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bc80      	pop	{r7}
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	40021000 	.word	0x40021000
 8000d28:	f8ff0000 	.word	0xf8ff0000
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000d30:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000d32:	e003      	b.n	8000d3c <LoopCopyDataInit>

08000d34 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000d34:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000d36:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000d38:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000d3a:	3104      	adds	r1, #4

08000d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000d3c:	480a      	ldr	r0, [pc, #40]	; (8000d68 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000d40:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000d42:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000d44:	d3f6      	bcc.n	8000d34 <CopyDataInit>
  ldr r2, =_sbss
 8000d46:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000d48:	e002      	b.n	8000d50 <LoopFillZerobss>

08000d4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000d4c:	f842 3b04 	str.w	r3, [r2], #4

08000d50 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000d52:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000d54:	d3f9      	bcc.n	8000d4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d56:	f7ff ffb3 	bl	8000cc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d5a:	f002 f8c3 	bl	8002ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d5e:	f7ff fb7b 	bl	8000458 <main>
  bx lr
 8000d62:	4770      	bx	lr
  ldr r3, =_sidata
 8000d64:	08003850 	.word	0x08003850
  ldr r0, =_sdata
 8000d68:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000d6c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000d70:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000d74:	200001a8 	.word	0x200001a8

08000d78 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d78:	e7fe      	b.n	8000d78 <ADC1_IRQHandler>

08000d7a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d7e:	2003      	movs	r0, #3
 8000d80:	f000 fb30 	bl	80013e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d84:	2000      	movs	r0, #0
 8000d86:	f000 f805 	bl	8000d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d8a:	f7ff fdd3 	bl	8000934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d8e:	2300      	movs	r3, #0
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <HAL_InitTick+0x54>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <HAL_InitTick+0x58>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	4619      	mov	r1, r3
 8000da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db2:	4618      	mov	r0, r3
 8000db4:	f000 fb3d 	bl	8001432 <HAL_SYSTICK_Config>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e00e      	b.n	8000de0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b0f      	cmp	r3, #15
 8000dc6:	d80a      	bhi.n	8000dde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd0:	f000 fb13 	bl	80013fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dd4:	4a06      	ldr	r2, [pc, #24]	; (8000df0 <HAL_InitTick+0x5c>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e000      	b.n	8000de0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000000 	.word	0x20000000
 8000dec:	20000008 	.word	0x20000008
 8000df0:	20000004 	.word	0x20000004

08000df4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <HAL_IncTick+0x1c>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <HAL_IncTick+0x20>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4413      	add	r3, r2
 8000e04:	4a03      	ldr	r2, [pc, #12]	; (8000e14 <HAL_IncTick+0x20>)
 8000e06:	6013      	str	r3, [r2, #0]
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr
 8000e10:	20000008 	.word	0x20000008
 8000e14:	200001a0 	.word	0x200001a0

08000e18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e1c:	4b02      	ldr	r3, [pc, #8]	; (8000e28 <HAL_GetTick+0x10>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr
 8000e28:	200001a0 	.word	0x200001a0

08000e2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e34:	f7ff fff0 	bl	8000e18 <HAL_GetTick>
 8000e38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e44:	d005      	beq.n	8000e52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e46:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <HAL_Delay+0x40>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	4413      	add	r3, r2
 8000e50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e52:	bf00      	nop
 8000e54:	f7ff ffe0 	bl	8000e18 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d8f7      	bhi.n	8000e54 <HAL_Delay+0x28>
  {
  }
}
 8000e64:	bf00      	nop
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20000008 	.word	0x20000008

08000e70 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000e80:	2300      	movs	r3, #0
 8000e82:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000e84:	2300      	movs	r3, #0
 8000e86:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d101      	bne.n	8000e92 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e0be      	b.n	8001010 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d109      	bne.n	8000eb4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff fd72 	bl	8000998 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f000 f9ab 	bl	8001210 <ADC_ConversionStop_Disable>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec2:	f003 0310 	and.w	r3, r3, #16
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f040 8099 	bne.w	8000ffe <HAL_ADC_Init+0x18e>
 8000ecc:	7dfb      	ldrb	r3, [r7, #23]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	f040 8095 	bne.w	8000ffe <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000edc:	f023 0302 	bic.w	r3, r3, #2
 8000ee0:	f043 0202 	orr.w	r2, r3, #2
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ef0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	7b1b      	ldrb	r3, [r3, #12]
 8000ef6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ef8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f08:	d003      	beq.n	8000f12 <HAL_ADC_Init+0xa2>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d102      	bne.n	8000f18 <HAL_ADC_Init+0xa8>
 8000f12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f16:	e000      	b.n	8000f1a <HAL_ADC_Init+0xaa>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	7d1b      	ldrb	r3, [r3, #20]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d119      	bne.n	8000f5c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	7b1b      	ldrb	r3, [r3, #12]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d109      	bne.n	8000f44 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	3b01      	subs	r3, #1
 8000f36:	035a      	lsls	r2, r3, #13
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	e00b      	b.n	8000f5c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f48:	f043 0220 	orr.w	r2, r3, #32
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f54:	f043 0201 	orr.w	r2, r3, #1
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	689a      	ldr	r2, [r3, #8]
 8000f76:	4b28      	ldr	r3, [pc, #160]	; (8001018 <HAL_ADC_Init+0x1a8>)
 8000f78:	4013      	ands	r3, r2
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	6812      	ldr	r2, [r2, #0]
 8000f7e:	68b9      	ldr	r1, [r7, #8]
 8000f80:	430b      	orrs	r3, r1
 8000f82:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f8c:	d003      	beq.n	8000f96 <HAL_ADC_Init+0x126>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d104      	bne.n	8000fa0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	691b      	ldr	r3, [r3, #16]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	051b      	lsls	r3, r3, #20
 8000f9e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	689a      	ldr	r2, [r3, #8]
 8000fba:	4b18      	ldr	r3, [pc, #96]	; (800101c <HAL_ADC_Init+0x1ac>)
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d10b      	bne.n	8000fdc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fce:	f023 0303 	bic.w	r3, r3, #3
 8000fd2:	f043 0201 	orr.w	r2, r3, #1
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fda:	e018      	b.n	800100e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe0:	f023 0312 	bic.w	r3, r3, #18
 8000fe4:	f043 0210 	orr.w	r2, r3, #16
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff0:	f043 0201 	orr.w	r2, r3, #1
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ffc:	e007      	b.n	800100e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001002:	f043 0210 	orr.w	r2, r3, #16
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800100e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	ffe1f7fd 	.word	0xffe1f7fd
 800101c:	ff1f0efe 	.word	0xff1f0efe

08001020 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800102e:	2300      	movs	r3, #0
 8001030:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001038:	2b01      	cmp	r3, #1
 800103a:	d101      	bne.n	8001040 <HAL_ADC_ConfigChannel+0x20>
 800103c:	2302      	movs	r3, #2
 800103e:	e0dc      	b.n	80011fa <HAL_ADC_ConfigChannel+0x1da>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2201      	movs	r2, #1
 8001044:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	2b06      	cmp	r3, #6
 800104e:	d81c      	bhi.n	800108a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685a      	ldr	r2, [r3, #4]
 800105a:	4613      	mov	r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	4413      	add	r3, r2
 8001060:	3b05      	subs	r3, #5
 8001062:	221f      	movs	r2, #31
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	4019      	ands	r1, r3
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	6818      	ldr	r0, [r3, #0]
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685a      	ldr	r2, [r3, #4]
 8001074:	4613      	mov	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4413      	add	r3, r2
 800107a:	3b05      	subs	r3, #5
 800107c:	fa00 f203 	lsl.w	r2, r0, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	430a      	orrs	r2, r1
 8001086:	635a      	str	r2, [r3, #52]	; 0x34
 8001088:	e03c      	b.n	8001104 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2b0c      	cmp	r3, #12
 8001090:	d81c      	bhi.n	80010cc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685a      	ldr	r2, [r3, #4]
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	3b23      	subs	r3, #35	; 0x23
 80010a4:	221f      	movs	r2, #31
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	4019      	ands	r1, r3
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	6818      	ldr	r0, [r3, #0]
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685a      	ldr	r2, [r3, #4]
 80010b6:	4613      	mov	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4413      	add	r3, r2
 80010bc:	3b23      	subs	r3, #35	; 0x23
 80010be:	fa00 f203 	lsl.w	r2, r0, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	430a      	orrs	r2, r1
 80010c8:	631a      	str	r2, [r3, #48]	; 0x30
 80010ca:	e01b      	b.n	8001104 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685a      	ldr	r2, [r3, #4]
 80010d6:	4613      	mov	r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	4413      	add	r3, r2
 80010dc:	3b41      	subs	r3, #65	; 0x41
 80010de:	221f      	movs	r2, #31
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	4019      	ands	r1, r3
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	3b41      	subs	r3, #65	; 0x41
 80010f8:	fa00 f203 	lsl.w	r2, r0, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	430a      	orrs	r2, r1
 8001102:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b09      	cmp	r3, #9
 800110a:	d91c      	bls.n	8001146 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	68d9      	ldr	r1, [r3, #12]
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	4613      	mov	r3, r2
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	4413      	add	r3, r2
 800111c:	3b1e      	subs	r3, #30
 800111e:	2207      	movs	r2, #7
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	4019      	ands	r1, r3
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	6898      	ldr	r0, [r3, #8]
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4613      	mov	r3, r2
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	4413      	add	r3, r2
 8001136:	3b1e      	subs	r3, #30
 8001138:	fa00 f203 	lsl.w	r2, r0, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	430a      	orrs	r2, r1
 8001142:	60da      	str	r2, [r3, #12]
 8001144:	e019      	b.n	800117a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	6919      	ldr	r1, [r3, #16]
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4613      	mov	r3, r2
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	4413      	add	r3, r2
 8001156:	2207      	movs	r2, #7
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	4019      	ands	r1, r3
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	6898      	ldr	r0, [r3, #8]
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4613      	mov	r3, r2
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	4413      	add	r3, r2
 800116e:	fa00 f203 	lsl.w	r2, r0, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	430a      	orrs	r2, r1
 8001178:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2b10      	cmp	r3, #16
 8001180:	d003      	beq.n	800118a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001186:	2b11      	cmp	r3, #17
 8001188:	d132      	bne.n	80011f0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a1d      	ldr	r2, [pc, #116]	; (8001204 <HAL_ADC_ConfigChannel+0x1e4>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d125      	bne.n	80011e0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d126      	bne.n	80011f0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	689a      	ldr	r2, [r3, #8]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80011b0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2b10      	cmp	r3, #16
 80011b8:	d11a      	bne.n	80011f0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <HAL_ADC_ConfigChannel+0x1e8>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a13      	ldr	r2, [pc, #76]	; (800120c <HAL_ADC_ConfigChannel+0x1ec>)
 80011c0:	fba2 2303 	umull	r2, r3, r2, r3
 80011c4:	0c9a      	lsrs	r2, r3, #18
 80011c6:	4613      	mov	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4413      	add	r3, r2
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011d0:	e002      	b.n	80011d8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	3b01      	subs	r3, #1
 80011d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1f9      	bne.n	80011d2 <HAL_ADC_ConfigChannel+0x1b2>
 80011de:	e007      	b.n	80011f0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e4:	f043 0220 	orr.w	r2, r3, #32
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr
 8001204:	40012400 	.word	0x40012400
 8001208:	20000000 	.word	0x20000000
 800120c:	431bde83 	.word	0x431bde83

08001210 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	2b01      	cmp	r3, #1
 8001228:	d127      	bne.n	800127a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	689a      	ldr	r2, [r3, #8]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f022 0201 	bic.w	r2, r2, #1
 8001238:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800123a:	f7ff fded 	bl	8000e18 <HAL_GetTick>
 800123e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001240:	e014      	b.n	800126c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001242:	f7ff fde9 	bl	8000e18 <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d90d      	bls.n	800126c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001254:	f043 0210 	orr.w	r2, r3, #16
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001260:	f043 0201 	orr.w	r2, r3, #1
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e007      	b.n	800127c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	2b01      	cmp	r3, #1
 8001278:	d0e3      	beq.n	8001242 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012a0:	4013      	ands	r3, r2
 80012a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012b6:	4a04      	ldr	r2, [pc, #16]	; (80012c8 <__NVIC_SetPriorityGrouping+0x44>)
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	60d3      	str	r3, [r2, #12]
}
 80012bc:	bf00      	nop
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d0:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <__NVIC_GetPriorityGrouping+0x18>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	0a1b      	lsrs	r3, r3, #8
 80012d6:	f003 0307 	and.w	r3, r3, #7
}
 80012da:	4618      	mov	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	6039      	str	r1, [r7, #0]
 80012f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	db0a      	blt.n	8001312 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	490c      	ldr	r1, [pc, #48]	; (8001334 <__NVIC_SetPriority+0x4c>)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	0112      	lsls	r2, r2, #4
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	440b      	add	r3, r1
 800130c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001310:	e00a      	b.n	8001328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4908      	ldr	r1, [pc, #32]	; (8001338 <__NVIC_SetPriority+0x50>)
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	f003 030f 	and.w	r3, r3, #15
 800131e:	3b04      	subs	r3, #4
 8001320:	0112      	lsls	r2, r2, #4
 8001322:	b2d2      	uxtb	r2, r2
 8001324:	440b      	add	r3, r1
 8001326:	761a      	strb	r2, [r3, #24]
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	e000e100 	.word	0xe000e100
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800133c:	b480      	push	{r7}
 800133e:	b089      	sub	sp, #36	; 0x24
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	f1c3 0307 	rsb	r3, r3, #7
 8001356:	2b04      	cmp	r3, #4
 8001358:	bf28      	it	cs
 800135a:	2304      	movcs	r3, #4
 800135c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3304      	adds	r3, #4
 8001362:	2b06      	cmp	r3, #6
 8001364:	d902      	bls.n	800136c <NVIC_EncodePriority+0x30>
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3b03      	subs	r3, #3
 800136a:	e000      	b.n	800136e <NVIC_EncodePriority+0x32>
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001370:	f04f 32ff 	mov.w	r2, #4294967295
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43da      	mvns	r2, r3
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	401a      	ands	r2, r3
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001384:	f04f 31ff 	mov.w	r1, #4294967295
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	fa01 f303 	lsl.w	r3, r1, r3
 800138e:	43d9      	mvns	r1, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001394:	4313      	orrs	r3, r2
         );
}
 8001396:	4618      	mov	r0, r3
 8001398:	3724      	adds	r7, #36	; 0x24
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr

080013a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013b0:	d301      	bcc.n	80013b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013b2:	2301      	movs	r3, #1
 80013b4:	e00f      	b.n	80013d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013b6:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <SysTick_Config+0x40>)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013be:	210f      	movs	r1, #15
 80013c0:	f04f 30ff 	mov.w	r0, #4294967295
 80013c4:	f7ff ff90 	bl	80012e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <SysTick_Config+0x40>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ce:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <SysTick_Config+0x40>)
 80013d0:	2207      	movs	r2, #7
 80013d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	e000e010 	.word	0xe000e010

080013e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff ff49 	bl	8001284 <__NVIC_SetPriorityGrouping>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b086      	sub	sp, #24
 80013fe:	af00      	add	r7, sp, #0
 8001400:	4603      	mov	r3, r0
 8001402:	60b9      	str	r1, [r7, #8]
 8001404:	607a      	str	r2, [r7, #4]
 8001406:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800140c:	f7ff ff5e 	bl	80012cc <__NVIC_GetPriorityGrouping>
 8001410:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	68b9      	ldr	r1, [r7, #8]
 8001416:	6978      	ldr	r0, [r7, #20]
 8001418:	f7ff ff90 	bl	800133c <NVIC_EncodePriority>
 800141c:	4602      	mov	r2, r0
 800141e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001422:	4611      	mov	r1, r2
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ff5f 	bl	80012e8 <__NVIC_SetPriority>
}
 800142a:	bf00      	nop
 800142c:	3718      	adds	r7, #24
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff ffb0 	bl	80013a0 <SysTick_Config>
 8001440:	4603      	mov	r3, r0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800144c:	b480      	push	{r7}
 800144e:	b08b      	sub	sp, #44	; 0x2c
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001456:	2300      	movs	r3, #0
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800145a:	2300      	movs	r3, #0
 800145c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800145e:	e127      	b.n	80016b0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001460:	2201      	movs	r2, #1
 8001462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	69fa      	ldr	r2, [r7, #28]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	429a      	cmp	r2, r3
 800147a:	f040 8116 	bne.w	80016aa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b12      	cmp	r3, #18
 8001484:	d034      	beq.n	80014f0 <HAL_GPIO_Init+0xa4>
 8001486:	2b12      	cmp	r3, #18
 8001488:	d80d      	bhi.n	80014a6 <HAL_GPIO_Init+0x5a>
 800148a:	2b02      	cmp	r3, #2
 800148c:	d02b      	beq.n	80014e6 <HAL_GPIO_Init+0x9a>
 800148e:	2b02      	cmp	r3, #2
 8001490:	d804      	bhi.n	800149c <HAL_GPIO_Init+0x50>
 8001492:	2b00      	cmp	r3, #0
 8001494:	d031      	beq.n	80014fa <HAL_GPIO_Init+0xae>
 8001496:	2b01      	cmp	r3, #1
 8001498:	d01c      	beq.n	80014d4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800149a:	e048      	b.n	800152e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800149c:	2b03      	cmp	r3, #3
 800149e:	d043      	beq.n	8001528 <HAL_GPIO_Init+0xdc>
 80014a0:	2b11      	cmp	r3, #17
 80014a2:	d01b      	beq.n	80014dc <HAL_GPIO_Init+0x90>
          break;
 80014a4:	e043      	b.n	800152e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014a6:	4a89      	ldr	r2, [pc, #548]	; (80016cc <HAL_GPIO_Init+0x280>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d026      	beq.n	80014fa <HAL_GPIO_Init+0xae>
 80014ac:	4a87      	ldr	r2, [pc, #540]	; (80016cc <HAL_GPIO_Init+0x280>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d806      	bhi.n	80014c0 <HAL_GPIO_Init+0x74>
 80014b2:	4a87      	ldr	r2, [pc, #540]	; (80016d0 <HAL_GPIO_Init+0x284>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d020      	beq.n	80014fa <HAL_GPIO_Init+0xae>
 80014b8:	4a86      	ldr	r2, [pc, #536]	; (80016d4 <HAL_GPIO_Init+0x288>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d01d      	beq.n	80014fa <HAL_GPIO_Init+0xae>
          break;
 80014be:	e036      	b.n	800152e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014c0:	4a85      	ldr	r2, [pc, #532]	; (80016d8 <HAL_GPIO_Init+0x28c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d019      	beq.n	80014fa <HAL_GPIO_Init+0xae>
 80014c6:	4a85      	ldr	r2, [pc, #532]	; (80016dc <HAL_GPIO_Init+0x290>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d016      	beq.n	80014fa <HAL_GPIO_Init+0xae>
 80014cc:	4a84      	ldr	r2, [pc, #528]	; (80016e0 <HAL_GPIO_Init+0x294>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d013      	beq.n	80014fa <HAL_GPIO_Init+0xae>
          break;
 80014d2:	e02c      	b.n	800152e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	623b      	str	r3, [r7, #32]
          break;
 80014da:	e028      	b.n	800152e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	3304      	adds	r3, #4
 80014e2:	623b      	str	r3, [r7, #32]
          break;
 80014e4:	e023      	b.n	800152e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	3308      	adds	r3, #8
 80014ec:	623b      	str	r3, [r7, #32]
          break;
 80014ee:	e01e      	b.n	800152e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	330c      	adds	r3, #12
 80014f6:	623b      	str	r3, [r7, #32]
          break;
 80014f8:	e019      	b.n	800152e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d102      	bne.n	8001508 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001502:	2304      	movs	r3, #4
 8001504:	623b      	str	r3, [r7, #32]
          break;
 8001506:	e012      	b.n	800152e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d105      	bne.n	800151c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001510:	2308      	movs	r3, #8
 8001512:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	69fa      	ldr	r2, [r7, #28]
 8001518:	611a      	str	r2, [r3, #16]
          break;
 800151a:	e008      	b.n	800152e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800151c:	2308      	movs	r3, #8
 800151e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	69fa      	ldr	r2, [r7, #28]
 8001524:	615a      	str	r2, [r3, #20]
          break;
 8001526:	e002      	b.n	800152e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001528:	2300      	movs	r3, #0
 800152a:	623b      	str	r3, [r7, #32]
          break;
 800152c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	2bff      	cmp	r3, #255	; 0xff
 8001532:	d801      	bhi.n	8001538 <HAL_GPIO_Init+0xec>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	e001      	b.n	800153c <HAL_GPIO_Init+0xf0>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3304      	adds	r3, #4
 800153c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	2bff      	cmp	r3, #255	; 0xff
 8001542:	d802      	bhi.n	800154a <HAL_GPIO_Init+0xfe>
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	e002      	b.n	8001550 <HAL_GPIO_Init+0x104>
 800154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154c:	3b08      	subs	r3, #8
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	210f      	movs	r1, #15
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	fa01 f303 	lsl.w	r3, r1, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	401a      	ands	r2, r3
 8001562:	6a39      	ldr	r1, [r7, #32]
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	fa01 f303 	lsl.w	r3, r1, r3
 800156a:	431a      	orrs	r2, r3
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001578:	2b00      	cmp	r3, #0
 800157a:	f000 8096 	beq.w	80016aa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800157e:	4b59      	ldr	r3, [pc, #356]	; (80016e4 <HAL_GPIO_Init+0x298>)
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	4a58      	ldr	r2, [pc, #352]	; (80016e4 <HAL_GPIO_Init+0x298>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6193      	str	r3, [r2, #24]
 800158a:	4b56      	ldr	r3, [pc, #344]	; (80016e4 <HAL_GPIO_Init+0x298>)
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001596:	4a54      	ldr	r2, [pc, #336]	; (80016e8 <HAL_GPIO_Init+0x29c>)
 8001598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159a:	089b      	lsrs	r3, r3, #2
 800159c:	3302      	adds	r3, #2
 800159e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	220f      	movs	r2, #15
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	4013      	ands	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a4b      	ldr	r2, [pc, #300]	; (80016ec <HAL_GPIO_Init+0x2a0>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d013      	beq.n	80015ea <HAL_GPIO_Init+0x19e>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a4a      	ldr	r2, [pc, #296]	; (80016f0 <HAL_GPIO_Init+0x2a4>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d00d      	beq.n	80015e6 <HAL_GPIO_Init+0x19a>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a49      	ldr	r2, [pc, #292]	; (80016f4 <HAL_GPIO_Init+0x2a8>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d007      	beq.n	80015e2 <HAL_GPIO_Init+0x196>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a48      	ldr	r2, [pc, #288]	; (80016f8 <HAL_GPIO_Init+0x2ac>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d101      	bne.n	80015de <HAL_GPIO_Init+0x192>
 80015da:	2303      	movs	r3, #3
 80015dc:	e006      	b.n	80015ec <HAL_GPIO_Init+0x1a0>
 80015de:	2304      	movs	r3, #4
 80015e0:	e004      	b.n	80015ec <HAL_GPIO_Init+0x1a0>
 80015e2:	2302      	movs	r3, #2
 80015e4:	e002      	b.n	80015ec <HAL_GPIO_Init+0x1a0>
 80015e6:	2301      	movs	r3, #1
 80015e8:	e000      	b.n	80015ec <HAL_GPIO_Init+0x1a0>
 80015ea:	2300      	movs	r3, #0
 80015ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ee:	f002 0203 	and.w	r2, r2, #3
 80015f2:	0092      	lsls	r2, r2, #2
 80015f4:	4093      	lsls	r3, r2
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015fc:	493a      	ldr	r1, [pc, #232]	; (80016e8 <HAL_GPIO_Init+0x29c>)
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	089b      	lsrs	r3, r3, #2
 8001602:	3302      	adds	r3, #2
 8001604:	68fa      	ldr	r2, [r7, #12]
 8001606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d006      	beq.n	8001624 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001616:	4b39      	ldr	r3, [pc, #228]	; (80016fc <HAL_GPIO_Init+0x2b0>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	4938      	ldr	r1, [pc, #224]	; (80016fc <HAL_GPIO_Init+0x2b0>)
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	4313      	orrs	r3, r2
 8001620:	600b      	str	r3, [r1, #0]
 8001622:	e006      	b.n	8001632 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001624:	4b35      	ldr	r3, [pc, #212]	; (80016fc <HAL_GPIO_Init+0x2b0>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	43db      	mvns	r3, r3
 800162c:	4933      	ldr	r1, [pc, #204]	; (80016fc <HAL_GPIO_Init+0x2b0>)
 800162e:	4013      	ands	r3, r2
 8001630:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d006      	beq.n	800164c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800163e:	4b2f      	ldr	r3, [pc, #188]	; (80016fc <HAL_GPIO_Init+0x2b0>)
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	492e      	ldr	r1, [pc, #184]	; (80016fc <HAL_GPIO_Init+0x2b0>)
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	4313      	orrs	r3, r2
 8001648:	604b      	str	r3, [r1, #4]
 800164a:	e006      	b.n	800165a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800164c:	4b2b      	ldr	r3, [pc, #172]	; (80016fc <HAL_GPIO_Init+0x2b0>)
 800164e:	685a      	ldr	r2, [r3, #4]
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	43db      	mvns	r3, r3
 8001654:	4929      	ldr	r1, [pc, #164]	; (80016fc <HAL_GPIO_Init+0x2b0>)
 8001656:	4013      	ands	r3, r2
 8001658:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d006      	beq.n	8001674 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001666:	4b25      	ldr	r3, [pc, #148]	; (80016fc <HAL_GPIO_Init+0x2b0>)
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	4924      	ldr	r1, [pc, #144]	; (80016fc <HAL_GPIO_Init+0x2b0>)
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	4313      	orrs	r3, r2
 8001670:	608b      	str	r3, [r1, #8]
 8001672:	e006      	b.n	8001682 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001674:	4b21      	ldr	r3, [pc, #132]	; (80016fc <HAL_GPIO_Init+0x2b0>)
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	43db      	mvns	r3, r3
 800167c:	491f      	ldr	r1, [pc, #124]	; (80016fc <HAL_GPIO_Init+0x2b0>)
 800167e:	4013      	ands	r3, r2
 8001680:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d006      	beq.n	800169c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800168e:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <HAL_GPIO_Init+0x2b0>)
 8001690:	68da      	ldr	r2, [r3, #12]
 8001692:	491a      	ldr	r1, [pc, #104]	; (80016fc <HAL_GPIO_Init+0x2b0>)
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	4313      	orrs	r3, r2
 8001698:	60cb      	str	r3, [r1, #12]
 800169a:	e006      	b.n	80016aa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800169c:	4b17      	ldr	r3, [pc, #92]	; (80016fc <HAL_GPIO_Init+0x2b0>)
 800169e:	68da      	ldr	r2, [r3, #12]
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	43db      	mvns	r3, r3
 80016a4:	4915      	ldr	r1, [pc, #84]	; (80016fc <HAL_GPIO_Init+0x2b0>)
 80016a6:	4013      	ands	r3, r2
 80016a8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ac:	3301      	adds	r3, #1
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b6:	fa22 f303 	lsr.w	r3, r2, r3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f47f aed0 	bne.w	8001460 <HAL_GPIO_Init+0x14>
  }
}
 80016c0:	bf00      	nop
 80016c2:	372c      	adds	r7, #44	; 0x2c
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	10210000 	.word	0x10210000
 80016d0:	10110000 	.word	0x10110000
 80016d4:	10120000 	.word	0x10120000
 80016d8:	10310000 	.word	0x10310000
 80016dc:	10320000 	.word	0x10320000
 80016e0:	10220000 	.word	0x10220000
 80016e4:	40021000 	.word	0x40021000
 80016e8:	40010000 	.word	0x40010000
 80016ec:	40010800 	.word	0x40010800
 80016f0:	40010c00 	.word	0x40010c00
 80016f4:	40011000 	.word	0x40011000
 80016f8:	40011400 	.word	0x40011400
 80016fc:	40010400 	.word	0x40010400

08001700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	807b      	strh	r3, [r7, #2]
 800170c:	4613      	mov	r3, r2
 800170e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001710:	787b      	ldrb	r3, [r7, #1]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001716:	887a      	ldrh	r2, [r7, #2]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800171c:	e003      	b.n	8001726 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800171e:	887b      	ldrh	r3, [r7, #2]
 8001720:	041a      	lsls	r2, r3, #16
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	611a      	str	r2, [r3, #16]
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e26c      	b.n	8001c1c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	2b00      	cmp	r3, #0
 800174c:	f000 8087 	beq.w	800185e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001750:	4b92      	ldr	r3, [pc, #584]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 030c 	and.w	r3, r3, #12
 8001758:	2b04      	cmp	r3, #4
 800175a:	d00c      	beq.n	8001776 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800175c:	4b8f      	ldr	r3, [pc, #572]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 030c 	and.w	r3, r3, #12
 8001764:	2b08      	cmp	r3, #8
 8001766:	d112      	bne.n	800178e <HAL_RCC_OscConfig+0x5e>
 8001768:	4b8c      	ldr	r3, [pc, #560]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001774:	d10b      	bne.n	800178e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001776:	4b89      	ldr	r3, [pc, #548]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d06c      	beq.n	800185c <HAL_RCC_OscConfig+0x12c>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d168      	bne.n	800185c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e246      	b.n	8001c1c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001796:	d106      	bne.n	80017a6 <HAL_RCC_OscConfig+0x76>
 8001798:	4b80      	ldr	r3, [pc, #512]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a7f      	ldr	r2, [pc, #508]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 800179e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a2:	6013      	str	r3, [r2, #0]
 80017a4:	e02e      	b.n	8001804 <HAL_RCC_OscConfig+0xd4>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d10c      	bne.n	80017c8 <HAL_RCC_OscConfig+0x98>
 80017ae:	4b7b      	ldr	r3, [pc, #492]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a7a      	ldr	r2, [pc, #488]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80017b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	4b78      	ldr	r3, [pc, #480]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a77      	ldr	r2, [pc, #476]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80017c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	e01d      	b.n	8001804 <HAL_RCC_OscConfig+0xd4>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017d0:	d10c      	bne.n	80017ec <HAL_RCC_OscConfig+0xbc>
 80017d2:	4b72      	ldr	r3, [pc, #456]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a71      	ldr	r2, [pc, #452]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80017d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	4b6f      	ldr	r3, [pc, #444]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a6e      	ldr	r2, [pc, #440]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80017e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	e00b      	b.n	8001804 <HAL_RCC_OscConfig+0xd4>
 80017ec:	4b6b      	ldr	r3, [pc, #428]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a6a      	ldr	r2, [pc, #424]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80017f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	4b68      	ldr	r3, [pc, #416]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a67      	ldr	r2, [pc, #412]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80017fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001802:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d013      	beq.n	8001834 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180c:	f7ff fb04 	bl	8000e18 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001814:	f7ff fb00 	bl	8000e18 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b64      	cmp	r3, #100	; 0x64
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e1fa      	b.n	8001c1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001826:	4b5d      	ldr	r3, [pc, #372]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d0f0      	beq.n	8001814 <HAL_RCC_OscConfig+0xe4>
 8001832:	e014      	b.n	800185e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001834:	f7ff faf0 	bl	8000e18 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800183c:	f7ff faec 	bl	8000e18 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b64      	cmp	r3, #100	; 0x64
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e1e6      	b.n	8001c1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800184e:	4b53      	ldr	r3, [pc, #332]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1f0      	bne.n	800183c <HAL_RCC_OscConfig+0x10c>
 800185a:	e000      	b.n	800185e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800185c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d063      	beq.n	8001932 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800186a:	4b4c      	ldr	r3, [pc, #304]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f003 030c 	and.w	r3, r3, #12
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00b      	beq.n	800188e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001876:	4b49      	ldr	r3, [pc, #292]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f003 030c 	and.w	r3, r3, #12
 800187e:	2b08      	cmp	r3, #8
 8001880:	d11c      	bne.n	80018bc <HAL_RCC_OscConfig+0x18c>
 8001882:	4b46      	ldr	r3, [pc, #280]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d116      	bne.n	80018bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800188e:	4b43      	ldr	r3, [pc, #268]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d005      	beq.n	80018a6 <HAL_RCC_OscConfig+0x176>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d001      	beq.n	80018a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e1ba      	b.n	8001c1c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a6:	4b3d      	ldr	r3, [pc, #244]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	4939      	ldr	r1, [pc, #228]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ba:	e03a      	b.n	8001932 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d020      	beq.n	8001906 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018c4:	4b36      	ldr	r3, [pc, #216]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ca:	f7ff faa5 	bl	8000e18 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d2:	f7ff faa1 	bl	8000e18 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e19b      	b.n	8001c1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e4:	4b2d      	ldr	r3, [pc, #180]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0f0      	beq.n	80018d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f0:	4b2a      	ldr	r3, [pc, #168]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	4927      	ldr	r1, [pc, #156]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 8001900:	4313      	orrs	r3, r2
 8001902:	600b      	str	r3, [r1, #0]
 8001904:	e015      	b.n	8001932 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001906:	4b26      	ldr	r3, [pc, #152]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190c:	f7ff fa84 	bl	8000e18 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001914:	f7ff fa80 	bl	8000e18 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e17a      	b.n	8001c1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001926:	4b1d      	ldr	r3, [pc, #116]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1f0      	bne.n	8001914 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0308 	and.w	r3, r3, #8
 800193a:	2b00      	cmp	r3, #0
 800193c:	d03a      	beq.n	80019b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d019      	beq.n	800197a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001946:	4b17      	ldr	r3, [pc, #92]	; (80019a4 <HAL_RCC_OscConfig+0x274>)
 8001948:	2201      	movs	r2, #1
 800194a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194c:	f7ff fa64 	bl	8000e18 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001954:	f7ff fa60 	bl	8000e18 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e15a      	b.n	8001c1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001966:	4b0d      	ldr	r3, [pc, #52]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 8001968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f0      	beq.n	8001954 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001972:	2001      	movs	r0, #1
 8001974:	f000 faaa 	bl	8001ecc <RCC_Delay>
 8001978:	e01c      	b.n	80019b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800197a:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <HAL_RCC_OscConfig+0x274>)
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001980:	f7ff fa4a 	bl	8000e18 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001986:	e00f      	b.n	80019a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001988:	f7ff fa46 	bl	8000e18 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d908      	bls.n	80019a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e140      	b.n	8001c1c <HAL_RCC_OscConfig+0x4ec>
 800199a:	bf00      	nop
 800199c:	40021000 	.word	0x40021000
 80019a0:	42420000 	.word	0x42420000
 80019a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019a8:	4b9e      	ldr	r3, [pc, #632]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 80019aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1e9      	bne.n	8001988 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 80a6 	beq.w	8001b0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019c2:	2300      	movs	r3, #0
 80019c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019c6:	4b97      	ldr	r3, [pc, #604]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10d      	bne.n	80019ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019d2:	4b94      	ldr	r3, [pc, #592]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	4a93      	ldr	r2, [pc, #588]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 80019d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019dc:	61d3      	str	r3, [r2, #28]
 80019de:	4b91      	ldr	r3, [pc, #580]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e6:	60bb      	str	r3, [r7, #8]
 80019e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ea:	2301      	movs	r3, #1
 80019ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ee:	4b8e      	ldr	r3, [pc, #568]	; (8001c28 <HAL_RCC_OscConfig+0x4f8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d118      	bne.n	8001a2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019fa:	4b8b      	ldr	r3, [pc, #556]	; (8001c28 <HAL_RCC_OscConfig+0x4f8>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a8a      	ldr	r2, [pc, #552]	; (8001c28 <HAL_RCC_OscConfig+0x4f8>)
 8001a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a06:	f7ff fa07 	bl	8000e18 <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a0e:	f7ff fa03 	bl	8000e18 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b64      	cmp	r3, #100	; 0x64
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e0fd      	b.n	8001c1c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a20:	4b81      	ldr	r3, [pc, #516]	; (8001c28 <HAL_RCC_OscConfig+0x4f8>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0f0      	beq.n	8001a0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d106      	bne.n	8001a42 <HAL_RCC_OscConfig+0x312>
 8001a34:	4b7b      	ldr	r3, [pc, #492]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	4a7a      	ldr	r2, [pc, #488]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	6213      	str	r3, [r2, #32]
 8001a40:	e02d      	b.n	8001a9e <HAL_RCC_OscConfig+0x36e>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d10c      	bne.n	8001a64 <HAL_RCC_OscConfig+0x334>
 8001a4a:	4b76      	ldr	r3, [pc, #472]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	4a75      	ldr	r2, [pc, #468]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001a50:	f023 0301 	bic.w	r3, r3, #1
 8001a54:	6213      	str	r3, [r2, #32]
 8001a56:	4b73      	ldr	r3, [pc, #460]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	4a72      	ldr	r2, [pc, #456]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001a5c:	f023 0304 	bic.w	r3, r3, #4
 8001a60:	6213      	str	r3, [r2, #32]
 8001a62:	e01c      	b.n	8001a9e <HAL_RCC_OscConfig+0x36e>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	2b05      	cmp	r3, #5
 8001a6a:	d10c      	bne.n	8001a86 <HAL_RCC_OscConfig+0x356>
 8001a6c:	4b6d      	ldr	r3, [pc, #436]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	4a6c      	ldr	r2, [pc, #432]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001a72:	f043 0304 	orr.w	r3, r3, #4
 8001a76:	6213      	str	r3, [r2, #32]
 8001a78:	4b6a      	ldr	r3, [pc, #424]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	4a69      	ldr	r2, [pc, #420]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	6213      	str	r3, [r2, #32]
 8001a84:	e00b      	b.n	8001a9e <HAL_RCC_OscConfig+0x36e>
 8001a86:	4b67      	ldr	r3, [pc, #412]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	4a66      	ldr	r2, [pc, #408]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001a8c:	f023 0301 	bic.w	r3, r3, #1
 8001a90:	6213      	str	r3, [r2, #32]
 8001a92:	4b64      	ldr	r3, [pc, #400]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001a94:	6a1b      	ldr	r3, [r3, #32]
 8001a96:	4a63      	ldr	r2, [pc, #396]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001a98:	f023 0304 	bic.w	r3, r3, #4
 8001a9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d015      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa6:	f7ff f9b7 	bl	8000e18 <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aac:	e00a      	b.n	8001ac4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aae:	f7ff f9b3 	bl	8000e18 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e0ab      	b.n	8001c1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac4:	4b57      	ldr	r3, [pc, #348]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0ee      	beq.n	8001aae <HAL_RCC_OscConfig+0x37e>
 8001ad0:	e014      	b.n	8001afc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad2:	f7ff f9a1 	bl	8000e18 <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ad8:	e00a      	b.n	8001af0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ada:	f7ff f99d 	bl	8000e18 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e095      	b.n	8001c1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af0:	4b4c      	ldr	r3, [pc, #304]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001af2:	6a1b      	ldr	r3, [r3, #32]
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1ee      	bne.n	8001ada <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001afc:	7dfb      	ldrb	r3, [r7, #23]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d105      	bne.n	8001b0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b02:	4b48      	ldr	r3, [pc, #288]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	4a47      	ldr	r2, [pc, #284]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001b08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f000 8081 	beq.w	8001c1a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b18:	4b42      	ldr	r3, [pc, #264]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 030c 	and.w	r3, r3, #12
 8001b20:	2b08      	cmp	r3, #8
 8001b22:	d061      	beq.n	8001be8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	69db      	ldr	r3, [r3, #28]
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d146      	bne.n	8001bba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b2c:	4b3f      	ldr	r3, [pc, #252]	; (8001c2c <HAL_RCC_OscConfig+0x4fc>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b32:	f7ff f971 	bl	8000e18 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b3a:	f7ff f96d 	bl	8000e18 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e067      	b.n	8001c1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b4c:	4b35      	ldr	r3, [pc, #212]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1f0      	bne.n	8001b3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b60:	d108      	bne.n	8001b74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b62:	4b30      	ldr	r3, [pc, #192]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b66:	f023 020f 	bic.w	r2, r3, #15
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	492d      	ldr	r1, [pc, #180]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b74:	4b2b      	ldr	r3, [pc, #172]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a19      	ldr	r1, [r3, #32]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b84:	430b      	orrs	r3, r1
 8001b86:	4927      	ldr	r1, [pc, #156]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b8c:	4b27      	ldr	r3, [pc, #156]	; (8001c2c <HAL_RCC_OscConfig+0x4fc>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b92:	f7ff f941 	bl	8000e18 <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9a:	f7ff f93d 	bl	8000e18 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e037      	b.n	8001c1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bac:	4b1d      	ldr	r3, [pc, #116]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0f0      	beq.n	8001b9a <HAL_RCC_OscConfig+0x46a>
 8001bb8:	e02f      	b.n	8001c1a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bba:	4b1c      	ldr	r3, [pc, #112]	; (8001c2c <HAL_RCC_OscConfig+0x4fc>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc0:	f7ff f92a 	bl	8000e18 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc8:	f7ff f926 	bl	8000e18 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e020      	b.n	8001c1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bda:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x498>
 8001be6:	e018      	b.n	8001c1a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d101      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e013      	b.n	8001c1c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d106      	bne.n	8001c16 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d001      	beq.n	8001c1a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40007000 	.word	0x40007000
 8001c2c:	42420060 	.word	0x42420060

08001c30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e0a0      	b.n	8001d86 <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d020      	beq.n	8001c92 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d005      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c5c:	4b4c      	ldr	r3, [pc, #304]	; (8001d90 <HAL_RCC_ClockConfig+0x160>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	4a4b      	ldr	r2, [pc, #300]	; (8001d90 <HAL_RCC_ClockConfig+0x160>)
 8001c62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0308 	and.w	r3, r3, #8
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d005      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c74:	4b46      	ldr	r3, [pc, #280]	; (8001d90 <HAL_RCC_ClockConfig+0x160>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	4a45      	ldr	r2, [pc, #276]	; (8001d90 <HAL_RCC_ClockConfig+0x160>)
 8001c7a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c80:	4b43      	ldr	r3, [pc, #268]	; (8001d90 <HAL_RCC_ClockConfig+0x160>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	4940      	ldr	r1, [pc, #256]	; (8001d90 <HAL_RCC_ClockConfig+0x160>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d040      	beq.n	8001d20 <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d107      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca6:	4b3a      	ldr	r3, [pc, #232]	; (8001d90 <HAL_RCC_ClockConfig+0x160>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d115      	bne.n	8001cde <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e067      	b.n	8001d86 <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d107      	bne.n	8001cce <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cbe:	4b34      	ldr	r3, [pc, #208]	; (8001d90 <HAL_RCC_ClockConfig+0x160>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d109      	bne.n	8001cde <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e05b      	b.n	8001d86 <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cce:	4b30      	ldr	r3, [pc, #192]	; (8001d90 <HAL_RCC_ClockConfig+0x160>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e053      	b.n	8001d86 <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cde:	4b2c      	ldr	r3, [pc, #176]	; (8001d90 <HAL_RCC_ClockConfig+0x160>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f023 0203 	bic.w	r2, r3, #3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	4929      	ldr	r1, [pc, #164]	; (8001d90 <HAL_RCC_ClockConfig+0x160>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cf0:	f7ff f892 	bl	8000e18 <HAL_GetTick>
 8001cf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf6:	e00a      	b.n	8001d0e <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf8:	f7ff f88e 	bl	8000e18 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e03b      	b.n	8001d86 <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0e:	4b20      	ldr	r3, [pc, #128]	; (8001d90 <HAL_RCC_ClockConfig+0x160>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 020c 	and.w	r2, r3, #12
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d1eb      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d008      	beq.n	8001d3e <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d2c:	4b18      	ldr	r3, [pc, #96]	; (8001d90 <HAL_RCC_ClockConfig+0x160>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	4915      	ldr	r1, [pc, #84]	; (8001d90 <HAL_RCC_ClockConfig+0x160>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d009      	beq.n	8001d5e <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d4a:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <HAL_RCC_ClockConfig+0x160>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	490d      	ldr	r1, [pc, #52]	; (8001d90 <HAL_RCC_ClockConfig+0x160>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d5e:	f000 f81f 	bl	8001da0 <HAL_RCC_GetSysClockFreq>
 8001d62:	4601      	mov	r1, r0
 8001d64:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <HAL_RCC_ClockConfig+0x160>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	091b      	lsrs	r3, r3, #4
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	4a09      	ldr	r2, [pc, #36]	; (8001d94 <HAL_RCC_ClockConfig+0x164>)
 8001d70:	5cd3      	ldrb	r3, [r2, r3]
 8001d72:	fa21 f303 	lsr.w	r3, r1, r3
 8001d76:	4a08      	ldr	r2, [pc, #32]	; (8001d98 <HAL_RCC_ClockConfig+0x168>)
 8001d78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d7a:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <HAL_RCC_ClockConfig+0x16c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff f808 	bl	8000d94 <HAL_InitTick>

  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40021000 	.word	0x40021000
 8001d94:	080037fc 	.word	0x080037fc
 8001d98:	20000000 	.word	0x20000000
 8001d9c:	20000004 	.word	0x20000004

08001da0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001da0:	b490      	push	{r4, r7}
 8001da2:	b08e      	sub	sp, #56	; 0x38
 8001da4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001da6:	4b2b      	ldr	r3, [pc, #172]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001da8:	f107 0414 	add.w	r4, r7, #20
 8001dac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8001db2:	4b29      	ldr	r3, [pc, #164]	; (8001e58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001db4:	1d3c      	adds	r4, r7, #4
 8001db6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001db8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	637b      	str	r3, [r7, #52]	; 0x34
 8001dc8:	2300      	movs	r3, #0
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dd0:	4b22      	ldr	r3, [pc, #136]	; (8001e5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd8:	f003 030c 	and.w	r3, r3, #12
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	d002      	beq.n	8001de6 <HAL_RCC_GetSysClockFreq+0x46>
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	d003      	beq.n	8001dec <HAL_RCC_GetSysClockFreq+0x4c>
 8001de4:	e02c      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001de6:	4b1e      	ldr	r3, [pc, #120]	; (8001e60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001de8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dea:	e02c      	b.n	8001e46 <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dee:	0c9b      	lsrs	r3, r3, #18
 8001df0:	f003 030f 	and.w	r3, r3, #15
 8001df4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001df8:	4413      	add	r3, r2
 8001dfa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001dfe:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d012      	beq.n	8001e30 <HAL_RCC_GetSysClockFreq+0x90>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8001e0a:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001e16:	4413      	add	r3, r2
 8001e18:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8001e1c:	62bb      	str	r3, [r7, #40]	; 0x28
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	4a0f      	ldr	r2, [pc, #60]	; (8001e60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e22:	fb02 f203 	mul.w	r2, r2, r3
 8001e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8001e2e:	e004      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0x9a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	4a0c      	ldr	r2, [pc, #48]	; (8001e64 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e34:	fb02 f303 	mul.w	r3, r2, r3
 8001e38:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 8001e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e3c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e3e:	e002      	b.n	8001e46 <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e40:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e42:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3738      	adds	r7, #56	; 0x38
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc90      	pop	{r4, r7}
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	080037dc 	.word	0x080037dc
 8001e58:	080037ec 	.word	0x080037ec
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	007a1200 	.word	0x007a1200
 8001e64:	003d0900 	.word	0x003d0900

08001e68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e6c:	4b02      	ldr	r3, [pc, #8]	; (8001e78 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr
 8001e78:	20000000 	.word	0x20000000

08001e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e80:	f7ff fff2 	bl	8001e68 <HAL_RCC_GetHCLKFreq>
 8001e84:	4601      	mov	r1, r0
 8001e86:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	0a1b      	lsrs	r3, r3, #8
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	4a03      	ldr	r2, [pc, #12]	; (8001ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e92:	5cd3      	ldrb	r3, [r2, r3]
 8001e94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	0800380c 	.word	0x0800380c

08001ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ea8:	f7ff ffde 	bl	8001e68 <HAL_RCC_GetHCLKFreq>
 8001eac:	4601      	mov	r1, r0
 8001eae:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	0adb      	lsrs	r3, r3, #11
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	4a03      	ldr	r2, [pc, #12]	; (8001ec8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eba:	5cd3      	ldrb	r3, [r2, r3]
 8001ebc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	0800380c 	.word	0x0800380c

08001ecc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ed4:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <RCC_Delay+0x34>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a0a      	ldr	r2, [pc, #40]	; (8001f04 <RCC_Delay+0x38>)
 8001eda:	fba2 2303 	umull	r2, r3, r2, r3
 8001ede:	0a5b      	lsrs	r3, r3, #9
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	fb02 f303 	mul.w	r3, r2, r3
 8001ee6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ee8:	bf00      	nop
  }
  while (Delay --);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	1e5a      	subs	r2, r3, #1
 8001eee:	60fa      	str	r2, [r7, #12]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1f9      	bne.n	8001ee8 <RCC_Delay+0x1c>
}
 8001ef4:	bf00      	nop
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	20000000 	.word	0x20000000
 8001f04:	10624dd3 	.word	0x10624dd3

08001f08 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	613b      	str	r3, [r7, #16]
 8001f14:	2300      	movs	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d07d      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001f24:	2300      	movs	r3, #0
 8001f26:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f28:	4b47      	ldr	r3, [pc, #284]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d10d      	bne.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f34:	4b44      	ldr	r3, [pc, #272]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	4a43      	ldr	r2, [pc, #268]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001f3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f3e:	61d3      	str	r3, [r2, #28]
 8001f40:	4b41      	ldr	r3, [pc, #260]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001f42:	69db      	ldr	r3, [r3, #28]
 8001f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f50:	4b3e      	ldr	r3, [pc, #248]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d118      	bne.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f5c:	4b3b      	ldr	r3, [pc, #236]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a3a      	ldr	r2, [pc, #232]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8001f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f68:	f7fe ff56 	bl	8000e18 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6e:	e008      	b.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f70:	f7fe ff52 	bl	8000e18 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b64      	cmp	r3, #100	; 0x64
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e05e      	b.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x138>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f82:	4b32      	ldr	r3, [pc, #200]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0f0      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f8e:	4b2e      	ldr	r3, [pc, #184]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f96:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d02e      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d027      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fac:	4b26      	ldr	r3, [pc, #152]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fb4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fb6:	4b26      	ldr	r3, [pc, #152]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8001fb8:	2201      	movs	r2, #1
 8001fba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fbc:	4b24      	ldr	r3, [pc, #144]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001fc2:	4a21      	ldr	r2, [pc, #132]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d014      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd2:	f7fe ff21 	bl	8000e18 <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd8:	e00a      	b.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fda:	f7fe ff1d 	bl	8000e18 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e027      	b.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x138>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff0:	4b15      	ldr	r3, [pc, #84]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0ee      	beq.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ffc:	4b12      	ldr	r3, [pc, #72]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	490f      	ldr	r1, [pc, #60]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800200a:	4313      	orrs	r3, r2
 800200c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800200e:	7dfb      	ldrb	r3, [r7, #23]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d105      	bne.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002014:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002016:	69db      	ldr	r3, [r3, #28]
 8002018:	4a0b      	ldr	r2, [pc, #44]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800201a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800201e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d008      	beq.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	4903      	ldr	r1, [pc, #12]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800203a:	4313      	orrs	r3, r2
 800203c:	604b      	str	r3, [r1, #4]
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40021000 	.word	0x40021000
 800204c:	40007000 	.word	0x40007000
 8002050:	42420440 	.word	0x42420440

08002054 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e04b      	b.n	80020fe <HAL_SPI_Init+0xaa>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	d106      	bne.n	8002086 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f7fe fcc5 	bl	8000a10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2202      	movs	r2, #2
 800208a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800209c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	431a      	orrs	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	431a      	orrs	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	431a      	orrs	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	431a      	orrs	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	ea42 0103 	orr.w	r1, r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	0c1a      	lsrs	r2, r3, #16
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f002 0204 	and.w	r2, r2, #4
 80020ec:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e01d      	b.n	8002154 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	d106      	bne.n	8002132 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7fe fcb9 	bl	8000aa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2202      	movs	r2, #2
 8002136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3304      	adds	r3, #4
 8002142:	4619      	mov	r1, r3
 8002144:	4610      	mov	r0, r2
 8002146:	f000 f9bb 	bl	80024c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e01d      	b.n	80021aa <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d106      	bne.n	8002188 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f815 	bl	80021b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2202      	movs	r2, #2
 800218c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3304      	adds	r3, #4
 8002198:	4619      	mov	r1, r3
 800219a:	4610      	mov	r0, r2
 800219c:	f000 f990 	bl	80024c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr

080021c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d101      	bne.n	80021de <HAL_TIM_PWM_ConfigChannel+0x1a>
 80021da:	2302      	movs	r3, #2
 80021dc:	e0b4      	b.n	8002348 <HAL_TIM_PWM_ConfigChannel+0x184>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2202      	movs	r2, #2
 80021ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b0c      	cmp	r3, #12
 80021f2:	f200 809f 	bhi.w	8002334 <HAL_TIM_PWM_ConfigChannel+0x170>
 80021f6:	a201      	add	r2, pc, #4	; (adr r2, 80021fc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80021f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021fc:	08002231 	.word	0x08002231
 8002200:	08002335 	.word	0x08002335
 8002204:	08002335 	.word	0x08002335
 8002208:	08002335 	.word	0x08002335
 800220c:	08002271 	.word	0x08002271
 8002210:	08002335 	.word	0x08002335
 8002214:	08002335 	.word	0x08002335
 8002218:	08002335 	.word	0x08002335
 800221c:	080022b3 	.word	0x080022b3
 8002220:	08002335 	.word	0x08002335
 8002224:	08002335 	.word	0x08002335
 8002228:	08002335 	.word	0x08002335
 800222c:	080022f3 	.word	0x080022f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68b9      	ldr	r1, [r7, #8]
 8002236:	4618      	mov	r0, r3
 8002238:	f000 f9c2 	bl	80025c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	699a      	ldr	r2, [r3, #24]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 0208 	orr.w	r2, r2, #8
 800224a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	699a      	ldr	r2, [r3, #24]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0204 	bic.w	r2, r2, #4
 800225a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6999      	ldr	r1, [r3, #24]
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	691a      	ldr	r2, [r3, #16]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	619a      	str	r2, [r3, #24]
      break;
 800226e:	e062      	b.n	8002336 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68b9      	ldr	r1, [r7, #8]
 8002276:	4618      	mov	r0, r3
 8002278:	f000 fa26 	bl	80026c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	699a      	ldr	r2, [r3, #24]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800228a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	699a      	ldr	r2, [r3, #24]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800229a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6999      	ldr	r1, [r3, #24]
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	021a      	lsls	r2, r3, #8
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	619a      	str	r2, [r3, #24]
      break;
 80022b0:	e041      	b.n	8002336 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68b9      	ldr	r1, [r7, #8]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f000 fa81 	bl	80027c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	69da      	ldr	r2, [r3, #28]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f042 0208 	orr.w	r2, r2, #8
 80022cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	69da      	ldr	r2, [r3, #28]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 0204 	bic.w	r2, r2, #4
 80022dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	69d9      	ldr	r1, [r3, #28]
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	691a      	ldr	r2, [r3, #16]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	61da      	str	r2, [r3, #28]
      break;
 80022f0:	e021      	b.n	8002336 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68b9      	ldr	r1, [r7, #8]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f000 fadd 	bl	80028b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	69da      	ldr	r2, [r3, #28]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800230c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	69da      	ldr	r2, [r3, #28]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800231c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	69d9      	ldr	r1, [r3, #28]
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	021a      	lsls	r2, r3, #8
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	61da      	str	r2, [r3, #28]
      break;
 8002332:	e000      	b.n	8002336 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002334:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <HAL_TIM_ConfigClockSource+0x18>
 8002364:	2302      	movs	r3, #2
 8002366:	e0a6      	b.n	80024b6 <HAL_TIM_ConfigClockSource+0x166>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2202      	movs	r2, #2
 8002374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002386:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800238e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b40      	cmp	r3, #64	; 0x40
 800239e:	d067      	beq.n	8002470 <HAL_TIM_ConfigClockSource+0x120>
 80023a0:	2b40      	cmp	r3, #64	; 0x40
 80023a2:	d80b      	bhi.n	80023bc <HAL_TIM_ConfigClockSource+0x6c>
 80023a4:	2b10      	cmp	r3, #16
 80023a6:	d073      	beq.n	8002490 <HAL_TIM_ConfigClockSource+0x140>
 80023a8:	2b10      	cmp	r3, #16
 80023aa:	d802      	bhi.n	80023b2 <HAL_TIM_ConfigClockSource+0x62>
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d06f      	beq.n	8002490 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80023b0:	e078      	b.n	80024a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80023b2:	2b20      	cmp	r3, #32
 80023b4:	d06c      	beq.n	8002490 <HAL_TIM_ConfigClockSource+0x140>
 80023b6:	2b30      	cmp	r3, #48	; 0x30
 80023b8:	d06a      	beq.n	8002490 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80023ba:	e073      	b.n	80024a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80023bc:	2b70      	cmp	r3, #112	; 0x70
 80023be:	d00d      	beq.n	80023dc <HAL_TIM_ConfigClockSource+0x8c>
 80023c0:	2b70      	cmp	r3, #112	; 0x70
 80023c2:	d804      	bhi.n	80023ce <HAL_TIM_ConfigClockSource+0x7e>
 80023c4:	2b50      	cmp	r3, #80	; 0x50
 80023c6:	d033      	beq.n	8002430 <HAL_TIM_ConfigClockSource+0xe0>
 80023c8:	2b60      	cmp	r3, #96	; 0x60
 80023ca:	d041      	beq.n	8002450 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80023cc:	e06a      	b.n	80024a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80023ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023d2:	d066      	beq.n	80024a2 <HAL_TIM_ConfigClockSource+0x152>
 80023d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023d8:	d017      	beq.n	800240a <HAL_TIM_ConfigClockSource+0xba>
      break;
 80023da:	e063      	b.n	80024a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6818      	ldr	r0, [r3, #0]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	6899      	ldr	r1, [r3, #8]
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	f000 fb3b 	bl	8002a66 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023fe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	609a      	str	r2, [r3, #8]
      break;
 8002408:	e04c      	b.n	80024a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6818      	ldr	r0, [r3, #0]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	6899      	ldr	r1, [r3, #8]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	f000 fb24 	bl	8002a66 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800242c:	609a      	str	r2, [r3, #8]
      break;
 800242e:	e039      	b.n	80024a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6818      	ldr	r0, [r3, #0]
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	6859      	ldr	r1, [r3, #4]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	461a      	mov	r2, r3
 800243e:	f000 fa9b 	bl	8002978 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2150      	movs	r1, #80	; 0x50
 8002448:	4618      	mov	r0, r3
 800244a:	f000 faf2 	bl	8002a32 <TIM_ITRx_SetConfig>
      break;
 800244e:	e029      	b.n	80024a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6818      	ldr	r0, [r3, #0]
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	6859      	ldr	r1, [r3, #4]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	461a      	mov	r2, r3
 800245e:	f000 fab9 	bl	80029d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2160      	movs	r1, #96	; 0x60
 8002468:	4618      	mov	r0, r3
 800246a:	f000 fae2 	bl	8002a32 <TIM_ITRx_SetConfig>
      break;
 800246e:	e019      	b.n	80024a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6818      	ldr	r0, [r3, #0]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	6859      	ldr	r1, [r3, #4]
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	461a      	mov	r2, r3
 800247e:	f000 fa7b 	bl	8002978 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2140      	movs	r1, #64	; 0x40
 8002488:	4618      	mov	r0, r3
 800248a:	f000 fad2 	bl	8002a32 <TIM_ITRx_SetConfig>
      break;
 800248e:	e009      	b.n	80024a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4619      	mov	r1, r3
 800249a:	4610      	mov	r0, r2
 800249c:	f000 fac9 	bl	8002a32 <TIM_ITRx_SetConfig>
      break;
 80024a0:	e000      	b.n	80024a4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80024a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
	...

080024c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a35      	ldr	r2, [pc, #212]	; (80025a8 <TIM_Base_SetConfig+0xe8>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d00b      	beq.n	80024f0 <TIM_Base_SetConfig+0x30>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024de:	d007      	beq.n	80024f0 <TIM_Base_SetConfig+0x30>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a32      	ldr	r2, [pc, #200]	; (80025ac <TIM_Base_SetConfig+0xec>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d003      	beq.n	80024f0 <TIM_Base_SetConfig+0x30>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a31      	ldr	r2, [pc, #196]	; (80025b0 <TIM_Base_SetConfig+0xf0>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d108      	bne.n	8002502 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	4313      	orrs	r3, r2
 8002500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a28      	ldr	r2, [pc, #160]	; (80025a8 <TIM_Base_SetConfig+0xe8>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d017      	beq.n	800253a <TIM_Base_SetConfig+0x7a>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002510:	d013      	beq.n	800253a <TIM_Base_SetConfig+0x7a>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a25      	ldr	r2, [pc, #148]	; (80025ac <TIM_Base_SetConfig+0xec>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d00f      	beq.n	800253a <TIM_Base_SetConfig+0x7a>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a24      	ldr	r2, [pc, #144]	; (80025b0 <TIM_Base_SetConfig+0xf0>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d00b      	beq.n	800253a <TIM_Base_SetConfig+0x7a>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a23      	ldr	r2, [pc, #140]	; (80025b4 <TIM_Base_SetConfig+0xf4>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d007      	beq.n	800253a <TIM_Base_SetConfig+0x7a>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a22      	ldr	r2, [pc, #136]	; (80025b8 <TIM_Base_SetConfig+0xf8>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d003      	beq.n	800253a <TIM_Base_SetConfig+0x7a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a21      	ldr	r2, [pc, #132]	; (80025bc <TIM_Base_SetConfig+0xfc>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d108      	bne.n	800254c <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	4313      	orrs	r3, r2
 800254a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	4313      	orrs	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a0d      	ldr	r2, [pc, #52]	; (80025a8 <TIM_Base_SetConfig+0xe8>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d00b      	beq.n	8002590 <TIM_Base_SetConfig+0xd0>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a0e      	ldr	r2, [pc, #56]	; (80025b4 <TIM_Base_SetConfig+0xf4>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d007      	beq.n	8002590 <TIM_Base_SetConfig+0xd0>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a0d      	ldr	r2, [pc, #52]	; (80025b8 <TIM_Base_SetConfig+0xf8>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d003      	beq.n	8002590 <TIM_Base_SetConfig+0xd0>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a0c      	ldr	r2, [pc, #48]	; (80025bc <TIM_Base_SetConfig+0xfc>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d103      	bne.n	8002598 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	691a      	ldr	r2, [r3, #16]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	615a      	str	r2, [r3, #20]
}
 800259e:	bf00      	nop
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr
 80025a8:	40012c00 	.word	0x40012c00
 80025ac:	40000400 	.word	0x40000400
 80025b0:	40000800 	.word	0x40000800
 80025b4:	40014000 	.word	0x40014000
 80025b8:	40014400 	.word	0x40014400
 80025bc:	40014800 	.word	0x40014800

080025c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b087      	sub	sp, #28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	f023 0201 	bic.w	r2, r3, #1
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f023 0303 	bic.w	r3, r3, #3
 80025f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	4313      	orrs	r3, r2
 8002600:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f023 0302 	bic.w	r3, r3, #2
 8002608:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4313      	orrs	r3, r2
 8002612:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a28      	ldr	r2, [pc, #160]	; (80026b8 <TIM_OC1_SetConfig+0xf8>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d00b      	beq.n	8002634 <TIM_OC1_SetConfig+0x74>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a27      	ldr	r2, [pc, #156]	; (80026bc <TIM_OC1_SetConfig+0xfc>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d007      	beq.n	8002634 <TIM_OC1_SetConfig+0x74>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a26      	ldr	r2, [pc, #152]	; (80026c0 <TIM_OC1_SetConfig+0x100>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d003      	beq.n	8002634 <TIM_OC1_SetConfig+0x74>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a25      	ldr	r2, [pc, #148]	; (80026c4 <TIM_OC1_SetConfig+0x104>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d10c      	bne.n	800264e <TIM_OC1_SetConfig+0x8e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f023 0308 	bic.w	r3, r3, #8
 800263a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	4313      	orrs	r3, r2
 8002644:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f023 0304 	bic.w	r3, r3, #4
 800264c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a19      	ldr	r2, [pc, #100]	; (80026b8 <TIM_OC1_SetConfig+0xf8>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d00b      	beq.n	800266e <TIM_OC1_SetConfig+0xae>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a18      	ldr	r2, [pc, #96]	; (80026bc <TIM_OC1_SetConfig+0xfc>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d007      	beq.n	800266e <TIM_OC1_SetConfig+0xae>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a17      	ldr	r2, [pc, #92]	; (80026c0 <TIM_OC1_SetConfig+0x100>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d003      	beq.n	800266e <TIM_OC1_SetConfig+0xae>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a16      	ldr	r2, [pc, #88]	; (80026c4 <TIM_OC1_SetConfig+0x104>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d111      	bne.n	8002692 <TIM_OC1_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002674:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800267c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	4313      	orrs	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	4313      	orrs	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	621a      	str	r2, [r3, #32]
}
 80026ac:	bf00      	nop
 80026ae:	371c      	adds	r7, #28
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40012c00 	.word	0x40012c00
 80026bc:	40014000 	.word	0x40014000
 80026c0:	40014400 	.word	0x40014400
 80026c4:	40014800 	.word	0x40014800

080026c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b087      	sub	sp, #28
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	f023 0210 	bic.w	r2, r3, #16
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	021b      	lsls	r3, r3, #8
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	4313      	orrs	r3, r2
 800270a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	f023 0320 	bic.w	r3, r3, #32
 8002712:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	011b      	lsls	r3, r3, #4
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	4313      	orrs	r3, r2
 800271e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a23      	ldr	r2, [pc, #140]	; (80027b0 <TIM_OC2_SetConfig+0xe8>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d10d      	bne.n	8002744 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800272e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	4313      	orrs	r3, r2
 800273a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002742:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a1a      	ldr	r2, [pc, #104]	; (80027b0 <TIM_OC2_SetConfig+0xe8>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d00b      	beq.n	8002764 <TIM_OC2_SetConfig+0x9c>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a19      	ldr	r2, [pc, #100]	; (80027b4 <TIM_OC2_SetConfig+0xec>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d007      	beq.n	8002764 <TIM_OC2_SetConfig+0x9c>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a18      	ldr	r2, [pc, #96]	; (80027b8 <TIM_OC2_SetConfig+0xf0>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d003      	beq.n	8002764 <TIM_OC2_SetConfig+0x9c>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a17      	ldr	r2, [pc, #92]	; (80027bc <TIM_OC2_SetConfig+0xf4>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d113      	bne.n	800278c <TIM_OC2_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800276a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002772:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	4313      	orrs	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4313      	orrs	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	621a      	str	r2, [r3, #32]
}
 80027a6:	bf00      	nop
 80027a8:	371c      	adds	r7, #28
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr
 80027b0:	40012c00 	.word	0x40012c00
 80027b4:	40014000 	.word	0x40014000
 80027b8:	40014400 	.word	0x40014400
 80027bc:	40014800 	.word	0x40014800

080027c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b087      	sub	sp, #28
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f023 0303 	bic.w	r3, r3, #3
 80027f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	4313      	orrs	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002808:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	021b      	lsls	r3, r3, #8
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	4313      	orrs	r3, r2
 8002814:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a23      	ldr	r2, [pc, #140]	; (80028a8 <TIM_OC3_SetConfig+0xe8>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d10d      	bne.n	800283a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002824:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	021b      	lsls	r3, r3, #8
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	4313      	orrs	r3, r2
 8002830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a1a      	ldr	r2, [pc, #104]	; (80028a8 <TIM_OC3_SetConfig+0xe8>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d00b      	beq.n	800285a <TIM_OC3_SetConfig+0x9a>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a19      	ldr	r2, [pc, #100]	; (80028ac <TIM_OC3_SetConfig+0xec>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d007      	beq.n	800285a <TIM_OC3_SetConfig+0x9a>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a18      	ldr	r2, [pc, #96]	; (80028b0 <TIM_OC3_SetConfig+0xf0>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d003      	beq.n	800285a <TIM_OC3_SetConfig+0x9a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a17      	ldr	r2, [pc, #92]	; (80028b4 <TIM_OC3_SetConfig+0xf4>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d113      	bne.n	8002882 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002860:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002868:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	011b      	lsls	r3, r3, #4
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4313      	orrs	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4313      	orrs	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	621a      	str	r2, [r3, #32]
}
 800289c:	bf00      	nop
 800289e:	371c      	adds	r7, #28
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	40012c00 	.word	0x40012c00
 80028ac:	40014000 	.word	0x40014000
 80028b0:	40014400 	.word	0x40014400
 80028b4:	40014800 	.word	0x40014800

080028b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b087      	sub	sp, #28
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	021b      	lsls	r3, r3, #8
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002902:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	031b      	lsls	r3, r3, #12
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	4313      	orrs	r3, r2
 800290e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a15      	ldr	r2, [pc, #84]	; (8002968 <TIM_OC4_SetConfig+0xb0>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d00b      	beq.n	8002930 <TIM_OC4_SetConfig+0x78>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a14      	ldr	r2, [pc, #80]	; (800296c <TIM_OC4_SetConfig+0xb4>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d007      	beq.n	8002930 <TIM_OC4_SetConfig+0x78>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a13      	ldr	r2, [pc, #76]	; (8002970 <TIM_OC4_SetConfig+0xb8>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d003      	beq.n	8002930 <TIM_OC4_SetConfig+0x78>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a12      	ldr	r2, [pc, #72]	; (8002974 <TIM_OC4_SetConfig+0xbc>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d109      	bne.n	8002944 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002936:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	019b      	lsls	r3, r3, #6
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	4313      	orrs	r3, r2
 8002942:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	621a      	str	r2, [r3, #32]
}
 800295e:	bf00      	nop
 8002960:	371c      	adds	r7, #28
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr
 8002968:	40012c00 	.word	0x40012c00
 800296c:	40014000 	.word	0x40014000
 8002970:	40014400 	.word	0x40014400
 8002974:	40014800 	.word	0x40014800

08002978 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002978:	b480      	push	{r7}
 800297a:	b087      	sub	sp, #28
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	f023 0201 	bic.w	r2, r3, #1
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f023 030a 	bic.w	r3, r3, #10
 80029b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	621a      	str	r2, [r3, #32]
}
 80029ca:	bf00      	nop
 80029cc:	371c      	adds	r7, #28
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr

080029d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b087      	sub	sp, #28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	f023 0210 	bic.w	r2, r3, #16
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	031b      	lsls	r3, r3, #12
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a10:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	011b      	lsls	r3, r3, #4
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	621a      	str	r2, [r3, #32]
}
 8002a28:	bf00      	nop
 8002a2a:	371c      	adds	r7, #28
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bc80      	pop	{r7}
 8002a30:	4770      	bx	lr

08002a32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b085      	sub	sp, #20
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
 8002a3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	f043 0307 	orr.w	r3, r3, #7
 8002a54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	609a      	str	r2, [r3, #8]
}
 8002a5c:	bf00      	nop
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bc80      	pop	{r7}
 8002a64:	4770      	bx	lr

08002a66 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b087      	sub	sp, #28
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	60f8      	str	r0, [r7, #12]
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	607a      	str	r2, [r7, #4]
 8002a72:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a80:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	021a      	lsls	r2, r3, #8
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	609a      	str	r2, [r3, #8]
}
 8002a9a:	bf00      	nop
 8002a9c:	371c      	adds	r7, #28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d101      	bne.n	8002abc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ab8:	2302      	movs	r3, #2
 8002aba:	e032      	b.n	8002b22 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ae2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002af4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68ba      	ldr	r2, [r7, #8]
 8002b0e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bc80      	pop	{r7}
 8002b2a:	4770      	bx	lr

08002b2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e03f      	b.n	8002bbe <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d106      	bne.n	8002b58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7fe f808 	bl	8000b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2224      	movs	r2, #36	; 0x24
 8002b5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 f829 	bl	8002bc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	691a      	ldr	r2, [r3, #16]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	695a      	ldr	r2, [r3, #20]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68da      	ldr	r2, [r3, #12]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ba4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
	...

08002bc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	611a      	str	r2, [r3, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

#if defined(USART_CR1_OVER8)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689a      	ldr	r2, [r3, #8]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002c08:	f023 030c 	bic.w	r3, r3, #12
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6812      	ldr	r2, [r2, #0]
 8002c10:	68f9      	ldr	r1, [r7, #12]
 8002c12:	430b      	orrs	r3, r1
 8002c14:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	699a      	ldr	r2, [r3, #24]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	615a      	str	r2, [r3, #20]

#if defined(USART_CR1_OVER8)
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c34:	f040 80a5 	bne.w	8002d82 <UART_SetConfig+0x1ba>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if(huart->Instance == USART1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4aa4      	ldr	r2, [pc, #656]	; (8002ed0 <UART_SetConfig+0x308>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d14f      	bne.n	8002ce2 <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c42:	f7ff f92f 	bl	8001ea4 <HAL_RCC_GetPCLK2Freq>
 8002c46:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	009a      	lsls	r2, r3, #2
 8002c52:	441a      	add	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c5e:	4a9d      	ldr	r2, [pc, #628]	; (8002ed4 <UART_SetConfig+0x30c>)
 8002c60:	fba2 2303 	umull	r2, r3, r2, r3
 8002c64:	095b      	lsrs	r3, r3, #5
 8002c66:	0119      	lsls	r1, r3, #4
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	009a      	lsls	r2, r3, #2
 8002c72:	441a      	add	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c7e:	4b95      	ldr	r3, [pc, #596]	; (8002ed4 <UART_SetConfig+0x30c>)
 8002c80:	fba3 0302 	umull	r0, r3, r3, r2
 8002c84:	095b      	lsrs	r3, r3, #5
 8002c86:	2064      	movs	r0, #100	; 0x64
 8002c88:	fb00 f303 	mul.w	r3, r0, r3
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	3332      	adds	r3, #50	; 0x32
 8002c92:	4a90      	ldr	r2, [pc, #576]	; (8002ed4 <UART_SetConfig+0x30c>)
 8002c94:	fba2 2303 	umull	r2, r3, r2, r3
 8002c98:	095b      	lsrs	r3, r3, #5
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ca0:	4419      	add	r1, r3
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	009a      	lsls	r2, r3, #2
 8002cac:	441a      	add	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cb8:	4b86      	ldr	r3, [pc, #536]	; (8002ed4 <UART_SetConfig+0x30c>)
 8002cba:	fba3 0302 	umull	r0, r3, r3, r2
 8002cbe:	095b      	lsrs	r3, r3, #5
 8002cc0:	2064      	movs	r0, #100	; 0x64
 8002cc2:	fb00 f303 	mul.w	r3, r0, r3
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	3332      	adds	r3, #50	; 0x32
 8002ccc:	4a81      	ldr	r2, [pc, #516]	; (8002ed4 <UART_SetConfig+0x30c>)
 8002cce:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd2:	095b      	lsrs	r3, r3, #5
 8002cd4:	f003 0207 	and.w	r2, r3, #7
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	440a      	add	r2, r1
 8002cde:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002ce0:	e0f1      	b.n	8002ec6 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ce2:	f7ff f8cb 	bl	8001e7c <HAL_RCC_GetPCLK1Freq>
 8002ce6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	4613      	mov	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	009a      	lsls	r2, r3, #2
 8002cf2:	441a      	add	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfe:	4a75      	ldr	r2, [pc, #468]	; (8002ed4 <UART_SetConfig+0x30c>)
 8002d00:	fba2 2303 	umull	r2, r3, r2, r3
 8002d04:	095b      	lsrs	r3, r3, #5
 8002d06:	0119      	lsls	r1, r3, #4
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	4413      	add	r3, r2
 8002d10:	009a      	lsls	r2, r3, #2
 8002d12:	441a      	add	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d1e:	4b6d      	ldr	r3, [pc, #436]	; (8002ed4 <UART_SetConfig+0x30c>)
 8002d20:	fba3 0302 	umull	r0, r3, r3, r2
 8002d24:	095b      	lsrs	r3, r3, #5
 8002d26:	2064      	movs	r0, #100	; 0x64
 8002d28:	fb00 f303 	mul.w	r3, r0, r3
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	3332      	adds	r3, #50	; 0x32
 8002d32:	4a68      	ldr	r2, [pc, #416]	; (8002ed4 <UART_SetConfig+0x30c>)
 8002d34:	fba2 2303 	umull	r2, r3, r2, r3
 8002d38:	095b      	lsrs	r3, r3, #5
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d40:	4419      	add	r1, r3
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	4613      	mov	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	009a      	lsls	r2, r3, #2
 8002d4c:	441a      	add	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d58:	4b5e      	ldr	r3, [pc, #376]	; (8002ed4 <UART_SetConfig+0x30c>)
 8002d5a:	fba3 0302 	umull	r0, r3, r3, r2
 8002d5e:	095b      	lsrs	r3, r3, #5
 8002d60:	2064      	movs	r0, #100	; 0x64
 8002d62:	fb00 f303 	mul.w	r3, r0, r3
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	3332      	adds	r3, #50	; 0x32
 8002d6c:	4a59      	ldr	r2, [pc, #356]	; (8002ed4 <UART_SetConfig+0x30c>)
 8002d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d72:	095b      	lsrs	r3, r3, #5
 8002d74:	f003 0207 	and.w	r2, r3, #7
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	440a      	add	r2, r1
 8002d7e:	609a      	str	r2, [r3, #8]
}
 8002d80:	e0a1      	b.n	8002ec6 <UART_SetConfig+0x2fe>
    if(huart->Instance == USART1)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a52      	ldr	r2, [pc, #328]	; (8002ed0 <UART_SetConfig+0x308>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d14e      	bne.n	8002e2a <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d8c:	f7ff f88a 	bl	8001ea4 <HAL_RCC_GetPCLK2Freq>
 8002d90:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	4613      	mov	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	009a      	lsls	r2, r3, #2
 8002d9c:	441a      	add	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da8:	4a4a      	ldr	r2, [pc, #296]	; (8002ed4 <UART_SetConfig+0x30c>)
 8002daa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dae:	095b      	lsrs	r3, r3, #5
 8002db0:	0119      	lsls	r1, r3, #4
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	009a      	lsls	r2, r3, #2
 8002dbc:	441a      	add	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dc8:	4b42      	ldr	r3, [pc, #264]	; (8002ed4 <UART_SetConfig+0x30c>)
 8002dca:	fba3 0302 	umull	r0, r3, r3, r2
 8002dce:	095b      	lsrs	r3, r3, #5
 8002dd0:	2064      	movs	r0, #100	; 0x64
 8002dd2:	fb00 f303 	mul.w	r3, r0, r3
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	011b      	lsls	r3, r3, #4
 8002dda:	3332      	adds	r3, #50	; 0x32
 8002ddc:	4a3d      	ldr	r2, [pc, #244]	; (8002ed4 <UART_SetConfig+0x30c>)
 8002dde:	fba2 2303 	umull	r2, r3, r2, r3
 8002de2:	095b      	lsrs	r3, r3, #5
 8002de4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002de8:	4419      	add	r1, r3
 8002dea:	68ba      	ldr	r2, [r7, #8]
 8002dec:	4613      	mov	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	009a      	lsls	r2, r3, #2
 8002df4:	441a      	add	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e00:	4b34      	ldr	r3, [pc, #208]	; (8002ed4 <UART_SetConfig+0x30c>)
 8002e02:	fba3 0302 	umull	r0, r3, r3, r2
 8002e06:	095b      	lsrs	r3, r3, #5
 8002e08:	2064      	movs	r0, #100	; 0x64
 8002e0a:	fb00 f303 	mul.w	r3, r0, r3
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	011b      	lsls	r3, r3, #4
 8002e12:	3332      	adds	r3, #50	; 0x32
 8002e14:	4a2f      	ldr	r2, [pc, #188]	; (8002ed4 <UART_SetConfig+0x30c>)
 8002e16:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1a:	095b      	lsrs	r3, r3, #5
 8002e1c:	f003 020f 	and.w	r2, r3, #15
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	440a      	add	r2, r1
 8002e26:	609a      	str	r2, [r3, #8]
}
 8002e28:	e04d      	b.n	8002ec6 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e2a:	f7ff f827 	bl	8001e7c <HAL_RCC_GetPCLK1Freq>
 8002e2e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	4613      	mov	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	009a      	lsls	r2, r3, #2
 8002e3a:	441a      	add	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e46:	4a23      	ldr	r2, [pc, #140]	; (8002ed4 <UART_SetConfig+0x30c>)
 8002e48:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4c:	095b      	lsrs	r3, r3, #5
 8002e4e:	0119      	lsls	r1, r3, #4
 8002e50:	68ba      	ldr	r2, [r7, #8]
 8002e52:	4613      	mov	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4413      	add	r3, r2
 8002e58:	009a      	lsls	r2, r3, #2
 8002e5a:	441a      	add	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e66:	4b1b      	ldr	r3, [pc, #108]	; (8002ed4 <UART_SetConfig+0x30c>)
 8002e68:	fba3 0302 	umull	r0, r3, r3, r2
 8002e6c:	095b      	lsrs	r3, r3, #5
 8002e6e:	2064      	movs	r0, #100	; 0x64
 8002e70:	fb00 f303 	mul.w	r3, r0, r3
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	011b      	lsls	r3, r3, #4
 8002e78:	3332      	adds	r3, #50	; 0x32
 8002e7a:	4a16      	ldr	r2, [pc, #88]	; (8002ed4 <UART_SetConfig+0x30c>)
 8002e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e80:	095b      	lsrs	r3, r3, #5
 8002e82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e86:	4419      	add	r1, r3
 8002e88:	68ba      	ldr	r2, [r7, #8]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	009a      	lsls	r2, r3, #2
 8002e92:	441a      	add	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e9e:	4b0d      	ldr	r3, [pc, #52]	; (8002ed4 <UART_SetConfig+0x30c>)
 8002ea0:	fba3 0302 	umull	r0, r3, r3, r2
 8002ea4:	095b      	lsrs	r3, r3, #5
 8002ea6:	2064      	movs	r0, #100	; 0x64
 8002ea8:	fb00 f303 	mul.w	r3, r0, r3
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	011b      	lsls	r3, r3, #4
 8002eb0:	3332      	adds	r3, #50	; 0x32
 8002eb2:	4a08      	ldr	r2, [pc, #32]	; (8002ed4 <UART_SetConfig+0x30c>)
 8002eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb8:	095b      	lsrs	r3, r3, #5
 8002eba:	f003 020f 	and.w	r2, r3, #15
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	440a      	add	r2, r1
 8002ec4:	609a      	str	r2, [r3, #8]
}
 8002ec6:	bf00      	nop
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40013800 	.word	0x40013800
 8002ed4:	51eb851f 	.word	0x51eb851f

08002ed8 <__errno>:
 8002ed8:	4b01      	ldr	r3, [pc, #4]	; (8002ee0 <__errno+0x8>)
 8002eda:	6818      	ldr	r0, [r3, #0]
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	2000000c 	.word	0x2000000c

08002ee4 <__libc_init_array>:
 8002ee4:	b570      	push	{r4, r5, r6, lr}
 8002ee6:	2500      	movs	r5, #0
 8002ee8:	4e0c      	ldr	r6, [pc, #48]	; (8002f1c <__libc_init_array+0x38>)
 8002eea:	4c0d      	ldr	r4, [pc, #52]	; (8002f20 <__libc_init_array+0x3c>)
 8002eec:	1ba4      	subs	r4, r4, r6
 8002eee:	10a4      	asrs	r4, r4, #2
 8002ef0:	42a5      	cmp	r5, r4
 8002ef2:	d109      	bne.n	8002f08 <__libc_init_array+0x24>
 8002ef4:	f000 fc50 	bl	8003798 <_init>
 8002ef8:	2500      	movs	r5, #0
 8002efa:	4e0a      	ldr	r6, [pc, #40]	; (8002f24 <__libc_init_array+0x40>)
 8002efc:	4c0a      	ldr	r4, [pc, #40]	; (8002f28 <__libc_init_array+0x44>)
 8002efe:	1ba4      	subs	r4, r4, r6
 8002f00:	10a4      	asrs	r4, r4, #2
 8002f02:	42a5      	cmp	r5, r4
 8002f04:	d105      	bne.n	8002f12 <__libc_init_array+0x2e>
 8002f06:	bd70      	pop	{r4, r5, r6, pc}
 8002f08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f0c:	4798      	blx	r3
 8002f0e:	3501      	adds	r5, #1
 8002f10:	e7ee      	b.n	8002ef0 <__libc_init_array+0xc>
 8002f12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f16:	4798      	blx	r3
 8002f18:	3501      	adds	r5, #1
 8002f1a:	e7f2      	b.n	8002f02 <__libc_init_array+0x1e>
 8002f1c:	08003848 	.word	0x08003848
 8002f20:	08003848 	.word	0x08003848
 8002f24:	08003848 	.word	0x08003848
 8002f28:	0800384c 	.word	0x0800384c

08002f2c <memcpy>:
 8002f2c:	b510      	push	{r4, lr}
 8002f2e:	1e43      	subs	r3, r0, #1
 8002f30:	440a      	add	r2, r1
 8002f32:	4291      	cmp	r1, r2
 8002f34:	d100      	bne.n	8002f38 <memcpy+0xc>
 8002f36:	bd10      	pop	{r4, pc}
 8002f38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f40:	e7f7      	b.n	8002f32 <memcpy+0x6>

08002f42 <memset>:
 8002f42:	4603      	mov	r3, r0
 8002f44:	4402      	add	r2, r0
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d100      	bne.n	8002f4c <memset+0xa>
 8002f4a:	4770      	bx	lr
 8002f4c:	f803 1b01 	strb.w	r1, [r3], #1
 8002f50:	e7f9      	b.n	8002f46 <memset+0x4>

08002f52 <_vsniprintf_r>:
 8002f52:	b530      	push	{r4, r5, lr}
 8002f54:	1e14      	subs	r4, r2, #0
 8002f56:	4605      	mov	r5, r0
 8002f58:	b09b      	sub	sp, #108	; 0x6c
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	da05      	bge.n	8002f6a <_vsniprintf_r+0x18>
 8002f5e:	238b      	movs	r3, #139	; 0x8b
 8002f60:	f04f 30ff 	mov.w	r0, #4294967295
 8002f64:	602b      	str	r3, [r5, #0]
 8002f66:	b01b      	add	sp, #108	; 0x6c
 8002f68:	bd30      	pop	{r4, r5, pc}
 8002f6a:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002f6e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8002f72:	bf0c      	ite	eq
 8002f74:	4623      	moveq	r3, r4
 8002f76:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002f7a:	9302      	str	r3, [sp, #8]
 8002f7c:	9305      	str	r3, [sp, #20]
 8002f7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f82:	9100      	str	r1, [sp, #0]
 8002f84:	9104      	str	r1, [sp, #16]
 8002f86:	f8ad 300e 	strh.w	r3, [sp, #14]
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002f8e:	4669      	mov	r1, sp
 8002f90:	4628      	mov	r0, r5
 8002f92:	f000 f873 	bl	800307c <_svfiprintf_r>
 8002f96:	1c43      	adds	r3, r0, #1
 8002f98:	bfbc      	itt	lt
 8002f9a:	238b      	movlt	r3, #139	; 0x8b
 8002f9c:	602b      	strlt	r3, [r5, #0]
 8002f9e:	2c00      	cmp	r4, #0
 8002fa0:	d0e1      	beq.n	8002f66 <_vsniprintf_r+0x14>
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	9b00      	ldr	r3, [sp, #0]
 8002fa6:	701a      	strb	r2, [r3, #0]
 8002fa8:	e7dd      	b.n	8002f66 <_vsniprintf_r+0x14>
	...

08002fac <vsniprintf>:
 8002fac:	b507      	push	{r0, r1, r2, lr}
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	460a      	mov	r2, r1
 8002fb4:	4601      	mov	r1, r0
 8002fb6:	4803      	ldr	r0, [pc, #12]	; (8002fc4 <vsniprintf+0x18>)
 8002fb8:	6800      	ldr	r0, [r0, #0]
 8002fba:	f7ff ffca 	bl	8002f52 <_vsniprintf_r>
 8002fbe:	b003      	add	sp, #12
 8002fc0:	f85d fb04 	ldr.w	pc, [sp], #4
 8002fc4:	2000000c 	.word	0x2000000c

08002fc8 <__ssputs_r>:
 8002fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fcc:	688e      	ldr	r6, [r1, #8]
 8002fce:	4682      	mov	sl, r0
 8002fd0:	429e      	cmp	r6, r3
 8002fd2:	460c      	mov	r4, r1
 8002fd4:	4690      	mov	r8, r2
 8002fd6:	4699      	mov	r9, r3
 8002fd8:	d837      	bhi.n	800304a <__ssputs_r+0x82>
 8002fda:	898a      	ldrh	r2, [r1, #12]
 8002fdc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002fe0:	d031      	beq.n	8003046 <__ssputs_r+0x7e>
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	6825      	ldr	r5, [r4, #0]
 8002fe6:	6909      	ldr	r1, [r1, #16]
 8002fe8:	1a6f      	subs	r7, r5, r1
 8002fea:	6965      	ldr	r5, [r4, #20]
 8002fec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002ff0:	fb95 f5f3 	sdiv	r5, r5, r3
 8002ff4:	f109 0301 	add.w	r3, r9, #1
 8002ff8:	443b      	add	r3, r7
 8002ffa:	429d      	cmp	r5, r3
 8002ffc:	bf38      	it	cc
 8002ffe:	461d      	movcc	r5, r3
 8003000:	0553      	lsls	r3, r2, #21
 8003002:	d530      	bpl.n	8003066 <__ssputs_r+0x9e>
 8003004:	4629      	mov	r1, r5
 8003006:	f000 fb2d 	bl	8003664 <_malloc_r>
 800300a:	4606      	mov	r6, r0
 800300c:	b950      	cbnz	r0, 8003024 <__ssputs_r+0x5c>
 800300e:	230c      	movs	r3, #12
 8003010:	f04f 30ff 	mov.w	r0, #4294967295
 8003014:	f8ca 3000 	str.w	r3, [sl]
 8003018:	89a3      	ldrh	r3, [r4, #12]
 800301a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800301e:	81a3      	strh	r3, [r4, #12]
 8003020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003024:	463a      	mov	r2, r7
 8003026:	6921      	ldr	r1, [r4, #16]
 8003028:	f7ff ff80 	bl	8002f2c <memcpy>
 800302c:	89a3      	ldrh	r3, [r4, #12]
 800302e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003036:	81a3      	strh	r3, [r4, #12]
 8003038:	6126      	str	r6, [r4, #16]
 800303a:	443e      	add	r6, r7
 800303c:	6026      	str	r6, [r4, #0]
 800303e:	464e      	mov	r6, r9
 8003040:	6165      	str	r5, [r4, #20]
 8003042:	1bed      	subs	r5, r5, r7
 8003044:	60a5      	str	r5, [r4, #8]
 8003046:	454e      	cmp	r6, r9
 8003048:	d900      	bls.n	800304c <__ssputs_r+0x84>
 800304a:	464e      	mov	r6, r9
 800304c:	4632      	mov	r2, r6
 800304e:	4641      	mov	r1, r8
 8003050:	6820      	ldr	r0, [r4, #0]
 8003052:	f000 faa1 	bl	8003598 <memmove>
 8003056:	68a3      	ldr	r3, [r4, #8]
 8003058:	2000      	movs	r0, #0
 800305a:	1b9b      	subs	r3, r3, r6
 800305c:	60a3      	str	r3, [r4, #8]
 800305e:	6823      	ldr	r3, [r4, #0]
 8003060:	441e      	add	r6, r3
 8003062:	6026      	str	r6, [r4, #0]
 8003064:	e7dc      	b.n	8003020 <__ssputs_r+0x58>
 8003066:	462a      	mov	r2, r5
 8003068:	f000 fb56 	bl	8003718 <_realloc_r>
 800306c:	4606      	mov	r6, r0
 800306e:	2800      	cmp	r0, #0
 8003070:	d1e2      	bne.n	8003038 <__ssputs_r+0x70>
 8003072:	6921      	ldr	r1, [r4, #16]
 8003074:	4650      	mov	r0, sl
 8003076:	f000 faa9 	bl	80035cc <_free_r>
 800307a:	e7c8      	b.n	800300e <__ssputs_r+0x46>

0800307c <_svfiprintf_r>:
 800307c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003080:	461d      	mov	r5, r3
 8003082:	898b      	ldrh	r3, [r1, #12]
 8003084:	b09d      	sub	sp, #116	; 0x74
 8003086:	061f      	lsls	r7, r3, #24
 8003088:	4680      	mov	r8, r0
 800308a:	460c      	mov	r4, r1
 800308c:	4616      	mov	r6, r2
 800308e:	d50f      	bpl.n	80030b0 <_svfiprintf_r+0x34>
 8003090:	690b      	ldr	r3, [r1, #16]
 8003092:	b96b      	cbnz	r3, 80030b0 <_svfiprintf_r+0x34>
 8003094:	2140      	movs	r1, #64	; 0x40
 8003096:	f000 fae5 	bl	8003664 <_malloc_r>
 800309a:	6020      	str	r0, [r4, #0]
 800309c:	6120      	str	r0, [r4, #16]
 800309e:	b928      	cbnz	r0, 80030ac <_svfiprintf_r+0x30>
 80030a0:	230c      	movs	r3, #12
 80030a2:	f8c8 3000 	str.w	r3, [r8]
 80030a6:	f04f 30ff 	mov.w	r0, #4294967295
 80030aa:	e0c8      	b.n	800323e <_svfiprintf_r+0x1c2>
 80030ac:	2340      	movs	r3, #64	; 0x40
 80030ae:	6163      	str	r3, [r4, #20]
 80030b0:	2300      	movs	r3, #0
 80030b2:	9309      	str	r3, [sp, #36]	; 0x24
 80030b4:	2320      	movs	r3, #32
 80030b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80030ba:	2330      	movs	r3, #48	; 0x30
 80030bc:	f04f 0b01 	mov.w	fp, #1
 80030c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80030c4:	9503      	str	r5, [sp, #12]
 80030c6:	4637      	mov	r7, r6
 80030c8:	463d      	mov	r5, r7
 80030ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80030ce:	b10b      	cbz	r3, 80030d4 <_svfiprintf_r+0x58>
 80030d0:	2b25      	cmp	r3, #37	; 0x25
 80030d2:	d13e      	bne.n	8003152 <_svfiprintf_r+0xd6>
 80030d4:	ebb7 0a06 	subs.w	sl, r7, r6
 80030d8:	d00b      	beq.n	80030f2 <_svfiprintf_r+0x76>
 80030da:	4653      	mov	r3, sl
 80030dc:	4632      	mov	r2, r6
 80030de:	4621      	mov	r1, r4
 80030e0:	4640      	mov	r0, r8
 80030e2:	f7ff ff71 	bl	8002fc8 <__ssputs_r>
 80030e6:	3001      	adds	r0, #1
 80030e8:	f000 80a4 	beq.w	8003234 <_svfiprintf_r+0x1b8>
 80030ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030ee:	4453      	add	r3, sl
 80030f0:	9309      	str	r3, [sp, #36]	; 0x24
 80030f2:	783b      	ldrb	r3, [r7, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 809d 	beq.w	8003234 <_svfiprintf_r+0x1b8>
 80030fa:	2300      	movs	r3, #0
 80030fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003100:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003104:	9304      	str	r3, [sp, #16]
 8003106:	9307      	str	r3, [sp, #28]
 8003108:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800310c:	931a      	str	r3, [sp, #104]	; 0x68
 800310e:	462f      	mov	r7, r5
 8003110:	2205      	movs	r2, #5
 8003112:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003116:	4850      	ldr	r0, [pc, #320]	; (8003258 <_svfiprintf_r+0x1dc>)
 8003118:	f000 fa30 	bl	800357c <memchr>
 800311c:	9b04      	ldr	r3, [sp, #16]
 800311e:	b9d0      	cbnz	r0, 8003156 <_svfiprintf_r+0xda>
 8003120:	06d9      	lsls	r1, r3, #27
 8003122:	bf44      	itt	mi
 8003124:	2220      	movmi	r2, #32
 8003126:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800312a:	071a      	lsls	r2, r3, #28
 800312c:	bf44      	itt	mi
 800312e:	222b      	movmi	r2, #43	; 0x2b
 8003130:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003134:	782a      	ldrb	r2, [r5, #0]
 8003136:	2a2a      	cmp	r2, #42	; 0x2a
 8003138:	d015      	beq.n	8003166 <_svfiprintf_r+0xea>
 800313a:	462f      	mov	r7, r5
 800313c:	2000      	movs	r0, #0
 800313e:	250a      	movs	r5, #10
 8003140:	9a07      	ldr	r2, [sp, #28]
 8003142:	4639      	mov	r1, r7
 8003144:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003148:	3b30      	subs	r3, #48	; 0x30
 800314a:	2b09      	cmp	r3, #9
 800314c:	d94d      	bls.n	80031ea <_svfiprintf_r+0x16e>
 800314e:	b1b8      	cbz	r0, 8003180 <_svfiprintf_r+0x104>
 8003150:	e00f      	b.n	8003172 <_svfiprintf_r+0xf6>
 8003152:	462f      	mov	r7, r5
 8003154:	e7b8      	b.n	80030c8 <_svfiprintf_r+0x4c>
 8003156:	4a40      	ldr	r2, [pc, #256]	; (8003258 <_svfiprintf_r+0x1dc>)
 8003158:	463d      	mov	r5, r7
 800315a:	1a80      	subs	r0, r0, r2
 800315c:	fa0b f000 	lsl.w	r0, fp, r0
 8003160:	4318      	orrs	r0, r3
 8003162:	9004      	str	r0, [sp, #16]
 8003164:	e7d3      	b.n	800310e <_svfiprintf_r+0x92>
 8003166:	9a03      	ldr	r2, [sp, #12]
 8003168:	1d11      	adds	r1, r2, #4
 800316a:	6812      	ldr	r2, [r2, #0]
 800316c:	9103      	str	r1, [sp, #12]
 800316e:	2a00      	cmp	r2, #0
 8003170:	db01      	blt.n	8003176 <_svfiprintf_r+0xfa>
 8003172:	9207      	str	r2, [sp, #28]
 8003174:	e004      	b.n	8003180 <_svfiprintf_r+0x104>
 8003176:	4252      	negs	r2, r2
 8003178:	f043 0302 	orr.w	r3, r3, #2
 800317c:	9207      	str	r2, [sp, #28]
 800317e:	9304      	str	r3, [sp, #16]
 8003180:	783b      	ldrb	r3, [r7, #0]
 8003182:	2b2e      	cmp	r3, #46	; 0x2e
 8003184:	d10c      	bne.n	80031a0 <_svfiprintf_r+0x124>
 8003186:	787b      	ldrb	r3, [r7, #1]
 8003188:	2b2a      	cmp	r3, #42	; 0x2a
 800318a:	d133      	bne.n	80031f4 <_svfiprintf_r+0x178>
 800318c:	9b03      	ldr	r3, [sp, #12]
 800318e:	3702      	adds	r7, #2
 8003190:	1d1a      	adds	r2, r3, #4
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	9203      	str	r2, [sp, #12]
 8003196:	2b00      	cmp	r3, #0
 8003198:	bfb8      	it	lt
 800319a:	f04f 33ff 	movlt.w	r3, #4294967295
 800319e:	9305      	str	r3, [sp, #20]
 80031a0:	4d2e      	ldr	r5, [pc, #184]	; (800325c <_svfiprintf_r+0x1e0>)
 80031a2:	2203      	movs	r2, #3
 80031a4:	7839      	ldrb	r1, [r7, #0]
 80031a6:	4628      	mov	r0, r5
 80031a8:	f000 f9e8 	bl	800357c <memchr>
 80031ac:	b138      	cbz	r0, 80031be <_svfiprintf_r+0x142>
 80031ae:	2340      	movs	r3, #64	; 0x40
 80031b0:	1b40      	subs	r0, r0, r5
 80031b2:	fa03 f000 	lsl.w	r0, r3, r0
 80031b6:	9b04      	ldr	r3, [sp, #16]
 80031b8:	3701      	adds	r7, #1
 80031ba:	4303      	orrs	r3, r0
 80031bc:	9304      	str	r3, [sp, #16]
 80031be:	7839      	ldrb	r1, [r7, #0]
 80031c0:	2206      	movs	r2, #6
 80031c2:	4827      	ldr	r0, [pc, #156]	; (8003260 <_svfiprintf_r+0x1e4>)
 80031c4:	1c7e      	adds	r6, r7, #1
 80031c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80031ca:	f000 f9d7 	bl	800357c <memchr>
 80031ce:	2800      	cmp	r0, #0
 80031d0:	d038      	beq.n	8003244 <_svfiprintf_r+0x1c8>
 80031d2:	4b24      	ldr	r3, [pc, #144]	; (8003264 <_svfiprintf_r+0x1e8>)
 80031d4:	bb13      	cbnz	r3, 800321c <_svfiprintf_r+0x1a0>
 80031d6:	9b03      	ldr	r3, [sp, #12]
 80031d8:	3307      	adds	r3, #7
 80031da:	f023 0307 	bic.w	r3, r3, #7
 80031de:	3308      	adds	r3, #8
 80031e0:	9303      	str	r3, [sp, #12]
 80031e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031e4:	444b      	add	r3, r9
 80031e6:	9309      	str	r3, [sp, #36]	; 0x24
 80031e8:	e76d      	b.n	80030c6 <_svfiprintf_r+0x4a>
 80031ea:	fb05 3202 	mla	r2, r5, r2, r3
 80031ee:	2001      	movs	r0, #1
 80031f0:	460f      	mov	r7, r1
 80031f2:	e7a6      	b.n	8003142 <_svfiprintf_r+0xc6>
 80031f4:	2300      	movs	r3, #0
 80031f6:	250a      	movs	r5, #10
 80031f8:	4619      	mov	r1, r3
 80031fa:	3701      	adds	r7, #1
 80031fc:	9305      	str	r3, [sp, #20]
 80031fe:	4638      	mov	r0, r7
 8003200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003204:	3a30      	subs	r2, #48	; 0x30
 8003206:	2a09      	cmp	r2, #9
 8003208:	d903      	bls.n	8003212 <_svfiprintf_r+0x196>
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0c8      	beq.n	80031a0 <_svfiprintf_r+0x124>
 800320e:	9105      	str	r1, [sp, #20]
 8003210:	e7c6      	b.n	80031a0 <_svfiprintf_r+0x124>
 8003212:	fb05 2101 	mla	r1, r5, r1, r2
 8003216:	2301      	movs	r3, #1
 8003218:	4607      	mov	r7, r0
 800321a:	e7f0      	b.n	80031fe <_svfiprintf_r+0x182>
 800321c:	ab03      	add	r3, sp, #12
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	4622      	mov	r2, r4
 8003222:	4b11      	ldr	r3, [pc, #68]	; (8003268 <_svfiprintf_r+0x1ec>)
 8003224:	a904      	add	r1, sp, #16
 8003226:	4640      	mov	r0, r8
 8003228:	f3af 8000 	nop.w
 800322c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003230:	4681      	mov	r9, r0
 8003232:	d1d6      	bne.n	80031e2 <_svfiprintf_r+0x166>
 8003234:	89a3      	ldrh	r3, [r4, #12]
 8003236:	065b      	lsls	r3, r3, #25
 8003238:	f53f af35 	bmi.w	80030a6 <_svfiprintf_r+0x2a>
 800323c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800323e:	b01d      	add	sp, #116	; 0x74
 8003240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003244:	ab03      	add	r3, sp, #12
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	4622      	mov	r2, r4
 800324a:	4b07      	ldr	r3, [pc, #28]	; (8003268 <_svfiprintf_r+0x1ec>)
 800324c:	a904      	add	r1, sp, #16
 800324e:	4640      	mov	r0, r8
 8003250:	f000 f882 	bl	8003358 <_printf_i>
 8003254:	e7ea      	b.n	800322c <_svfiprintf_r+0x1b0>
 8003256:	bf00      	nop
 8003258:	08003814 	.word	0x08003814
 800325c:	0800381a 	.word	0x0800381a
 8003260:	0800381e 	.word	0x0800381e
 8003264:	00000000 	.word	0x00000000
 8003268:	08002fc9 	.word	0x08002fc9

0800326c <_printf_common>:
 800326c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003270:	4691      	mov	r9, r2
 8003272:	461f      	mov	r7, r3
 8003274:	688a      	ldr	r2, [r1, #8]
 8003276:	690b      	ldr	r3, [r1, #16]
 8003278:	4606      	mov	r6, r0
 800327a:	4293      	cmp	r3, r2
 800327c:	bfb8      	it	lt
 800327e:	4613      	movlt	r3, r2
 8003280:	f8c9 3000 	str.w	r3, [r9]
 8003284:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003288:	460c      	mov	r4, r1
 800328a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800328e:	b112      	cbz	r2, 8003296 <_printf_common+0x2a>
 8003290:	3301      	adds	r3, #1
 8003292:	f8c9 3000 	str.w	r3, [r9]
 8003296:	6823      	ldr	r3, [r4, #0]
 8003298:	0699      	lsls	r1, r3, #26
 800329a:	bf42      	ittt	mi
 800329c:	f8d9 3000 	ldrmi.w	r3, [r9]
 80032a0:	3302      	addmi	r3, #2
 80032a2:	f8c9 3000 	strmi.w	r3, [r9]
 80032a6:	6825      	ldr	r5, [r4, #0]
 80032a8:	f015 0506 	ands.w	r5, r5, #6
 80032ac:	d107      	bne.n	80032be <_printf_common+0x52>
 80032ae:	f104 0a19 	add.w	sl, r4, #25
 80032b2:	68e3      	ldr	r3, [r4, #12]
 80032b4:	f8d9 2000 	ldr.w	r2, [r9]
 80032b8:	1a9b      	subs	r3, r3, r2
 80032ba:	42ab      	cmp	r3, r5
 80032bc:	dc29      	bgt.n	8003312 <_printf_common+0xa6>
 80032be:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80032c2:	6822      	ldr	r2, [r4, #0]
 80032c4:	3300      	adds	r3, #0
 80032c6:	bf18      	it	ne
 80032c8:	2301      	movne	r3, #1
 80032ca:	0692      	lsls	r2, r2, #26
 80032cc:	d42e      	bmi.n	800332c <_printf_common+0xc0>
 80032ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032d2:	4639      	mov	r1, r7
 80032d4:	4630      	mov	r0, r6
 80032d6:	47c0      	blx	r8
 80032d8:	3001      	adds	r0, #1
 80032da:	d021      	beq.n	8003320 <_printf_common+0xb4>
 80032dc:	6823      	ldr	r3, [r4, #0]
 80032de:	68e5      	ldr	r5, [r4, #12]
 80032e0:	f003 0306 	and.w	r3, r3, #6
 80032e4:	2b04      	cmp	r3, #4
 80032e6:	bf18      	it	ne
 80032e8:	2500      	movne	r5, #0
 80032ea:	f8d9 2000 	ldr.w	r2, [r9]
 80032ee:	f04f 0900 	mov.w	r9, #0
 80032f2:	bf08      	it	eq
 80032f4:	1aad      	subeq	r5, r5, r2
 80032f6:	68a3      	ldr	r3, [r4, #8]
 80032f8:	6922      	ldr	r2, [r4, #16]
 80032fa:	bf08      	it	eq
 80032fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003300:	4293      	cmp	r3, r2
 8003302:	bfc4      	itt	gt
 8003304:	1a9b      	subgt	r3, r3, r2
 8003306:	18ed      	addgt	r5, r5, r3
 8003308:	341a      	adds	r4, #26
 800330a:	454d      	cmp	r5, r9
 800330c:	d11a      	bne.n	8003344 <_printf_common+0xd8>
 800330e:	2000      	movs	r0, #0
 8003310:	e008      	b.n	8003324 <_printf_common+0xb8>
 8003312:	2301      	movs	r3, #1
 8003314:	4652      	mov	r2, sl
 8003316:	4639      	mov	r1, r7
 8003318:	4630      	mov	r0, r6
 800331a:	47c0      	blx	r8
 800331c:	3001      	adds	r0, #1
 800331e:	d103      	bne.n	8003328 <_printf_common+0xbc>
 8003320:	f04f 30ff 	mov.w	r0, #4294967295
 8003324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003328:	3501      	adds	r5, #1
 800332a:	e7c2      	b.n	80032b2 <_printf_common+0x46>
 800332c:	2030      	movs	r0, #48	; 0x30
 800332e:	18e1      	adds	r1, r4, r3
 8003330:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003334:	1c5a      	adds	r2, r3, #1
 8003336:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800333a:	4422      	add	r2, r4
 800333c:	3302      	adds	r3, #2
 800333e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003342:	e7c4      	b.n	80032ce <_printf_common+0x62>
 8003344:	2301      	movs	r3, #1
 8003346:	4622      	mov	r2, r4
 8003348:	4639      	mov	r1, r7
 800334a:	4630      	mov	r0, r6
 800334c:	47c0      	blx	r8
 800334e:	3001      	adds	r0, #1
 8003350:	d0e6      	beq.n	8003320 <_printf_common+0xb4>
 8003352:	f109 0901 	add.w	r9, r9, #1
 8003356:	e7d8      	b.n	800330a <_printf_common+0x9e>

08003358 <_printf_i>:
 8003358:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800335c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003360:	460c      	mov	r4, r1
 8003362:	7e09      	ldrb	r1, [r1, #24]
 8003364:	b085      	sub	sp, #20
 8003366:	296e      	cmp	r1, #110	; 0x6e
 8003368:	4617      	mov	r7, r2
 800336a:	4606      	mov	r6, r0
 800336c:	4698      	mov	r8, r3
 800336e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003370:	f000 80b3 	beq.w	80034da <_printf_i+0x182>
 8003374:	d822      	bhi.n	80033bc <_printf_i+0x64>
 8003376:	2963      	cmp	r1, #99	; 0x63
 8003378:	d036      	beq.n	80033e8 <_printf_i+0x90>
 800337a:	d80a      	bhi.n	8003392 <_printf_i+0x3a>
 800337c:	2900      	cmp	r1, #0
 800337e:	f000 80b9 	beq.w	80034f4 <_printf_i+0x19c>
 8003382:	2958      	cmp	r1, #88	; 0x58
 8003384:	f000 8083 	beq.w	800348e <_printf_i+0x136>
 8003388:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800338c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003390:	e032      	b.n	80033f8 <_printf_i+0xa0>
 8003392:	2964      	cmp	r1, #100	; 0x64
 8003394:	d001      	beq.n	800339a <_printf_i+0x42>
 8003396:	2969      	cmp	r1, #105	; 0x69
 8003398:	d1f6      	bne.n	8003388 <_printf_i+0x30>
 800339a:	6820      	ldr	r0, [r4, #0]
 800339c:	6813      	ldr	r3, [r2, #0]
 800339e:	0605      	lsls	r5, r0, #24
 80033a0:	f103 0104 	add.w	r1, r3, #4
 80033a4:	d52a      	bpl.n	80033fc <_printf_i+0xa4>
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6011      	str	r1, [r2, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	da03      	bge.n	80033b6 <_printf_i+0x5e>
 80033ae:	222d      	movs	r2, #45	; 0x2d
 80033b0:	425b      	negs	r3, r3
 80033b2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80033b6:	486f      	ldr	r0, [pc, #444]	; (8003574 <_printf_i+0x21c>)
 80033b8:	220a      	movs	r2, #10
 80033ba:	e039      	b.n	8003430 <_printf_i+0xd8>
 80033bc:	2973      	cmp	r1, #115	; 0x73
 80033be:	f000 809d 	beq.w	80034fc <_printf_i+0x1a4>
 80033c2:	d808      	bhi.n	80033d6 <_printf_i+0x7e>
 80033c4:	296f      	cmp	r1, #111	; 0x6f
 80033c6:	d020      	beq.n	800340a <_printf_i+0xb2>
 80033c8:	2970      	cmp	r1, #112	; 0x70
 80033ca:	d1dd      	bne.n	8003388 <_printf_i+0x30>
 80033cc:	6823      	ldr	r3, [r4, #0]
 80033ce:	f043 0320 	orr.w	r3, r3, #32
 80033d2:	6023      	str	r3, [r4, #0]
 80033d4:	e003      	b.n	80033de <_printf_i+0x86>
 80033d6:	2975      	cmp	r1, #117	; 0x75
 80033d8:	d017      	beq.n	800340a <_printf_i+0xb2>
 80033da:	2978      	cmp	r1, #120	; 0x78
 80033dc:	d1d4      	bne.n	8003388 <_printf_i+0x30>
 80033de:	2378      	movs	r3, #120	; 0x78
 80033e0:	4865      	ldr	r0, [pc, #404]	; (8003578 <_printf_i+0x220>)
 80033e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80033e6:	e055      	b.n	8003494 <_printf_i+0x13c>
 80033e8:	6813      	ldr	r3, [r2, #0]
 80033ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033ee:	1d19      	adds	r1, r3, #4
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6011      	str	r1, [r2, #0]
 80033f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033f8:	2301      	movs	r3, #1
 80033fa:	e08c      	b.n	8003516 <_printf_i+0x1be>
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003402:	6011      	str	r1, [r2, #0]
 8003404:	bf18      	it	ne
 8003406:	b21b      	sxthne	r3, r3
 8003408:	e7cf      	b.n	80033aa <_printf_i+0x52>
 800340a:	6813      	ldr	r3, [r2, #0]
 800340c:	6825      	ldr	r5, [r4, #0]
 800340e:	1d18      	adds	r0, r3, #4
 8003410:	6010      	str	r0, [r2, #0]
 8003412:	0628      	lsls	r0, r5, #24
 8003414:	d501      	bpl.n	800341a <_printf_i+0xc2>
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	e002      	b.n	8003420 <_printf_i+0xc8>
 800341a:	0668      	lsls	r0, r5, #25
 800341c:	d5fb      	bpl.n	8003416 <_printf_i+0xbe>
 800341e:	881b      	ldrh	r3, [r3, #0]
 8003420:	296f      	cmp	r1, #111	; 0x6f
 8003422:	bf14      	ite	ne
 8003424:	220a      	movne	r2, #10
 8003426:	2208      	moveq	r2, #8
 8003428:	4852      	ldr	r0, [pc, #328]	; (8003574 <_printf_i+0x21c>)
 800342a:	2100      	movs	r1, #0
 800342c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003430:	6865      	ldr	r5, [r4, #4]
 8003432:	2d00      	cmp	r5, #0
 8003434:	60a5      	str	r5, [r4, #8]
 8003436:	f2c0 8095 	blt.w	8003564 <_printf_i+0x20c>
 800343a:	6821      	ldr	r1, [r4, #0]
 800343c:	f021 0104 	bic.w	r1, r1, #4
 8003440:	6021      	str	r1, [r4, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d13d      	bne.n	80034c2 <_printf_i+0x16a>
 8003446:	2d00      	cmp	r5, #0
 8003448:	f040 808e 	bne.w	8003568 <_printf_i+0x210>
 800344c:	4665      	mov	r5, ip
 800344e:	2a08      	cmp	r2, #8
 8003450:	d10b      	bne.n	800346a <_printf_i+0x112>
 8003452:	6823      	ldr	r3, [r4, #0]
 8003454:	07db      	lsls	r3, r3, #31
 8003456:	d508      	bpl.n	800346a <_printf_i+0x112>
 8003458:	6923      	ldr	r3, [r4, #16]
 800345a:	6862      	ldr	r2, [r4, #4]
 800345c:	429a      	cmp	r2, r3
 800345e:	bfde      	ittt	le
 8003460:	2330      	movle	r3, #48	; 0x30
 8003462:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003466:	f105 35ff 	addle.w	r5, r5, #4294967295
 800346a:	ebac 0305 	sub.w	r3, ip, r5
 800346e:	6123      	str	r3, [r4, #16]
 8003470:	f8cd 8000 	str.w	r8, [sp]
 8003474:	463b      	mov	r3, r7
 8003476:	aa03      	add	r2, sp, #12
 8003478:	4621      	mov	r1, r4
 800347a:	4630      	mov	r0, r6
 800347c:	f7ff fef6 	bl	800326c <_printf_common>
 8003480:	3001      	adds	r0, #1
 8003482:	d14d      	bne.n	8003520 <_printf_i+0x1c8>
 8003484:	f04f 30ff 	mov.w	r0, #4294967295
 8003488:	b005      	add	sp, #20
 800348a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800348e:	4839      	ldr	r0, [pc, #228]	; (8003574 <_printf_i+0x21c>)
 8003490:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003494:	6813      	ldr	r3, [r2, #0]
 8003496:	6821      	ldr	r1, [r4, #0]
 8003498:	1d1d      	adds	r5, r3, #4
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6015      	str	r5, [r2, #0]
 800349e:	060a      	lsls	r2, r1, #24
 80034a0:	d50b      	bpl.n	80034ba <_printf_i+0x162>
 80034a2:	07ca      	lsls	r2, r1, #31
 80034a4:	bf44      	itt	mi
 80034a6:	f041 0120 	orrmi.w	r1, r1, #32
 80034aa:	6021      	strmi	r1, [r4, #0]
 80034ac:	b91b      	cbnz	r3, 80034b6 <_printf_i+0x15e>
 80034ae:	6822      	ldr	r2, [r4, #0]
 80034b0:	f022 0220 	bic.w	r2, r2, #32
 80034b4:	6022      	str	r2, [r4, #0]
 80034b6:	2210      	movs	r2, #16
 80034b8:	e7b7      	b.n	800342a <_printf_i+0xd2>
 80034ba:	064d      	lsls	r5, r1, #25
 80034bc:	bf48      	it	mi
 80034be:	b29b      	uxthmi	r3, r3
 80034c0:	e7ef      	b.n	80034a2 <_printf_i+0x14a>
 80034c2:	4665      	mov	r5, ip
 80034c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80034c8:	fb02 3311 	mls	r3, r2, r1, r3
 80034cc:	5cc3      	ldrb	r3, [r0, r3]
 80034ce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80034d2:	460b      	mov	r3, r1
 80034d4:	2900      	cmp	r1, #0
 80034d6:	d1f5      	bne.n	80034c4 <_printf_i+0x16c>
 80034d8:	e7b9      	b.n	800344e <_printf_i+0xf6>
 80034da:	6813      	ldr	r3, [r2, #0]
 80034dc:	6825      	ldr	r5, [r4, #0]
 80034de:	1d18      	adds	r0, r3, #4
 80034e0:	6961      	ldr	r1, [r4, #20]
 80034e2:	6010      	str	r0, [r2, #0]
 80034e4:	0628      	lsls	r0, r5, #24
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	d501      	bpl.n	80034ee <_printf_i+0x196>
 80034ea:	6019      	str	r1, [r3, #0]
 80034ec:	e002      	b.n	80034f4 <_printf_i+0x19c>
 80034ee:	066a      	lsls	r2, r5, #25
 80034f0:	d5fb      	bpl.n	80034ea <_printf_i+0x192>
 80034f2:	8019      	strh	r1, [r3, #0]
 80034f4:	2300      	movs	r3, #0
 80034f6:	4665      	mov	r5, ip
 80034f8:	6123      	str	r3, [r4, #16]
 80034fa:	e7b9      	b.n	8003470 <_printf_i+0x118>
 80034fc:	6813      	ldr	r3, [r2, #0]
 80034fe:	1d19      	adds	r1, r3, #4
 8003500:	6011      	str	r1, [r2, #0]
 8003502:	681d      	ldr	r5, [r3, #0]
 8003504:	6862      	ldr	r2, [r4, #4]
 8003506:	2100      	movs	r1, #0
 8003508:	4628      	mov	r0, r5
 800350a:	f000 f837 	bl	800357c <memchr>
 800350e:	b108      	cbz	r0, 8003514 <_printf_i+0x1bc>
 8003510:	1b40      	subs	r0, r0, r5
 8003512:	6060      	str	r0, [r4, #4]
 8003514:	6863      	ldr	r3, [r4, #4]
 8003516:	6123      	str	r3, [r4, #16]
 8003518:	2300      	movs	r3, #0
 800351a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800351e:	e7a7      	b.n	8003470 <_printf_i+0x118>
 8003520:	6923      	ldr	r3, [r4, #16]
 8003522:	462a      	mov	r2, r5
 8003524:	4639      	mov	r1, r7
 8003526:	4630      	mov	r0, r6
 8003528:	47c0      	blx	r8
 800352a:	3001      	adds	r0, #1
 800352c:	d0aa      	beq.n	8003484 <_printf_i+0x12c>
 800352e:	6823      	ldr	r3, [r4, #0]
 8003530:	079b      	lsls	r3, r3, #30
 8003532:	d413      	bmi.n	800355c <_printf_i+0x204>
 8003534:	68e0      	ldr	r0, [r4, #12]
 8003536:	9b03      	ldr	r3, [sp, #12]
 8003538:	4298      	cmp	r0, r3
 800353a:	bfb8      	it	lt
 800353c:	4618      	movlt	r0, r3
 800353e:	e7a3      	b.n	8003488 <_printf_i+0x130>
 8003540:	2301      	movs	r3, #1
 8003542:	464a      	mov	r2, r9
 8003544:	4639      	mov	r1, r7
 8003546:	4630      	mov	r0, r6
 8003548:	47c0      	blx	r8
 800354a:	3001      	adds	r0, #1
 800354c:	d09a      	beq.n	8003484 <_printf_i+0x12c>
 800354e:	3501      	adds	r5, #1
 8003550:	68e3      	ldr	r3, [r4, #12]
 8003552:	9a03      	ldr	r2, [sp, #12]
 8003554:	1a9b      	subs	r3, r3, r2
 8003556:	42ab      	cmp	r3, r5
 8003558:	dcf2      	bgt.n	8003540 <_printf_i+0x1e8>
 800355a:	e7eb      	b.n	8003534 <_printf_i+0x1dc>
 800355c:	2500      	movs	r5, #0
 800355e:	f104 0919 	add.w	r9, r4, #25
 8003562:	e7f5      	b.n	8003550 <_printf_i+0x1f8>
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1ac      	bne.n	80034c2 <_printf_i+0x16a>
 8003568:	7803      	ldrb	r3, [r0, #0]
 800356a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800356e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003572:	e76c      	b.n	800344e <_printf_i+0xf6>
 8003574:	08003825 	.word	0x08003825
 8003578:	08003836 	.word	0x08003836

0800357c <memchr>:
 800357c:	b510      	push	{r4, lr}
 800357e:	b2c9      	uxtb	r1, r1
 8003580:	4402      	add	r2, r0
 8003582:	4290      	cmp	r0, r2
 8003584:	4603      	mov	r3, r0
 8003586:	d101      	bne.n	800358c <memchr+0x10>
 8003588:	2300      	movs	r3, #0
 800358a:	e003      	b.n	8003594 <memchr+0x18>
 800358c:	781c      	ldrb	r4, [r3, #0]
 800358e:	3001      	adds	r0, #1
 8003590:	428c      	cmp	r4, r1
 8003592:	d1f6      	bne.n	8003582 <memchr+0x6>
 8003594:	4618      	mov	r0, r3
 8003596:	bd10      	pop	{r4, pc}

08003598 <memmove>:
 8003598:	4288      	cmp	r0, r1
 800359a:	b510      	push	{r4, lr}
 800359c:	eb01 0302 	add.w	r3, r1, r2
 80035a0:	d807      	bhi.n	80035b2 <memmove+0x1a>
 80035a2:	1e42      	subs	r2, r0, #1
 80035a4:	4299      	cmp	r1, r3
 80035a6:	d00a      	beq.n	80035be <memmove+0x26>
 80035a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035ac:	f802 4f01 	strb.w	r4, [r2, #1]!
 80035b0:	e7f8      	b.n	80035a4 <memmove+0xc>
 80035b2:	4283      	cmp	r3, r0
 80035b4:	d9f5      	bls.n	80035a2 <memmove+0xa>
 80035b6:	1881      	adds	r1, r0, r2
 80035b8:	1ad2      	subs	r2, r2, r3
 80035ba:	42d3      	cmn	r3, r2
 80035bc:	d100      	bne.n	80035c0 <memmove+0x28>
 80035be:	bd10      	pop	{r4, pc}
 80035c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80035c4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80035c8:	e7f7      	b.n	80035ba <memmove+0x22>
	...

080035cc <_free_r>:
 80035cc:	b538      	push	{r3, r4, r5, lr}
 80035ce:	4605      	mov	r5, r0
 80035d0:	2900      	cmp	r1, #0
 80035d2:	d043      	beq.n	800365c <_free_r+0x90>
 80035d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035d8:	1f0c      	subs	r4, r1, #4
 80035da:	2b00      	cmp	r3, #0
 80035dc:	bfb8      	it	lt
 80035de:	18e4      	addlt	r4, r4, r3
 80035e0:	f000 f8d0 	bl	8003784 <__malloc_lock>
 80035e4:	4a1e      	ldr	r2, [pc, #120]	; (8003660 <_free_r+0x94>)
 80035e6:	6813      	ldr	r3, [r2, #0]
 80035e8:	4610      	mov	r0, r2
 80035ea:	b933      	cbnz	r3, 80035fa <_free_r+0x2e>
 80035ec:	6063      	str	r3, [r4, #4]
 80035ee:	6014      	str	r4, [r2, #0]
 80035f0:	4628      	mov	r0, r5
 80035f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80035f6:	f000 b8c6 	b.w	8003786 <__malloc_unlock>
 80035fa:	42a3      	cmp	r3, r4
 80035fc:	d90b      	bls.n	8003616 <_free_r+0x4a>
 80035fe:	6821      	ldr	r1, [r4, #0]
 8003600:	1862      	adds	r2, r4, r1
 8003602:	4293      	cmp	r3, r2
 8003604:	bf01      	itttt	eq
 8003606:	681a      	ldreq	r2, [r3, #0]
 8003608:	685b      	ldreq	r3, [r3, #4]
 800360a:	1852      	addeq	r2, r2, r1
 800360c:	6022      	streq	r2, [r4, #0]
 800360e:	6063      	str	r3, [r4, #4]
 8003610:	6004      	str	r4, [r0, #0]
 8003612:	e7ed      	b.n	80035f0 <_free_r+0x24>
 8003614:	4613      	mov	r3, r2
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	b10a      	cbz	r2, 800361e <_free_r+0x52>
 800361a:	42a2      	cmp	r2, r4
 800361c:	d9fa      	bls.n	8003614 <_free_r+0x48>
 800361e:	6819      	ldr	r1, [r3, #0]
 8003620:	1858      	adds	r0, r3, r1
 8003622:	42a0      	cmp	r0, r4
 8003624:	d10b      	bne.n	800363e <_free_r+0x72>
 8003626:	6820      	ldr	r0, [r4, #0]
 8003628:	4401      	add	r1, r0
 800362a:	1858      	adds	r0, r3, r1
 800362c:	4282      	cmp	r2, r0
 800362e:	6019      	str	r1, [r3, #0]
 8003630:	d1de      	bne.n	80035f0 <_free_r+0x24>
 8003632:	6810      	ldr	r0, [r2, #0]
 8003634:	6852      	ldr	r2, [r2, #4]
 8003636:	4401      	add	r1, r0
 8003638:	6019      	str	r1, [r3, #0]
 800363a:	605a      	str	r2, [r3, #4]
 800363c:	e7d8      	b.n	80035f0 <_free_r+0x24>
 800363e:	d902      	bls.n	8003646 <_free_r+0x7a>
 8003640:	230c      	movs	r3, #12
 8003642:	602b      	str	r3, [r5, #0]
 8003644:	e7d4      	b.n	80035f0 <_free_r+0x24>
 8003646:	6820      	ldr	r0, [r4, #0]
 8003648:	1821      	adds	r1, r4, r0
 800364a:	428a      	cmp	r2, r1
 800364c:	bf01      	itttt	eq
 800364e:	6811      	ldreq	r1, [r2, #0]
 8003650:	6852      	ldreq	r2, [r2, #4]
 8003652:	1809      	addeq	r1, r1, r0
 8003654:	6021      	streq	r1, [r4, #0]
 8003656:	6062      	str	r2, [r4, #4]
 8003658:	605c      	str	r4, [r3, #4]
 800365a:	e7c9      	b.n	80035f0 <_free_r+0x24>
 800365c:	bd38      	pop	{r3, r4, r5, pc}
 800365e:	bf00      	nop
 8003660:	20000090 	.word	0x20000090

08003664 <_malloc_r>:
 8003664:	b570      	push	{r4, r5, r6, lr}
 8003666:	1ccd      	adds	r5, r1, #3
 8003668:	f025 0503 	bic.w	r5, r5, #3
 800366c:	3508      	adds	r5, #8
 800366e:	2d0c      	cmp	r5, #12
 8003670:	bf38      	it	cc
 8003672:	250c      	movcc	r5, #12
 8003674:	2d00      	cmp	r5, #0
 8003676:	4606      	mov	r6, r0
 8003678:	db01      	blt.n	800367e <_malloc_r+0x1a>
 800367a:	42a9      	cmp	r1, r5
 800367c:	d903      	bls.n	8003686 <_malloc_r+0x22>
 800367e:	230c      	movs	r3, #12
 8003680:	6033      	str	r3, [r6, #0]
 8003682:	2000      	movs	r0, #0
 8003684:	bd70      	pop	{r4, r5, r6, pc}
 8003686:	f000 f87d 	bl	8003784 <__malloc_lock>
 800368a:	4a21      	ldr	r2, [pc, #132]	; (8003710 <_malloc_r+0xac>)
 800368c:	6814      	ldr	r4, [r2, #0]
 800368e:	4621      	mov	r1, r4
 8003690:	b991      	cbnz	r1, 80036b8 <_malloc_r+0x54>
 8003692:	4c20      	ldr	r4, [pc, #128]	; (8003714 <_malloc_r+0xb0>)
 8003694:	6823      	ldr	r3, [r4, #0]
 8003696:	b91b      	cbnz	r3, 80036a0 <_malloc_r+0x3c>
 8003698:	4630      	mov	r0, r6
 800369a:	f000 f863 	bl	8003764 <_sbrk_r>
 800369e:	6020      	str	r0, [r4, #0]
 80036a0:	4629      	mov	r1, r5
 80036a2:	4630      	mov	r0, r6
 80036a4:	f000 f85e 	bl	8003764 <_sbrk_r>
 80036a8:	1c43      	adds	r3, r0, #1
 80036aa:	d124      	bne.n	80036f6 <_malloc_r+0x92>
 80036ac:	230c      	movs	r3, #12
 80036ae:	4630      	mov	r0, r6
 80036b0:	6033      	str	r3, [r6, #0]
 80036b2:	f000 f868 	bl	8003786 <__malloc_unlock>
 80036b6:	e7e4      	b.n	8003682 <_malloc_r+0x1e>
 80036b8:	680b      	ldr	r3, [r1, #0]
 80036ba:	1b5b      	subs	r3, r3, r5
 80036bc:	d418      	bmi.n	80036f0 <_malloc_r+0x8c>
 80036be:	2b0b      	cmp	r3, #11
 80036c0:	d90f      	bls.n	80036e2 <_malloc_r+0x7e>
 80036c2:	600b      	str	r3, [r1, #0]
 80036c4:	18cc      	adds	r4, r1, r3
 80036c6:	50cd      	str	r5, [r1, r3]
 80036c8:	4630      	mov	r0, r6
 80036ca:	f000 f85c 	bl	8003786 <__malloc_unlock>
 80036ce:	f104 000b 	add.w	r0, r4, #11
 80036d2:	1d23      	adds	r3, r4, #4
 80036d4:	f020 0007 	bic.w	r0, r0, #7
 80036d8:	1ac3      	subs	r3, r0, r3
 80036da:	d0d3      	beq.n	8003684 <_malloc_r+0x20>
 80036dc:	425a      	negs	r2, r3
 80036de:	50e2      	str	r2, [r4, r3]
 80036e0:	e7d0      	b.n	8003684 <_malloc_r+0x20>
 80036e2:	684b      	ldr	r3, [r1, #4]
 80036e4:	428c      	cmp	r4, r1
 80036e6:	bf16      	itet	ne
 80036e8:	6063      	strne	r3, [r4, #4]
 80036ea:	6013      	streq	r3, [r2, #0]
 80036ec:	460c      	movne	r4, r1
 80036ee:	e7eb      	b.n	80036c8 <_malloc_r+0x64>
 80036f0:	460c      	mov	r4, r1
 80036f2:	6849      	ldr	r1, [r1, #4]
 80036f4:	e7cc      	b.n	8003690 <_malloc_r+0x2c>
 80036f6:	1cc4      	adds	r4, r0, #3
 80036f8:	f024 0403 	bic.w	r4, r4, #3
 80036fc:	42a0      	cmp	r0, r4
 80036fe:	d005      	beq.n	800370c <_malloc_r+0xa8>
 8003700:	1a21      	subs	r1, r4, r0
 8003702:	4630      	mov	r0, r6
 8003704:	f000 f82e 	bl	8003764 <_sbrk_r>
 8003708:	3001      	adds	r0, #1
 800370a:	d0cf      	beq.n	80036ac <_malloc_r+0x48>
 800370c:	6025      	str	r5, [r4, #0]
 800370e:	e7db      	b.n	80036c8 <_malloc_r+0x64>
 8003710:	20000090 	.word	0x20000090
 8003714:	20000094 	.word	0x20000094

08003718 <_realloc_r>:
 8003718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800371a:	4607      	mov	r7, r0
 800371c:	4614      	mov	r4, r2
 800371e:	460e      	mov	r6, r1
 8003720:	b921      	cbnz	r1, 800372c <_realloc_r+0x14>
 8003722:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003726:	4611      	mov	r1, r2
 8003728:	f7ff bf9c 	b.w	8003664 <_malloc_r>
 800372c:	b922      	cbnz	r2, 8003738 <_realloc_r+0x20>
 800372e:	f7ff ff4d 	bl	80035cc <_free_r>
 8003732:	4625      	mov	r5, r4
 8003734:	4628      	mov	r0, r5
 8003736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003738:	f000 f826 	bl	8003788 <_malloc_usable_size_r>
 800373c:	42a0      	cmp	r0, r4
 800373e:	d20f      	bcs.n	8003760 <_realloc_r+0x48>
 8003740:	4621      	mov	r1, r4
 8003742:	4638      	mov	r0, r7
 8003744:	f7ff ff8e 	bl	8003664 <_malloc_r>
 8003748:	4605      	mov	r5, r0
 800374a:	2800      	cmp	r0, #0
 800374c:	d0f2      	beq.n	8003734 <_realloc_r+0x1c>
 800374e:	4631      	mov	r1, r6
 8003750:	4622      	mov	r2, r4
 8003752:	f7ff fbeb 	bl	8002f2c <memcpy>
 8003756:	4631      	mov	r1, r6
 8003758:	4638      	mov	r0, r7
 800375a:	f7ff ff37 	bl	80035cc <_free_r>
 800375e:	e7e9      	b.n	8003734 <_realloc_r+0x1c>
 8003760:	4635      	mov	r5, r6
 8003762:	e7e7      	b.n	8003734 <_realloc_r+0x1c>

08003764 <_sbrk_r>:
 8003764:	b538      	push	{r3, r4, r5, lr}
 8003766:	2300      	movs	r3, #0
 8003768:	4c05      	ldr	r4, [pc, #20]	; (8003780 <_sbrk_r+0x1c>)
 800376a:	4605      	mov	r5, r0
 800376c:	4608      	mov	r0, r1
 800376e:	6023      	str	r3, [r4, #0]
 8003770:	f7fd fa70 	bl	8000c54 <_sbrk>
 8003774:	1c43      	adds	r3, r0, #1
 8003776:	d102      	bne.n	800377e <_sbrk_r+0x1a>
 8003778:	6823      	ldr	r3, [r4, #0]
 800377a:	b103      	cbz	r3, 800377e <_sbrk_r+0x1a>
 800377c:	602b      	str	r3, [r5, #0]
 800377e:	bd38      	pop	{r3, r4, r5, pc}
 8003780:	200001a4 	.word	0x200001a4

08003784 <__malloc_lock>:
 8003784:	4770      	bx	lr

08003786 <__malloc_unlock>:
 8003786:	4770      	bx	lr

08003788 <_malloc_usable_size_r>:
 8003788:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800378c:	1f18      	subs	r0, r3, #4
 800378e:	2b00      	cmp	r3, #0
 8003790:	bfbc      	itt	lt
 8003792:	580b      	ldrlt	r3, [r1, r0]
 8003794:	18c0      	addlt	r0, r0, r3
 8003796:	4770      	bx	lr

08003798 <_init>:
 8003798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800379a:	bf00      	nop
 800379c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800379e:	bc08      	pop	{r3}
 80037a0:	469e      	mov	lr, r3
 80037a2:	4770      	bx	lr

080037a4 <_fini>:
 80037a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a6:	bf00      	nop
 80037a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037aa:	bc08      	pop	{r3}
 80037ac:	469e      	mov	lr, r3
 80037ae:	4770      	bx	lr
