
LORA_sample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004310  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080044e0  080044e0  000144e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045bc  080045bc  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080045bc  080045bc  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045bc  080045bc  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045bc  080045bc  000145bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045c0  080045c0  000145c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080045c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  20000080  08004644  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08004644  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e576  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022f6  00000000  00000000  0002e61f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fb8  00000000  00000000  00030918  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e90  00000000  00000000  000318d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000f4ec  00000000  00000000  00032760  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b93b  00000000  00000000  00041c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00058dab  00000000  00000000  0004d587  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a6332  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044ac  00000000  00000000  000a63b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080044c8 	.word	0x080044c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	080044c8 	.word	0x080044c8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <ReadButtons>:
 */


#include <Button.h>

uint8_t ReadButtons() {
 8000220:	b598      	push	{r3, r4, r7, lr}
 8000222:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(but_2_GPIO_Port, but_2_Pin) << 1 | HAL_GPIO_ReadPin(but_1_GPIO_Port, but_1_Pin);
 8000224:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000228:	4808      	ldr	r0, [pc, #32]	; (800024c <ReadButtons+0x2c>)
 800022a:	f001 fd7d 	bl	8001d28 <HAL_GPIO_ReadPin>
 800022e:	4603      	mov	r3, r0
 8000230:	005b      	lsls	r3, r3, #1
 8000232:	b25c      	sxtb	r4, r3
 8000234:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000238:	4804      	ldr	r0, [pc, #16]	; (800024c <ReadButtons+0x2c>)
 800023a:	f001 fd75 	bl	8001d28 <HAL_GPIO_ReadPin>
 800023e:	4603      	mov	r3, r0
 8000240:	b25b      	sxtb	r3, r3
 8000242:	4323      	orrs	r3, r4
 8000244:	b25b      	sxtb	r3, r3
 8000246:	b2db      	uxtb	r3, r3
}
 8000248:	4618      	mov	r0, r3
 800024a:	bd98      	pop	{r3, r4, r7, pc}
 800024c:	40011000 	.word	0x40011000

08000250 <SX1278_hw_init>:

//////////////////////////////////
// logic
//////////////////////////////////

__weak void SX1278_hw_init(SX1278_hw_t * hw) {
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000258:	2101      	movs	r1, #1
 800025a:	6878      	ldr	r0, [r7, #4]
 800025c:	f000 f80d 	bl	800027a <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	6858      	ldr	r0, [r3, #4]
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	b29b      	uxth	r3, r3
 800026a:	2201      	movs	r2, #1
 800026c:	4619      	mov	r1, r3
 800026e:	f001 fd72 	bl	8001d56 <HAL_GPIO_WritePin>
}
 8000272:	bf00      	nop
 8000274:	3708      	adds	r7, #8
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}

0800027a <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t * hw, int value) {
 800027a:	b580      	push	{r7, lr}
 800027c:	b082      	sub	sp, #8
 800027e:	af00      	add	r7, sp, #0
 8000280:	6078      	str	r0, [r7, #4]
 8000282:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	6958      	ldr	r0, [r3, #20]
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	691b      	ldr	r3, [r3, #16]
 800028c:	b299      	uxth	r1, r3
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	2b01      	cmp	r3, #1
 8000292:	bf0c      	ite	eq
 8000294:	2301      	moveq	r3, #1
 8000296:	2300      	movne	r3, #0
 8000298:	b2db      	uxtb	r3, r3
 800029a:	461a      	mov	r2, r3
 800029c:	f001 fd5b 	bl	8001d56 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 80002a0:	bf00      	nop
 80002a2:	3708      	adds	r7, #8
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}

080002a8 <SX1278_hw_SPICommand>:
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);

	SX1278_hw_DelayMs(100);
}

__weak void SX1278_hw_SPICommand(SX1278_hw_t * hw, uint8_t cmd) {
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	460b      	mov	r3, r1
 80002b2:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 80002b4:	2100      	movs	r1, #0
 80002b6:	6878      	ldr	r0, [r7, #4]
 80002b8:	f7ff ffdf 	bl	800027a <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	6998      	ldr	r0, [r3, #24]
 80002c0:	1cf9      	adds	r1, r7, #3
 80002c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002c6:	2201      	movs	r2, #1
 80002c8:	f002 fa49 	bl	800275e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 80002cc:	bf00      	nop
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	699b      	ldr	r3, [r3, #24]
 80002d2:	4618      	mov	r0, r3
 80002d4:	f002 fd19 	bl	8002d0a <HAL_SPI_GetState>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b01      	cmp	r3, #1
 80002dc:	d1f7      	bne.n	80002ce <SX1278_hw_SPICommand+0x26>
		;
}
 80002de:	bf00      	nop
 80002e0:	3708      	adds	r7, #8
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}

080002e6 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t * hw) {
 80002e6:	b580      	push	{r7, lr}
 80002e8:	b086      	sub	sp, #24
 80002ea:	af02      	add	r7, sp, #8
 80002ec:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 80002ee:	2300      	movs	r3, #0
 80002f0:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 80002f2:	2300      	movs	r3, #0
 80002f4:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 80002f6:	2100      	movs	r1, #0
 80002f8:	6878      	ldr	r0, [r7, #4]
 80002fa:	f7ff ffbe 	bl	800027a <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	6998      	ldr	r0, [r3, #24]
 8000302:	f107 020e 	add.w	r2, r7, #14
 8000306:	f107 010f 	add.w	r1, r7, #15
 800030a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800030e:	9300      	str	r3, [sp, #0]
 8000310:	2301      	movs	r3, #1
 8000312:	f002 fb58 	bl	80029c6 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000316:	bf00      	nop
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	4618      	mov	r0, r3
 800031e:	f002 fcf4 	bl	8002d0a <HAL_SPI_GetState>
 8000322:	4603      	mov	r3, r0
 8000324:	2b01      	cmp	r3, #1
 8000326:	d1f7      	bne.n	8000318 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8000328:	7bbb      	ldrb	r3, [r7, #14]
}
 800032a:	4618      	mov	r0, r3
 800032c:	3710      	adds	r7, #16
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}

08000332 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8000332:	b580      	push	{r7, lr}
 8000334:	b082      	sub	sp, #8
 8000336:	af00      	add	r7, sp, #0
 8000338:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 800033a:	6878      	ldr	r0, [r7, #4]
 800033c:	f001 f88a 	bl	8001454 <HAL_Delay>
}
 8000340:	bf00      	nop
 8000342:	3708      	adds	r7, #8
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}

08000348 <SX1278_SPIRead>:

//////////////////////////////////
// logic
//////////////////////////////////

uint8_t SX1278_SPIRead(SX1278_t * module, uint8_t addr) {
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
 8000350:	460b      	mov	r3, r1
 8000352:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	78fa      	ldrb	r2, [r7, #3]
 800035a:	4611      	mov	r1, r2
 800035c:	4618      	mov	r0, r3
 800035e:	f7ff ffa3 	bl	80002a8 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4618      	mov	r0, r3
 8000368:	f7ff ffbd 	bl	80002e6 <SX1278_hw_SPIReadByte>
 800036c:	4603      	mov	r3, r0
 800036e:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	2101      	movs	r1, #1
 8000376:	4618      	mov	r0, r3
 8000378:	f7ff ff7f 	bl	800027a <SX1278_hw_SetNSS>
	return tmp;
 800037c:	7bfb      	ldrb	r3, [r7, #15]
}
 800037e:	4618      	mov	r0, r3
 8000380:	3710      	adds	r7, #16
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}

08000386 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t * module, uint8_t addr, uint8_t cmd) {
 8000386:	b580      	push	{r7, lr}
 8000388:	b082      	sub	sp, #8
 800038a:	af00      	add	r7, sp, #0
 800038c:	6078      	str	r0, [r7, #4]
 800038e:	460b      	mov	r3, r1
 8000390:	70fb      	strb	r3, [r7, #3]
 8000392:	4613      	mov	r3, r2
 8000394:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	2100      	movs	r1, #0
 800039c:	4618      	mov	r0, r3
 800039e:	f7ff ff6c 	bl	800027a <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	681a      	ldr	r2, [r3, #0]
 80003a6:	78fb      	ldrb	r3, [r7, #3]
 80003a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80003ac:	b2db      	uxtb	r3, r3
 80003ae:	4619      	mov	r1, r3
 80003b0:	4610      	mov	r0, r2
 80003b2:	f7ff ff79 	bl	80002a8 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	78ba      	ldrb	r2, [r7, #2]
 80003bc:	4611      	mov	r1, r2
 80003be:	4618      	mov	r0, r3
 80003c0:	f7ff ff72 	bl	80002a8 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2101      	movs	r1, #1
 80003ca:	4618      	mov	r0, r3
 80003cc:	f7ff ff55 	bl	800027a <SX1278_hw_SetNSS>
}
 80003d0:	bf00      	nop
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}

080003d8 <SX1278_SPIBurstWrite>:
		SX1278_hw_SetNSS(module->hw, 1);
	}
}

void SX1278_SPIBurstWrite(SX1278_t * module, uint8_t addr, uint8_t* txBuf,
		uint8_t length) {
 80003d8:	b580      	push	{r7, lr}
 80003da:	b086      	sub	sp, #24
 80003dc:	af00      	add	r7, sp, #0
 80003de:	60f8      	str	r0, [r7, #12]
 80003e0:	607a      	str	r2, [r7, #4]
 80003e2:	461a      	mov	r2, r3
 80003e4:	460b      	mov	r3, r1
 80003e6:	72fb      	strb	r3, [r7, #11]
 80003e8:	4613      	mov	r3, r2
 80003ea:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 80003ec:	7abb      	ldrb	r3, [r7, #10]
 80003ee:	2b01      	cmp	r3, #1
 80003f0:	d929      	bls.n	8000446 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	2100      	movs	r1, #0
 80003f8:	4618      	mov	r0, r3
 80003fa:	f7ff ff3e 	bl	800027a <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	681a      	ldr	r2, [r3, #0]
 8000402:	7afb      	ldrb	r3, [r7, #11]
 8000404:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000408:	b2db      	uxtb	r3, r3
 800040a:	4619      	mov	r1, r3
 800040c:	4610      	mov	r0, r2
 800040e:	f7ff ff4b 	bl	80002a8 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000412:	2300      	movs	r3, #0
 8000414:	75fb      	strb	r3, [r7, #23]
 8000416:	e00b      	b.n	8000430 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	6818      	ldr	r0, [r3, #0]
 800041c:	7dfb      	ldrb	r3, [r7, #23]
 800041e:	687a      	ldr	r2, [r7, #4]
 8000420:	4413      	add	r3, r2
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	4619      	mov	r1, r3
 8000426:	f7ff ff3f 	bl	80002a8 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800042a:	7dfb      	ldrb	r3, [r7, #23]
 800042c:	3301      	adds	r3, #1
 800042e:	75fb      	strb	r3, [r7, #23]
 8000430:	7dfa      	ldrb	r2, [r7, #23]
 8000432:	7abb      	ldrb	r3, [r7, #10]
 8000434:	429a      	cmp	r2, r3
 8000436:	d3ef      	bcc.n	8000418 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	2101      	movs	r1, #1
 800043e:	4618      	mov	r0, r3
 8000440:	f7ff ff1b 	bl	800027a <SX1278_hw_SetNSS>
 8000444:	e000      	b.n	8000448 <SX1278_SPIBurstWrite+0x70>
		return;
 8000446:	bf00      	nop
	}
}
 8000448:	3718      	adds	r7, #24
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}

0800044e <SX1278_defaultConfig>:

void SX1278_defaultConfig(SX1278_t * module) {
 800044e:	b580      	push	{r7, lr}
 8000450:	b084      	sub	sp, #16
 8000452:	af02      	add	r7, sp, #8
 8000454:	6078      	str	r0, [r7, #4]
	SX1278_config(module, module->frequency, module->power, module->LoRa_Rate,
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	7919      	ldrb	r1, [r3, #4]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	795a      	ldrb	r2, [r3, #5]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	7998      	ldrb	r0, [r3, #6]
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	79db      	ldrb	r3, [r3, #7]
 8000466:	9300      	str	r3, [sp, #0]
 8000468:	4603      	mov	r3, r0
 800046a:	6878      	ldr	r0, [r7, #4]
 800046c:	f000 f804 	bl	8000478 <SX1278_config>
			module->LoRa_BW);
}
 8000470:	bf00      	nop
 8000472:	3708      	adds	r7, #8
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}

08000478 <SX1278_config>:

void SX1278_config(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW) {
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
 8000480:	4608      	mov	r0, r1
 8000482:	4611      	mov	r1, r2
 8000484:	461a      	mov	r2, r3
 8000486:	4603      	mov	r3, r0
 8000488:	70fb      	strb	r3, [r7, #3]
 800048a:	460b      	mov	r3, r1
 800048c:	70bb      	strb	r3, [r7, #2]
 800048e:	4613      	mov	r3, r2
 8000490:	707b      	strb	r3, [r7, #1]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8000492:	6878      	ldr	r0, [r7, #4]
 8000494:	f000 f8aa 	bl	80005ec <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8000498:	200f      	movs	r0, #15
 800049a:	f7ff ff4a 	bl	8000332 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 800049e:	6878      	ldr	r0, [r7, #4]
 80004a0:	f000 f8b4 	bl	800060c <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
			(uint8_t*) SX1278_Frequency[frequency], 3); //setting  frequency parameter
 80004a4:	78fa      	ldrb	r2, [r7, #3]
 80004a6:	4613      	mov	r3, r2
 80004a8:	005b      	lsls	r3, r3, #1
 80004aa:	4413      	add	r3, r2
 80004ac:	4a43      	ldr	r2, [pc, #268]	; (80005bc <SX1278_config+0x144>)
 80004ae:	441a      	add	r2, r3
	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
 80004b0:	2303      	movs	r3, #3
 80004b2:	2106      	movs	r1, #6
 80004b4:	6878      	ldr	r0, [r7, #4]
 80004b6:	f7ff ff8f 	bl	80003d8 <SX1278_SPIBurstWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[power]); //Setting output power parameter
 80004ba:	78bb      	ldrb	r3, [r7, #2]
 80004bc:	4a40      	ldr	r2, [pc, #256]	; (80005c0 <SX1278_config+0x148>)
 80004be:	5cd3      	ldrb	r3, [r2, r3]
 80004c0:	461a      	mov	r2, r3
 80004c2:	2109      	movs	r1, #9
 80004c4:	6878      	ldr	r0, [r7, #4]
 80004c6:	f7ff ff5e 	bl	8000386 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 80004ca:	220b      	movs	r2, #11
 80004cc:	210b      	movs	r1, #11
 80004ce:	6878      	ldr	r0, [r7, #4]
 80004d0:	f7ff ff59 	bl	8000386 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 80004d4:	2223      	movs	r2, #35	; 0x23
 80004d6:	210c      	movs	r1, #12
 80004d8:	6878      	ldr	r0, [r7, #4]
 80004da:	f7ff ff54 	bl	8000386 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[LoRa_Rate] == 6) {	//SFactor=6
 80004de:	787b      	ldrb	r3, [r7, #1]
 80004e0:	4a38      	ldr	r2, [pc, #224]	; (80005c4 <SX1278_config+0x14c>)
 80004e2:	5cd3      	ldrb	r3, [r2, r3]
 80004e4:	2b06      	cmp	r3, #6
 80004e6:	d131      	bne.n	800054c <SX1278_config+0xd4>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80004e8:	7e3b      	ldrb	r3, [r7, #24]
 80004ea:	4a37      	ldr	r2, [pc, #220]	; (80005c8 <SX1278_config+0x150>)
 80004ec:	5cd3      	ldrb	r3, [r2, r3]
 80004ee:	011b      	lsls	r3, r3, #4
 80004f0:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80004f2:	3303      	adds	r3, #3
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	461a      	mov	r2, r3
 80004f8:	211d      	movs	r1, #29
 80004fa:	6878      	ldr	r0, [r7, #4]
 80004fc:	f7ff ff43 	bl	8000386 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 8000500:	787b      	ldrb	r3, [r7, #1]
 8000502:	4a30      	ldr	r2, [pc, #192]	; (80005c4 <SX1278_config+0x14c>)
 8000504:	5cd3      	ldrb	r3, [r2, r3]
 8000506:	011b      	lsls	r3, r3, #4
 8000508:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800050a:	3307      	adds	r3, #7
 800050c:	b2db      	uxtb	r3, r3
 800050e:	461a      	mov	r2, r3
 8000510:	211e      	movs	r1, #30
 8000512:	6878      	ldr	r0, [r7, #4]
 8000514:	f7ff ff37 	bl	8000386 <SX1278_SPIWrite>
						+ 0x03));

		tmp = SX1278_SPIRead(module, 0x31);
 8000518:	2131      	movs	r1, #49	; 0x31
 800051a:	6878      	ldr	r0, [r7, #4]
 800051c:	f7ff ff14 	bl	8000348 <SX1278_SPIRead>
 8000520:	4603      	mov	r3, r0
 8000522:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 8000524:	7bfb      	ldrb	r3, [r7, #15]
 8000526:	f023 0307 	bic.w	r3, r3, #7
 800052a:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 800052c:	7bfb      	ldrb	r3, [r7, #15]
 800052e:	f043 0305 	orr.w	r3, r3, #5
 8000532:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 8000534:	7bfb      	ldrb	r3, [r7, #15]
 8000536:	461a      	mov	r2, r3
 8000538:	2131      	movs	r1, #49	; 0x31
 800053a:	6878      	ldr	r0, [r7, #4]
 800053c:	f7ff ff23 	bl	8000386 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8000540:	220c      	movs	r2, #12
 8000542:	2137      	movs	r1, #55	; 0x37
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f7ff ff1e 	bl	8000386 <SX1278_SPIWrite>
 800054a:	e017      	b.n	800057c <SX1278_config+0x104>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 800054c:	7e3b      	ldrb	r3, [r7, #24]
 800054e:	4a1e      	ldr	r2, [pc, #120]	; (80005c8 <SX1278_config+0x150>)
 8000550:	5cd3      	ldrb	r3, [r2, r3]
 8000552:	011b      	lsls	r3, r3, #4
 8000554:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000556:	3302      	adds	r3, #2
 8000558:	b2db      	uxtb	r3, r3
 800055a:	461a      	mov	r2, r3
 800055c:	211d      	movs	r1, #29
 800055e:	6878      	ldr	r0, [r7, #4]
 8000560:	f7ff ff11 	bl	8000386 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 8000564:	787b      	ldrb	r3, [r7, #1]
 8000566:	4a17      	ldr	r2, [pc, #92]	; (80005c4 <SX1278_config+0x14c>)
 8000568:	5cd3      	ldrb	r3, [r2, r3]
 800056a:	011b      	lsls	r3, r3, #4
 800056c:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800056e:	3307      	adds	r3, #7
 8000570:	b2db      	uxtb	r3, r3
 8000572:	461a      	mov	r2, r3
 8000574:	211e      	movs	r1, #30
 8000576:	6878      	ldr	r0, [r7, #4]
 8000578:	f7ff ff05 	bl	8000386 <SX1278_SPIWrite>
						+ 0x03)); //SFactor &  LNA gain set by the internal AGC loop
	}

	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0xFF); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 800057c:	22ff      	movs	r2, #255	; 0xff
 800057e:	211f      	movs	r1, #31
 8000580:	6878      	ldr	r0, [r7, #4]
 8000582:	f7ff ff00 	bl	8000386 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8000586:	2200      	movs	r2, #0
 8000588:	2120      	movs	r1, #32
 800058a:	6878      	ldr	r0, [r7, #4]
 800058c:	f7ff fefb 	bl	8000386 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 12); //RegPreambleLsb 8+4=12byte Preamble
 8000590:	220c      	movs	r2, #12
 8000592:	2121      	movs	r1, #33	; 0x21
 8000594:	6878      	ldr	r0, [r7, #4]
 8000596:	f7ff fef6 	bl	8000386 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 800059a:	2201      	movs	r2, #1
 800059c:	2141      	movs	r1, #65	; 0x41
 800059e:	6878      	ldr	r0, [r7, #4]
 80005a0:	f7ff fef1 	bl	8000386 <SX1278_SPIWrite>
	module->readBytes = 0;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2200      	movs	r2, #0
 80005a8:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	SX1278_standby(module); //Entry standby mode
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	f000 f80d 	bl	80005cc <SX1278_standby>
}
 80005b2:	bf00      	nop
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	08004550 	.word	0x08004550
 80005c0:	08004554 	.word	0x08004554
 80005c4:	08004558 	.word	0x08004558
 80005c8:	08004560 	.word	0x08004560

080005cc <SX1278_standby>:

void SX1278_standby(SX1278_t * module) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80005d4:	2209      	movs	r2, #9
 80005d6:	2101      	movs	r1, #1
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f7ff fed4 	bl	8000386 <SX1278_SPIWrite>
	module->status = STANDBY;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2201      	movs	r2, #1
 80005e2:	725a      	strb	r2, [r3, #9]
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <SX1278_sleep>:

void SX1278_sleep(SX1278_t * module) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 80005f4:	2208      	movs	r2, #8
 80005f6:	2101      	movs	r1, #1
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f7ff fec4 	bl	8000386 <SX1278_SPIWrite>
	module->status = SLEEP;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2200      	movs	r2, #0
 8000602:	725a      	strb	r2, [r3, #9]
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t * module) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8000614:	2288      	movs	r2, #136	; 0x88
 8000616:	2101      	movs	r1, #1
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f7ff feb4 	bl	8000386 <SX1278_SPIWrite>
}
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}

08000626 <SX1278_begin>:
		SX1278_hw_DelayMs(1);
	}
}

void SX1278_begin(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW, uint8_t packetLength) {
 8000626:	b580      	push	{r7, lr}
 8000628:	b082      	sub	sp, #8
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
 800062e:	4608      	mov	r0, r1
 8000630:	4611      	mov	r1, r2
 8000632:	461a      	mov	r2, r3
 8000634:	4603      	mov	r3, r0
 8000636:	70fb      	strb	r3, [r7, #3]
 8000638:	460b      	mov	r3, r1
 800063a:	70bb      	strb	r3, [r7, #2]
 800063c:	4613      	mov	r3, r2
 800063e:	707b      	strb	r3, [r7, #1]
	SX1278_hw_init(module->hw);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff fe03 	bl	8000250 <SX1278_hw_init>
	module->frequency = frequency;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	78fa      	ldrb	r2, [r7, #3]
 800064e:	711a      	strb	r2, [r3, #4]
	module->power = power;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	78ba      	ldrb	r2, [r7, #2]
 8000654:	715a      	strb	r2, [r3, #5]
	module->LoRa_Rate = LoRa_Rate;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	787a      	ldrb	r2, [r7, #1]
 800065a:	719a      	strb	r2, [r3, #6]
	module->LoRa_BW = LoRa_BW;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	7c3a      	ldrb	r2, [r7, #16]
 8000660:	71da      	strb	r2, [r3, #7]
	module->packetLength = packetLength;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	7d3a      	ldrb	r2, [r7, #20]
 8000666:	721a      	strb	r2, [r3, #8]
	SX1278_defaultConfig(module);
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f7ff fef0 	bl	800044e <SX1278_defaultConfig>
}
 800066e:	bf00      	nop
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin)
{
 8000676:	b4b0      	push	{r4, r5, r7}
 8000678:	b08b      	sub	sp, #44	; 0x2c
 800067a:	af00      	add	r7, sp, #0
 800067c:	60f8      	str	r0, [r7, #12]
 800067e:	60b9      	str	r1, [r7, #8]
 8000680:	607a      	str	r2, [r7, #4]
 8000682:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.en_pin = en_pin;
 8000684:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000688:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 800068a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800068c:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 800068e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000690:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	613b      	str	r3, [r7, #16]

	return lcd;
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	461d      	mov	r5, r3
 80006a2:	f107 0410 	add.w	r4, r7, #16
 80006a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80006ae:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80006b2:	68f8      	ldr	r0, [r7, #12]
 80006b4:	372c      	adds	r7, #44	; 0x2c
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bcb0      	pop	{r4, r5, r7}
 80006ba:	4770      	bx	lr

080006bc <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, 0x33);
 80006c4:	2133      	movs	r1, #51	; 0x33
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f000 f890 	bl	80007ec <lcd_write_command>
	lcd_write_command(lcd, 0x32);
 80006cc:	2132      	movs	r1, #50	; 0x32
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f000 f88c 	bl	80007ec <lcd_write_command>
	lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 80006d4:	2128      	movs	r1, #40	; 0x28
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f000 f888 	bl	80007ec <lcd_write_command>

	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 80006dc:	2101      	movs	r1, #1
 80006de:	6878      	ldr	r0, [r7, #4]
 80006e0:	f000 f884 	bl	80007ec <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 80006e4:	210c      	movs	r1, #12
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f000 f880 	bl	80007ec <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 80006ec:	2106      	movs	r1, #6
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f000 f87c 	bl	80007ec <lcd_write_command>
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	460b      	mov	r3, r1
 8000706:	70fb      	strb	r3, [r7, #3]
 8000708:	4613      	mov	r3, r2
 800070a:	70bb      	strb	r3, [r7, #2]
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 800070c:	78fb      	ldrb	r3, [r7, #3]
 800070e:	4a07      	ldr	r2, [pc, #28]	; (800072c <Lcd_cursor+0x30>)
 8000710:	5cd2      	ldrb	r2, [r2, r3]
 8000712:	78bb      	ldrb	r3, [r7, #2]
 8000714:	4413      	add	r3, r2
 8000716:	b2db      	uxtb	r3, r3
 8000718:	3b80      	subs	r3, #128	; 0x80
 800071a:	b2db      	uxtb	r3, r3
 800071c:	4619      	mov	r1, r3
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f000 f864 	bl	80007ec <lcd_write_command>
}
 8000724:	bf00      	nop
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	0800456c 	.word	0x0800456c

08000730 <Lcd_blink>:

/**
 * Blinking and noBlinking cursor or disable cursor
 */
void Lcd_blink(Lcd_HandleTypeDef * lcd){
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D | OPT_B);		// Lcd-on, cursor-on, blink
 8000738:	210d      	movs	r1, #13
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f000 f856 	bl	80007ec <lcd_write_command>
}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <Lcd_disable_cursor>:

void Lcd_no_blink(Lcd_HandleTypeDef * lcd){
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D | OPT_C);		// Lcd-on, cursor-on, no-blink
}

void Lcd_disable_cursor(Lcd_HandleTypeDef * lcd){
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000750:	210c      	movs	r1, #12
 8000752:	6878      	ldr	r0, [r7, #4]
 8000754:	f000 f84a 	bl	80007ec <lcd_write_command>
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <Lcd_printf>:

/**
 * Printf() for lcd
 */
void Lcd_printf(Lcd_HandleTypeDef * lcd, char * format, ...) {
 8000760:	b40e      	push	{r1, r2, r3}
 8000762:	b580      	push	{r7, lr}
 8000764:	b08d      	sub	sp, #52	; 0x34
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
	char buf[PRINTF_BUF];
	va_list ap;
	va_start(ap, format);
 800076a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800076e:	60fb      	str	r3, [r7, #12]
    vsnprintf(buf, sizeof(buf), format, ap);
 8000770:	f107 0010 	add.w	r0, r7, #16
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000778:	2120      	movs	r1, #32
 800077a:	f003 faaf 	bl	8003cdc <vsniprintf>
    Lcd_string(lcd, buf);
 800077e:	f107 0310 	add.w	r3, r7, #16
 8000782:	4619      	mov	r1, r3
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f000 f807 	bl	8000798 <Lcd_string>
    va_end(ap);
}
 800078a:	bf00      	nop
 800078c:	3734      	adds	r7, #52	; 0x34
 800078e:	46bd      	mov	sp, r7
 8000790:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000794:	b003      	add	sp, #12
 8000796:	4770      	bx	lr

08000798 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 80007a2:	2300      	movs	r3, #0
 80007a4:	73fb      	strb	r3, [r7, #15]
 80007a6:	e00a      	b.n	80007be <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	683a      	ldr	r2, [r7, #0]
 80007ac:	4413      	add	r3, r2
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	4619      	mov	r1, r3
 80007b2:	6878      	ldr	r0, [r7, #4]
 80007b4:	f000 f83d 	bl	8000832 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
 80007ba:	3301      	adds	r3, #1
 80007bc:	73fb      	strb	r3, [r7, #15]
 80007be:	7bfc      	ldrb	r4, [r7, #15]
 80007c0:	6838      	ldr	r0, [r7, #0]
 80007c2:	f7ff fd25 	bl	8000210 <strlen>
 80007c6:	4603      	mov	r3, r0
 80007c8:	429c      	cmp	r4, r3
 80007ca:	d3ed      	bcc.n	80007a8 <Lcd_string+0x10>
	}
}
 80007cc:	bf00      	nop
 80007ce:	3714      	adds	r7, #20
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd90      	pop	{r4, r7, pc}

080007d4 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 80007dc:	2101      	movs	r1, #1
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f000 f804 	bl	80007ec <lcd_write_command>
}
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	460b      	mov	r3, r1
 80007f6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6898      	ldr	r0, [r3, #8]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	899b      	ldrh	r3, [r3, #12]
 8000800:	2200      	movs	r2, #0
 8000802:	4619      	mov	r1, r3
 8000804:	f001 faa7 	bl	8001d56 <HAL_GPIO_WritePin>

	lcd_write(lcd, (command >> 4), LCD_NIB);
 8000808:	78fb      	ldrb	r3, [r7, #3]
 800080a:	091b      	lsrs	r3, r3, #4
 800080c:	b2db      	uxtb	r3, r3
 800080e:	2204      	movs	r2, #4
 8000810:	4619      	mov	r1, r3
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f000 f830 	bl	8000878 <lcd_write>
	lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000818:	78fb      	ldrb	r3, [r7, #3]
 800081a:	f003 030f 	and.w	r3, r3, #15
 800081e:	b2db      	uxtb	r3, r3
 8000820:	2204      	movs	r2, #4
 8000822:	4619      	mov	r1, r3
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f000 f827 	bl	8000878 <lcd_write>

}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b082      	sub	sp, #8
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
 800083a:	460b      	mov	r3, r1
 800083c:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	6898      	ldr	r0, [r3, #8]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	899b      	ldrh	r3, [r3, #12]
 8000846:	2201      	movs	r2, #1
 8000848:	4619      	mov	r1, r3
 800084a:	f001 fa84 	bl	8001d56 <HAL_GPIO_WritePin>

	lcd_write(lcd, data >> 4, LCD_NIB);
 800084e:	78fb      	ldrb	r3, [r7, #3]
 8000850:	091b      	lsrs	r3, r3, #4
 8000852:	b2db      	uxtb	r3, r3
 8000854:	2204      	movs	r2, #4
 8000856:	4619      	mov	r1, r3
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f000 f80d 	bl	8000878 <lcd_write>
	lcd_write(lcd, data & 0x0F, LCD_NIB);
 800085e:	78fb      	ldrb	r3, [r7, #3]
 8000860:	f003 030f 	and.w	r3, r3, #15
 8000864:	b2db      	uxtb	r3, r3
 8000866:	2204      	movs	r2, #4
 8000868:	4619      	mov	r1, r3
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f000 f804 	bl	8000878 <lcd_write>

}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	460b      	mov	r3, r1
 8000882:	70fb      	strb	r3, [r7, #3]
 8000884:	4613      	mov	r3, r2
 8000886:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000888:	2300      	movs	r3, #0
 800088a:	73fb      	strb	r3, [r7, #15]
 800088c:	e019      	b.n	80008c2 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	4413      	add	r3, r2
 8000898:	6818      	ldr	r0, [r3, #0]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	685a      	ldr	r2, [r3, #4]
 800089e:	7bfb      	ldrb	r3, [r7, #15]
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	4413      	add	r3, r2
 80008a4:	8819      	ldrh	r1, [r3, #0]
 80008a6:	78fa      	ldrb	r2, [r7, #3]
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
 80008aa:	fa42 f303 	asr.w	r3, r2, r3
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	f003 0301 	and.w	r3, r3, #1
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	461a      	mov	r2, r3
 80008b8:	f001 fa4d 	bl	8001d56 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80008bc:	7bfb      	ldrb	r3, [r7, #15]
 80008be:	3301      	adds	r3, #1
 80008c0:	73fb      	strb	r3, [r7, #15]
 80008c2:	7bfa      	ldrb	r2, [r7, #15]
 80008c4:	78bb      	ldrb	r3, [r7, #2]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	d3e1      	bcc.n	800088e <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6918      	ldr	r0, [r3, #16]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	8a9b      	ldrh	r3, [r3, #20]
 80008d2:	2201      	movs	r2, #1
 80008d4:	4619      	mov	r1, r3
 80008d6:	f001 fa3e 	bl	8001d56 <HAL_GPIO_WritePin>
	DELAY(1);
 80008da:	2001      	movs	r0, #1
 80008dc:	f000 fdba 	bl	8001454 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6918      	ldr	r0, [r3, #16]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	8a9b      	ldrh	r3, [r3, #20]
 80008e8:	2200      	movs	r2, #0
 80008ea:	4619      	mov	r1, r3
 80008ec:	f001 fa33 	bl	8001d56 <HAL_GPIO_WritePin>
}
 80008f0:	bf00      	nop
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f8:	b5b0      	push	{r4, r5, r7, lr}
 80008fa:	b0e2      	sub	sp, #392	; 0x188
 80008fc:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
  Lcd_PortType ports[] = {
 80008fe:	4b73      	ldr	r3, [pc, #460]	; (8000acc <main+0x1d4>)
 8000900:	f507 74b2 	add.w	r4, r7, #356	; 0x164
 8000904:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000906:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  GPIOA, GPIOB, GPIOB, GPIOB
  };

  Lcd_PinType pins[] = {LCD_DB4_Pin, LCD_DB5_Pin, LCD_DB6_Pin, LCD_DB7_Pin};
 800090a:	4a71      	ldr	r2, [pc, #452]	; (8000ad0 <main+0x1d8>)
 800090c:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8000910:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000914:	e883 0003 	stmia.w	r3, {r0, r1}

  Lcd_HandleTypeDef lcd;
  lcd = Lcd_create(ports, pins, GPIOA, LCD_A0_Pin, GPIOA, LCD_E_Pin);
 8000918:	4638      	mov	r0, r7
 800091a:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 800091e:	f507 71b2 	add.w	r1, r7, #356	; 0x164
 8000922:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000926:	9302      	str	r3, [sp, #8]
 8000928:	4b6a      	ldr	r3, [pc, #424]	; (8000ad4 <main+0x1dc>)
 800092a:	9301      	str	r3, [sp, #4]
 800092c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000930:	9300      	str	r3, [sp, #0]
 8000932:	4b68      	ldr	r3, [pc, #416]	; (8000ad4 <main+0x1dc>)
 8000934:	f7ff fe9f 	bl	8000676 <Lcd_create>
 8000938:	463b      	mov	r3, r7
 800093a:	f507 74a2 	add.w	r4, r7, #324	; 0x144
 800093e:	461d      	mov	r5, r3
 8000940:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000942:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000944:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000948:	e884 0003 	stmia.w	r4, {r0, r1}

  //menu variables
  const uint8_t page_count = _menu_count / 2 + _menu_count % 2;
 800094c:	2302      	movs	r3, #2
 800094e:	f887 3175 	strb.w	r3, [r7, #373]	; 0x175
  uint8_t page = 1, menu = 1;
 8000952:	2301      	movs	r3, #1
 8000954:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 8000958:	2301      	movs	r3, #1
 800095a:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095e:	f000 fd20 	bl	80013a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000962:	f000 f8bd 	bl	8000ae0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000966:	f000 fa25 	bl	8000db4 <MX_GPIO_Init>
  MX_ADC1_Init();
 800096a:	f000 f90f 	bl	8000b8c <MX_ADC1_Init>
  MX_SPI1_Init();
 800096e:	f000 f94b 	bl	8000c08 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000972:	f000 f97f 	bl	8000c74 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000976:	f000 f9f3 	bl	8000d60 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  Lcd_init(&lcd);
 800097a:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff fe9c 	bl	80006bc <Lcd_init>
  Lcd_clear(&lcd);
 8000984:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff ff23 	bl	80007d4 <Lcd_clear>
  Lcd_disable_cursor(&lcd);
 800098e:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff fed8 	bl	8000748 <Lcd_disable_cursor>
  Lcd_cursor(&lcd, 0, 0);
 8000998:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800099c:	2200      	movs	r2, #0
 800099e:	2100      	movs	r1, #0
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff feab 	bl	80006fc <Lcd_cursor>


  SX1278_hw_t SX1278_hw;
  SX1278_t SX1278;

  SX1278_hw.dio0.pin = LORA_DIO0_Pin;
 80009a6:	2308      	movs	r3, #8
 80009a8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  SX1278_hw.dio0.port = GPIOA;
 80009ac:	4b49      	ldr	r3, [pc, #292]	; (8000ad4 <main+0x1dc>)
 80009ae:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  SX1278_hw.nss.pin = LORA_NSS_Pin;
 80009b2:	2310      	movs	r3, #16
 80009b4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  SX1278_hw.nss.port = GPIOA;
 80009b8:	4b46      	ldr	r3, [pc, #280]	; (8000ad4 <main+0x1dc>)
 80009ba:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  SX1278_hw.reset.pin = LORA_RST_Pin;
 80009be:	2304      	movs	r3, #4
 80009c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  SX1278_hw.reset.port = GPIOA;
 80009c4:	4b43      	ldr	r3, [pc, #268]	; (8000ad4 <main+0x1dc>)
 80009c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  SX1278_hw.spi = &hspi1;
 80009ca:	4b43      	ldr	r3, [pc, #268]	; (8000ad8 <main+0x1e0>)
 80009cc:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

  SX1278.hw = &SX1278_hw;
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80009d8:	601a      	str	r2, [r3, #0]

  SX1278_begin(&SX1278, SX1278_433MHZ, SX1278_POWER_17DBM, SX1278_LORA_SF_8,
 80009da:	f107 001c 	add.w	r0, r7, #28
 80009de:	230a      	movs	r3, #10
 80009e0:	9301      	str	r3, [sp, #4]
 80009e2:	2303      	movs	r3, #3
 80009e4:	9300      	str	r3, [sp, #0]
 80009e6:	2302      	movs	r3, #2
 80009e8:	2201      	movs	r2, #1
 80009ea:	2100      	movs	r1, #0
 80009ec:	f7ff fe1b 	bl	8000626 <SX1278_begin>
  			SX1278_LORA_BW_20_8KHZ, 10);

  Print_Menu(&lcd, page, menu);
 80009f0:	f897 2176 	ldrb.w	r2, [r7, #374]	; 0x176
 80009f4:	f897 1177 	ldrb.w	r1, [r7, #375]	; 0x177
 80009f8:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80009fc:	4618      	mov	r0, r3
 80009fe:	f000 fa63 	bl	8000ec8 <Print_Menu>





	  if (ReadButtons() == 0x01) {
 8000a02:	f7ff fc0d 	bl	8000220 <ReadButtons>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d134      	bne.n	8000a76 <main+0x17e>
		  menu ++;
 8000a0c:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8000a10:	3301      	adds	r3, #1
 8000a12:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
		  if (menu > _menu_count) {
 8000a16:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8000a1a:	2b04      	cmp	r3, #4
 8000a1c:	d905      	bls.n	8000a2a <main+0x132>
			  menu = 1;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
			  page = 1;
 8000a24:	2301      	movs	r3, #1
 8000a26:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
		  }
		  if (page <  menu / 2 + menu % 2) {
 8000a2a:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8000a2e:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8000a32:	085b      	lsrs	r3, r3, #1
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	4619      	mov	r1, r3
 8000a38:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8000a3c:	f003 0301 	and.w	r3, r3, #1
 8000a40:	440b      	add	r3, r1
 8000a42:	429a      	cmp	r2, r3
 8000a44:	da0d      	bge.n	8000a62 <main+0x16a>
			  page ++;
 8000a46:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
			  if (page > page_count) page = 1;
 8000a50:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8000a54:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d902      	bls.n	8000a62 <main+0x16a>
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
		  }
		  Print_Menu(&lcd, page, menu);
 8000a62:	f897 2176 	ldrb.w	r2, [r7, #374]	; 0x176
 8000a66:	f897 1177 	ldrb.w	r1, [r7, #375]	; 0x177
 8000a6a:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f000 fa2a 	bl	8000ec8 <Print_Menu>
 8000a74:	e025      	b.n	8000ac2 <main+0x1ca>
	  }
	  else if (ReadButtons() == 0x02) {
 8000a76:	f7ff fbd3 	bl	8000220 <ReadButtons>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	d120      	bne.n	8000ac2 <main+0x1ca>
		  switch(menu) {
 8000a80:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8000a84:	2b02      	cmp	r3, #2
 8000a86:	d11c      	bne.n	8000ac2 <main+0x1ca>
		  	  case 2: {
		  		  	  Lcd_clear(&lcd);
 8000a88:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fea1 	bl	80007d4 <Lcd_clear>
		  			  Lcd_cursor(&lcd, 0, 0);
 8000a92:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff fe2e 	bl	80006fc <Lcd_cursor>
		  		  	  uint8_t test = SX1278_SPIRead(&SX1278, 0x42);
 8000aa0:	f107 031c 	add.w	r3, r7, #28
 8000aa4:	2142      	movs	r1, #66	; 0x42
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff fc4e 	bl	8000348 <SX1278_SPIRead>
 8000aac:	4603      	mov	r3, r0
 8000aae:	f887 3174 	strb.w	r3, [r7, #372]	; 0x174
		  		  	  Lcd_printf(&lcd, "Test reg: %d", test);
 8000ab2:	f897 2174 	ldrb.w	r2, [r7, #372]	; 0x174
 8000ab6:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000aba:	4908      	ldr	r1, [pc, #32]	; (8000adc <main+0x1e4>)
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fe4f 	bl	8000760 <Lcd_printf>
		  	  }
		  }
	  }
	  HAL_Delay(100);
 8000ac2:	2064      	movs	r0, #100	; 0x64
 8000ac4:	f000 fcc6 	bl	8001454 <HAL_Delay>
	  if (ReadButtons() == 0x01) {
 8000ac8:	e79b      	b.n	8000a02 <main+0x10a>
 8000aca:	bf00      	nop
 8000acc:	08004514 	.word	0x08004514
 8000ad0:	08004524 	.word	0x08004524
 8000ad4:	40010800 	.word	0x40010800
 8000ad8:	20000118 	.word	0x20000118
 8000adc:	08004504 	.word	0x08004504

08000ae0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b092      	sub	sp, #72	; 0x48
 8000ae4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae6:	f107 0320 	add.w	r3, r7, #32
 8000aea:	2228      	movs	r2, #40	; 0x28
 8000aec:	2100      	movs	r1, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f003 f8bf 	bl	8003c72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af4:	f107 030c 	add.w	r3, r7, #12
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b04:	463b      	mov	r3, r7
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b24:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000b26:	2300      	movs	r3, #0
 8000b28:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b2a:	f107 0320 	add.w	r3, r7, #32
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f001 f92a 	bl	8001d88 <HAL_RCC_OscConfig>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000b3a:	f000 fa09 	bl	8000f50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b3e:	230f      	movs	r3, #15
 8000b40:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b42:	2302      	movs	r3, #2
 8000b44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b52:	f107 030c 	add.w	r3, r7, #12
 8000b56:	2100      	movs	r1, #0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f001 fb95 	bl	8002288 <HAL_RCC_ClockConfig>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000b64:	f000 f9f4 	bl	8000f50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b70:	463b      	mov	r3, r7
 8000b72:	4618      	mov	r0, r3
 8000b74:	f001 fcf4 	bl	8002560 <HAL_RCCEx_PeriphCLKConfig>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000b7e:	f000 f9e7 	bl	8000f50 <Error_Handler>
  }
}
 8000b82:	bf00      	nop
 8000b84:	3748      	adds	r7, #72	; 0x48
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b9c:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <MX_ADC1_Init+0x74>)
 8000b9e:	4a19      	ldr	r2, [pc, #100]	; (8000c04 <MX_ADC1_Init+0x78>)
 8000ba0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ba2:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <MX_ADC1_Init+0x74>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ba8:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <MX_ADC1_Init+0x74>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bae:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <MX_ADC1_Init+0x74>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bb4:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <MX_ADC1_Init+0x74>)
 8000bb6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000bba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bbc:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <MX_ADC1_Init+0x74>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000bc2:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <MX_ADC1_Init+0x74>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bc8:	480d      	ldr	r0, [pc, #52]	; (8000c00 <MX_ADC1_Init+0x74>)
 8000bca:	f000 fc65 	bl	8001498 <HAL_ADC_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000bd4:	f000 f9bc 	bl	8000f50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	4619      	mov	r1, r3
 8000be8:	4805      	ldr	r0, [pc, #20]	; (8000c00 <MX_ADC1_Init+0x74>)
 8000bea:	f000 fd2d 	bl	8001648 <HAL_ADC_ConfigChannel>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000bf4:	f000 f9ac 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	200000e8 	.word	0x200000e8
 8000c04:	40012400 	.word	0x40012400

08000c08 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c0c:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c0e:	4a18      	ldr	r2, [pc, #96]	; (8000c70 <MX_SPI1_Init+0x68>)
 8000c10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c12:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c1a:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c38:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c40:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c4c:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c54:	220a      	movs	r2, #10
 8000c56:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c58:	4804      	ldr	r0, [pc, #16]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c5a:	f001 fd27 	bl	80026ac <HAL_SPI_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c64:	f000 f974 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000118 	.word	0x20000118
 8000c70:	40013000 	.word	0x40013000

08000c74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08e      	sub	sp, #56	; 0x38
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c88:	f107 0320 	add.w	r3, r7, #32
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
 8000ca0:	615a      	str	r2, [r3, #20]
 8000ca2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ca4:	4b2d      	ldr	r3, [pc, #180]	; (8000d5c <MX_TIM2_Init+0xe8>)
 8000ca6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000caa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8000cac:	4b2b      	ldr	r3, [pc, #172]	; (8000d5c <MX_TIM2_Init+0xe8>)
 8000cae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cb2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb4:	4b29      	ldr	r3, [pc, #164]	; (8000d5c <MX_TIM2_Init+0xe8>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8000cba:	4b28      	ldr	r3, [pc, #160]	; (8000d5c <MX_TIM2_Init+0xe8>)
 8000cbc:	220a      	movs	r2, #10
 8000cbe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc0:	4b26      	ldr	r3, [pc, #152]	; (8000d5c <MX_TIM2_Init+0xe8>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cc6:	4b25      	ldr	r3, [pc, #148]	; (8000d5c <MX_TIM2_Init+0xe8>)
 8000cc8:	2280      	movs	r2, #128	; 0x80
 8000cca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ccc:	4823      	ldr	r0, [pc, #140]	; (8000d5c <MX_TIM2_Init+0xe8>)
 8000cce:	f002 f8b1 	bl	8002e34 <HAL_TIM_Base_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000cd8:	f000 f93a 	bl	8000f50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ce2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	481c      	ldr	r0, [pc, #112]	; (8000d5c <MX_TIM2_Init+0xe8>)
 8000cea:	f002 f9c9 	bl	8003080 <HAL_TIM_ConfigClockSource>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000cf4:	f000 f92c 	bl	8000f50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000cf8:	4818      	ldr	r0, [pc, #96]	; (8000d5c <MX_TIM2_Init+0xe8>)
 8000cfa:	f002 f8c6 	bl	8002e8a <HAL_TIM_PWM_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000d04:	f000 f924 	bl	8000f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d10:	f107 0320 	add.w	r3, r7, #32
 8000d14:	4619      	mov	r1, r3
 8000d16:	4811      	ldr	r0, [pc, #68]	; (8000d5c <MX_TIM2_Init+0xe8>)
 8000d18:	f002 fd5c 	bl	80037d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000d22:	f000 f915 	bl	8000f50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d26:	2360      	movs	r3, #96	; 0x60
 8000d28:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	2200      	movs	r2, #0
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4807      	ldr	r0, [pc, #28]	; (8000d5c <MX_TIM2_Init+0xe8>)
 8000d3e:	f002 f8d9 	bl	8002ef4 <HAL_TIM_PWM_ConfigChannel>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000d48:	f000 f902 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d4c:	4803      	ldr	r0, [pc, #12]	; (8000d5c <MX_TIM2_Init+0xe8>)
 8000d4e:	f000 f9d9 	bl	8001104 <HAL_TIM_MspPostInit>

}
 8000d52:	bf00      	nop
 8000d54:	3738      	adds	r7, #56	; 0x38
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000170 	.word	0x20000170

08000d60 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d64:	4b11      	ldr	r3, [pc, #68]	; (8000dac <MX_USART3_UART_Init+0x4c>)
 8000d66:	4a12      	ldr	r2, [pc, #72]	; (8000db0 <MX_USART3_UART_Init+0x50>)
 8000d68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d6a:	4b10      	ldr	r3, [pc, #64]	; (8000dac <MX_USART3_UART_Init+0x4c>)
 8000d6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <MX_USART3_UART_Init+0x4c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <MX_USART3_UART_Init+0x4c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <MX_USART3_UART_Init+0x4c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d84:	4b09      	ldr	r3, [pc, #36]	; (8000dac <MX_USART3_UART_Init+0x4c>)
 8000d86:	220c      	movs	r2, #12
 8000d88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <MX_USART3_UART_Init+0x4c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <MX_USART3_UART_Init+0x4c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d96:	4805      	ldr	r0, [pc, #20]	; (8000dac <MX_USART3_UART_Init+0x4c>)
 8000d98:	f002 fd60 	bl	800385c <HAL_UART_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000da2:	f000 f8d5 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	200000a8 	.word	0x200000a8
 8000db0:	40004800 	.word	0x40004800

08000db4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b088      	sub	sp, #32
 8000db8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dba:	f107 0310 	add.w	r3, r7, #16
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc8:	4b3b      	ldr	r3, [pc, #236]	; (8000eb8 <MX_GPIO_Init+0x104>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	4a3a      	ldr	r2, [pc, #232]	; (8000eb8 <MX_GPIO_Init+0x104>)
 8000dce:	f043 0310 	orr.w	r3, r3, #16
 8000dd2:	6193      	str	r3, [r2, #24]
 8000dd4:	4b38      	ldr	r3, [pc, #224]	; (8000eb8 <MX_GPIO_Init+0x104>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	f003 0310 	and.w	r3, r3, #16
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de0:	4b35      	ldr	r3, [pc, #212]	; (8000eb8 <MX_GPIO_Init+0x104>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	4a34      	ldr	r2, [pc, #208]	; (8000eb8 <MX_GPIO_Init+0x104>)
 8000de6:	f043 0320 	orr.w	r3, r3, #32
 8000dea:	6193      	str	r3, [r2, #24]
 8000dec:	4b32      	ldr	r3, [pc, #200]	; (8000eb8 <MX_GPIO_Init+0x104>)
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	f003 0320 	and.w	r3, r3, #32
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df8:	4b2f      	ldr	r3, [pc, #188]	; (8000eb8 <MX_GPIO_Init+0x104>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	4a2e      	ldr	r2, [pc, #184]	; (8000eb8 <MX_GPIO_Init+0x104>)
 8000dfe:	f043 0304 	orr.w	r3, r3, #4
 8000e02:	6193      	str	r3, [r2, #24]
 8000e04:	4b2c      	ldr	r3, [pc, #176]	; (8000eb8 <MX_GPIO_Init+0x104>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	f003 0304 	and.w	r3, r3, #4
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e10:	4b29      	ldr	r3, [pc, #164]	; (8000eb8 <MX_GPIO_Init+0x104>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	4a28      	ldr	r2, [pc, #160]	; (8000eb8 <MX_GPIO_Init+0x104>)
 8000e16:	f043 0308 	orr.w	r3, r3, #8
 8000e1a:	6193      	str	r3, [r2, #24]
 8000e1c:	4b26      	ldr	r3, [pc, #152]	; (8000eb8 <MX_GPIO_Init+0x104>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	f003 0308 	and.w	r3, r3, #8
 8000e24:	603b      	str	r3, [r7, #0]
 8000e26:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LORA_RST_Pin|LORA_DIO0_Pin|LORA_NSS_Pin|LCD_DB4_Pin
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f240 711c 	movw	r1, #1820	; 0x71c
 8000e2e:	4823      	ldr	r0, [pc, #140]	; (8000ebc <MX_GPIO_Init+0x108>)
 8000e30:	f000 ff91 	bl	8001d56 <HAL_GPIO_WritePin>
                          |LCD_E_Pin|LCD_A0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay_Pin|HL4_Pin|HL3_Pin|BL_E_Pin
 8000e34:	2200      	movs	r2, #0
 8000e36:	f24f 2107 	movw	r1, #61959	; 0xf207
 8000e3a:	4821      	ldr	r0, [pc, #132]	; (8000ec0 <MX_GPIO_Init+0x10c>)
 8000e3c:	f000 ff8b 	bl	8001d56 <HAL_GPIO_WritePin>
                          |LCD_DB7_Pin|LCD_DB6_Pin|LCD_DB5_Pin|PB6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : but_1_Pin but_2_Pin */
  GPIO_InitStruct.Pin = but_1_Pin|but_2_Pin;
 8000e40:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000e44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e4e:	f107 0310 	add.w	r3, r7, #16
 8000e52:	4619      	mov	r1, r3
 8000e54:	481b      	ldr	r0, [pc, #108]	; (8000ec4 <MX_GPIO_Init+0x110>)
 8000e56:	f000 fe0d 	bl	8001a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_RST_Pin LORA_DIO0_Pin LORA_NSS_Pin LCD_DB4_Pin
                           LCD_E_Pin LCD_A0_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|LORA_DIO0_Pin|LORA_NSS_Pin|LCD_DB4_Pin
 8000e5a:	f240 731c 	movw	r3, #1820	; 0x71c
 8000e5e:	613b      	str	r3, [r7, #16]
                          |LCD_E_Pin|LCD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e60:	2301      	movs	r3, #1
 8000e62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6c:	f107 0310 	add.w	r3, r7, #16
 8000e70:	4619      	mov	r1, r3
 8000e72:	4812      	ldr	r0, [pc, #72]	; (8000ebc <MX_GPIO_Init+0x108>)
 8000e74:	f000 fdfe 	bl	8001a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay_Pin HL4_Pin HL3_Pin BL_E_Pin
                           LCD_DB7_Pin LCD_DB6_Pin LCD_DB5_Pin PB6_Pin */
  GPIO_InitStruct.Pin = Relay_Pin|HL4_Pin|HL3_Pin|BL_E_Pin
 8000e78:	f24f 2307 	movw	r3, #61959	; 0xf207
 8000e7c:	613b      	str	r3, [r7, #16]
                          |LCD_DB7_Pin|LCD_DB6_Pin|LCD_DB5_Pin|PB6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2302      	movs	r3, #2
 8000e88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8a:	f107 0310 	add.w	r3, r7, #16
 8000e8e:	4619      	mov	r1, r3
 8000e90:	480b      	ldr	r0, [pc, #44]	; (8000ec0 <MX_GPIO_Init+0x10c>)
 8000e92:	f000 fdef 	bl	8001a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12_Pin PA11_Pin PB5_Pin PB8_Pin
                           PB7_Pin */
  GPIO_InitStruct.Pin = PA12_Pin|PA11_Pin|PB5_Pin|PB8_Pin
 8000e96:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8000e9a:	613b      	str	r3, [r7, #16]
                          |PB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea4:	f107 0310 	add.w	r3, r7, #16
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <MX_GPIO_Init+0x10c>)
 8000eac:	f000 fde2 	bl	8001a74 <HAL_GPIO_Init>

}
 8000eb0:	bf00      	nop
 8000eb2:	3720      	adds	r7, #32
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	40010800 	.word	0x40010800
 8000ec0:	40010c00 	.word	0x40010c00
 8000ec4:	40011000 	.word	0x40011000

08000ec8 <Print_Menu>:

/* USER CODE BEGIN 4 */
void Print_Menu(Lcd_HandleTypeDef * lcd, uint8_t page, uint8_t menu) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	70fb      	strb	r3, [r7, #3]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	70bb      	strb	r3, [r7, #2]
	Lcd_clear(lcd);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff fc7b 	bl	80007d4 <Lcd_clear>
	Lcd_cursor(lcd, 0, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff fc0a 	bl	80006fc <Lcd_cursor>
    Lcd_printf(lcd, "%s", menu_str[2 * page - 2]);
 8000ee8:	78fb      	ldrb	r3, [r7, #3]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	4a16      	ldr	r2, [pc, #88]	; (8000f48 <Print_Menu+0x80>)
 8000ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4915      	ldr	r1, [pc, #84]	; (8000f4c <Print_Menu+0x84>)
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f7ff fc31 	bl	8000760 <Lcd_printf>
    Lcd_cursor(lcd, 1, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2101      	movs	r1, #1
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff fbfa 	bl	80006fc <Lcd_cursor>
    Lcd_printf(lcd, "%s", menu_str[2 * page - 1]);
 8000f08:	78fb      	ldrb	r3, [r7, #3]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	4a0e      	ldr	r2, [pc, #56]	; (8000f48 <Print_Menu+0x80>)
 8000f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f14:	461a      	mov	r2, r3
 8000f16:	490d      	ldr	r1, [pc, #52]	; (8000f4c <Print_Menu+0x84>)
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff fc21 	bl	8000760 <Lcd_printf>
    Lcd_cursor(lcd, (menu - 1) % 2, 15);
 8000f1e:	78bb      	ldrb	r3, [r7, #2]
 8000f20:	3b01      	subs	r3, #1
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	bfb8      	it	lt
 8000f2a:	425b      	neglt	r3, r3
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	220f      	movs	r2, #15
 8000f30:	4619      	mov	r1, r3
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff fbe2 	bl	80006fc <Lcd_cursor>
    Lcd_blink(lcd);
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff fbf9 	bl	8000730 <Lcd_blink>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000000 	.word	0x20000000
 8000f4c:	0800452c 	.word	0x0800452c

08000f50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr

08000f5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <HAL_MspInit+0x5c>)
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	4a14      	ldr	r2, [pc, #80]	; (8000fb8 <HAL_MspInit+0x5c>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6193      	str	r3, [r2, #24]
 8000f6e:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_MspInit+0x5c>)
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <HAL_MspInit+0x5c>)
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	4a0e      	ldr	r2, [pc, #56]	; (8000fb8 <HAL_MspInit+0x5c>)
 8000f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f84:	61d3      	str	r3, [r2, #28]
 8000f86:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <HAL_MspInit+0x5c>)
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f92:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <HAL_MspInit+0x60>)
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <HAL_MspInit+0x60>)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	40010000 	.word	0x40010000

08000fc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0310 	add.w	r3, r7, #16
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a14      	ldr	r2, [pc, #80]	; (800102c <HAL_ADC_MspInit+0x6c>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d121      	bne.n	8001024 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fe0:	4b13      	ldr	r3, [pc, #76]	; (8001030 <HAL_ADC_MspInit+0x70>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	4a12      	ldr	r2, [pc, #72]	; (8001030 <HAL_ADC_MspInit+0x70>)
 8000fe6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fea:	6193      	str	r3, [r2, #24]
 8000fec:	4b10      	ldr	r3, [pc, #64]	; (8001030 <HAL_ADC_MspInit+0x70>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff8:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <HAL_ADC_MspInit+0x70>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	4a0c      	ldr	r2, [pc, #48]	; (8001030 <HAL_ADC_MspInit+0x70>)
 8000ffe:	f043 0304 	orr.w	r3, r3, #4
 8001002:	6193      	str	r3, [r2, #24]
 8001004:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <HAL_ADC_MspInit+0x70>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	f003 0304 	and.w	r3, r3, #4
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = TEMP_Pin|Cell_Voltage_Pin;
 8001010:	2303      	movs	r3, #3
 8001012:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001014:	2303      	movs	r3, #3
 8001016:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001018:	f107 0310 	add.w	r3, r7, #16
 800101c:	4619      	mov	r1, r3
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <HAL_ADC_MspInit+0x74>)
 8001020:	f000 fd28 	bl	8001a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001024:	bf00      	nop
 8001026:	3720      	adds	r7, #32
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40012400 	.word	0x40012400
 8001030:	40021000 	.word	0x40021000
 8001034:	40010800 	.word	0x40010800

08001038 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 0310 	add.w	r3, r7, #16
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a1b      	ldr	r2, [pc, #108]	; (80010c0 <HAL_SPI_MspInit+0x88>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d12f      	bne.n	80010b8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001058:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <HAL_SPI_MspInit+0x8c>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	4a19      	ldr	r2, [pc, #100]	; (80010c4 <HAL_SPI_MspInit+0x8c>)
 800105e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001062:	6193      	str	r3, [r2, #24]
 8001064:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <HAL_SPI_MspInit+0x8c>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001070:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <HAL_SPI_MspInit+0x8c>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4a13      	ldr	r2, [pc, #76]	; (80010c4 <HAL_SPI_MspInit+0x8c>)
 8001076:	f043 0304 	orr.w	r3, r3, #4
 800107a:	6193      	str	r3, [r2, #24]
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <HAL_SPI_MspInit+0x8c>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f003 0304 	and.w	r3, r3, #4
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001088:	23a0      	movs	r3, #160	; 0xa0
 800108a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001090:	2303      	movs	r3, #3
 8001092:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001094:	f107 0310 	add.w	r3, r7, #16
 8001098:	4619      	mov	r1, r3
 800109a:	480b      	ldr	r0, [pc, #44]	; (80010c8 <HAL_SPI_MspInit+0x90>)
 800109c:	f000 fcea 	bl	8001a74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010a0:	2340      	movs	r3, #64	; 0x40
 80010a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	4619      	mov	r1, r3
 80010b2:	4805      	ldr	r0, [pc, #20]	; (80010c8 <HAL_SPI_MspInit+0x90>)
 80010b4:	f000 fcde 	bl	8001a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010b8:	bf00      	nop
 80010ba:	3720      	adds	r7, #32
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40013000 	.word	0x40013000
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40010800 	.word	0x40010800

080010cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010dc:	d10b      	bne.n	80010f6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <HAL_TIM_Base_MspInit+0x34>)
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	4a07      	ldr	r2, [pc, #28]	; (8001100 <HAL_TIM_Base_MspInit+0x34>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	61d3      	str	r3, [r2, #28]
 80010ea:	4b05      	ldr	r3, [pc, #20]	; (8001100 <HAL_TIM_Base_MspInit+0x34>)
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010f6:	bf00      	nop
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr
 8001100:	40021000 	.word	0x40021000

08001104 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001122:	d12a      	bne.n	800117a <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001124:	4b17      	ldr	r3, [pc, #92]	; (8001184 <HAL_TIM_MspPostInit+0x80>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	4a16      	ldr	r2, [pc, #88]	; (8001184 <HAL_TIM_MspPostInit+0x80>)
 800112a:	f043 0304 	orr.w	r3, r3, #4
 800112e:	6193      	str	r3, [r2, #24]
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <HAL_TIM_MspPostInit+0x80>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800113c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001140:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001146:	2302      	movs	r3, #2
 8001148:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114a:	f107 030c 	add.w	r3, r7, #12
 800114e:	4619      	mov	r1, r3
 8001150:	480d      	ldr	r0, [pc, #52]	; (8001188 <HAL_TIM_MspPostInit+0x84>)
 8001152:	f000 fc8f 	bl	8001a74 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <HAL_TIM_MspPostInit+0x88>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	61fb      	str	r3, [r7, #28]
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001162:	61fb      	str	r3, [r7, #28]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800116a:	61fb      	str	r3, [r7, #28]
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001172:	61fb      	str	r3, [r7, #28]
 8001174:	4a05      	ldr	r2, [pc, #20]	; (800118c <HAL_TIM_MspPostInit+0x88>)
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800117a:	bf00      	nop
 800117c:	3720      	adds	r7, #32
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40021000 	.word	0x40021000
 8001188:	40010800 	.word	0x40010800
 800118c:	40010000 	.word	0x40010000

08001190 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a1c      	ldr	r2, [pc, #112]	; (800121c <HAL_UART_MspInit+0x8c>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d131      	bne.n	8001214 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011b0:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <HAL_UART_MspInit+0x90>)
 80011b2:	69db      	ldr	r3, [r3, #28]
 80011b4:	4a1a      	ldr	r2, [pc, #104]	; (8001220 <HAL_UART_MspInit+0x90>)
 80011b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011ba:	61d3      	str	r3, [r2, #28]
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <HAL_UART_MspInit+0x90>)
 80011be:	69db      	ldr	r3, [r3, #28]
 80011c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c8:	4b15      	ldr	r3, [pc, #84]	; (8001220 <HAL_UART_MspInit+0x90>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	4a14      	ldr	r2, [pc, #80]	; (8001220 <HAL_UART_MspInit+0x90>)
 80011ce:	f043 0308 	orr.w	r3, r3, #8
 80011d2:	6193      	str	r3, [r2, #24]
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <HAL_UART_MspInit+0x90>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	f003 0308 	and.w	r3, r3, #8
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ea:	2303      	movs	r3, #3
 80011ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ee:	f107 0310 	add.w	r3, r7, #16
 80011f2:	4619      	mov	r1, r3
 80011f4:	480b      	ldr	r0, [pc, #44]	; (8001224 <HAL_UART_MspInit+0x94>)
 80011f6:	f000 fc3d 	bl	8001a74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80011fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001208:	f107 0310 	add.w	r3, r7, #16
 800120c:	4619      	mov	r1, r3
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <HAL_UART_MspInit+0x94>)
 8001210:	f000 fc30 	bl	8001a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001214:	bf00      	nop
 8001216:	3720      	adds	r7, #32
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40004800 	.word	0x40004800
 8001220:	40021000 	.word	0x40021000
 8001224:	40010c00 	.word	0x40010c00

08001228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr

08001234 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <HardFault_Handler+0x4>

0800123a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800123e:	e7fe      	b.n	800123e <MemManage_Handler+0x4>

08001240 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001244:	e7fe      	b.n	8001244 <BusFault_Handler+0x4>

08001246 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800124a:	e7fe      	b.n	800124a <UsageFault_Handler+0x4>

0800124c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr

08001258 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr

08001264 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr

08001270 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001274:	f000 f8d2 	bl	800141c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}

0800127c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001284:	4a14      	ldr	r2, [pc, #80]	; (80012d8 <_sbrk+0x5c>)
 8001286:	4b15      	ldr	r3, [pc, #84]	; (80012dc <_sbrk+0x60>)
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001290:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <_sbrk+0x64>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d102      	bne.n	800129e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <_sbrk+0x64>)
 800129a:	4a12      	ldr	r2, [pc, #72]	; (80012e4 <_sbrk+0x68>)
 800129c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800129e:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <_sbrk+0x64>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4413      	add	r3, r2
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d207      	bcs.n	80012bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012ac:	f002 fcac 	bl	8003c08 <__errno>
 80012b0:	4602      	mov	r2, r0
 80012b2:	230c      	movs	r3, #12
 80012b4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80012b6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ba:	e009      	b.n	80012d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <_sbrk+0x64>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012c2:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <_sbrk+0x64>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	4a05      	ldr	r2, [pc, #20]	; (80012e0 <_sbrk+0x64>)
 80012cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ce:	68fb      	ldr	r3, [r7, #12]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20002000 	.word	0x20002000
 80012dc:	00000400 	.word	0x00000400
 80012e0:	2000009c 	.word	0x2000009c
 80012e4:	200001b8 	.word	0x200001b8

080012e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80012ec:	4b17      	ldr	r3, [pc, #92]	; (800134c <SystemInit+0x64>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a16      	ldr	r2, [pc, #88]	; (800134c <SystemInit+0x64>)
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80012f8:	4b14      	ldr	r3, [pc, #80]	; (800134c <SystemInit+0x64>)
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	4913      	ldr	r1, [pc, #76]	; (800134c <SystemInit+0x64>)
 80012fe:	4b14      	ldr	r3, [pc, #80]	; (8001350 <SystemInit+0x68>)
 8001300:	4013      	ands	r3, r2
 8001302:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <SystemInit+0x64>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a10      	ldr	r2, [pc, #64]	; (800134c <SystemInit+0x64>)
 800130a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800130e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001312:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001314:	4b0d      	ldr	r3, [pc, #52]	; (800134c <SystemInit+0x64>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a0c      	ldr	r2, [pc, #48]	; (800134c <SystemInit+0x64>)
 800131a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800131e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001320:	4b0a      	ldr	r3, [pc, #40]	; (800134c <SystemInit+0x64>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	4a09      	ldr	r2, [pc, #36]	; (800134c <SystemInit+0x64>)
 8001326:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800132a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
#elif defined(STM32F100xB) || defined(STM32F100xE)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800132c:	4b07      	ldr	r3, [pc, #28]	; (800134c <SystemInit+0x64>)
 800132e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001332:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <SystemInit+0x64>)
 8001336:	2200      	movs	r2, #0
 8001338:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <SystemInit+0x6c>)
 800133c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001340:	609a      	str	r2, [r3, #8]
#endif 
}
 8001342:	bf00      	nop
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40021000 	.word	0x40021000
 8001350:	f8ff0000 	.word	0xf8ff0000
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001358:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800135a:	e003      	b.n	8001364 <LoopCopyDataInit>

0800135c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800135c:	4b0b      	ldr	r3, [pc, #44]	; (800138c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800135e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001360:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001362:	3104      	adds	r1, #4

08001364 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001364:	480a      	ldr	r0, [pc, #40]	; (8001390 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001368:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800136a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800136c:	d3f6      	bcc.n	800135c <CopyDataInit>
  ldr r2, =_sbss
 800136e:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001370:	e002      	b.n	8001378 <LoopFillZerobss>

08001372 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001372:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001374:	f842 3b04 	str.w	r3, [r2], #4

08001378 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001378:	4b08      	ldr	r3, [pc, #32]	; (800139c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800137a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800137c:	d3f9      	bcc.n	8001372 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800137e:	f7ff ffb3 	bl	80012e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001382:	f002 fc47 	bl	8003c14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001386:	f7ff fab7 	bl	80008f8 <main>
  bx lr
 800138a:	4770      	bx	lr
  ldr r3, =_sidata
 800138c:	080045c4 	.word	0x080045c4
  ldr r0, =_sdata
 8001390:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001394:	20000080 	.word	0x20000080
  ldr r2, =_sbss
 8001398:	20000080 	.word	0x20000080
  ldr r3, = _ebss
 800139c:	200001b8 	.word	0x200001b8

080013a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013a0:	e7fe      	b.n	80013a0 <ADC1_IRQHandler>

080013a2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a6:	2003      	movs	r0, #3
 80013a8:	f000 fb30 	bl	8001a0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ac:	2000      	movs	r0, #0
 80013ae:	f000 f805 	bl	80013bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b2:	f7ff fdd3 	bl	8000f5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	bd80      	pop	{r7, pc}

080013bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <HAL_InitTick+0x54>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <HAL_InitTick+0x58>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	4619      	mov	r1, r3
 80013ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 fb3d 	bl	8001a5a <HAL_SYSTICK_Config>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e00e      	b.n	8001408 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b0f      	cmp	r3, #15
 80013ee:	d80a      	bhi.n	8001406 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f0:	2200      	movs	r2, #0
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	f04f 30ff 	mov.w	r0, #4294967295
 80013f8:	f000 fb13 	bl	8001a22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013fc:	4a06      	ldr	r2, [pc, #24]	; (8001418 <HAL_InitTick+0x5c>)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001402:	2300      	movs	r3, #0
 8001404:	e000      	b.n	8001408 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
}
 8001408:	4618      	mov	r0, r3
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000010 	.word	0x20000010
 8001414:	20000018 	.word	0x20000018
 8001418:	20000014 	.word	0x20000014

0800141c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <HAL_IncTick+0x1c>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	461a      	mov	r2, r3
 8001426:	4b05      	ldr	r3, [pc, #20]	; (800143c <HAL_IncTick+0x20>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4413      	add	r3, r2
 800142c:	4a03      	ldr	r2, [pc, #12]	; (800143c <HAL_IncTick+0x20>)
 800142e:	6013      	str	r3, [r2, #0]
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr
 8001438:	20000018 	.word	0x20000018
 800143c:	200001b0 	.word	0x200001b0

08001440 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return uwTick;
 8001444:	4b02      	ldr	r3, [pc, #8]	; (8001450 <HAL_GetTick+0x10>)
 8001446:	681b      	ldr	r3, [r3, #0]
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr
 8001450:	200001b0 	.word	0x200001b0

08001454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800145c:	f7ff fff0 	bl	8001440 <HAL_GetTick>
 8001460:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800146c:	d005      	beq.n	800147a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800146e:	4b09      	ldr	r3, [pc, #36]	; (8001494 <HAL_Delay+0x40>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	461a      	mov	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4413      	add	r3, r2
 8001478:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800147a:	bf00      	nop
 800147c:	f7ff ffe0 	bl	8001440 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	429a      	cmp	r2, r3
 800148a:	d8f7      	bhi.n	800147c <HAL_Delay+0x28>
  {
  }
}
 800148c:	bf00      	nop
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000018 	.word	0x20000018

08001498 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014a0:	2300      	movs	r3, #0
 80014a2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80014a4:	2300      	movs	r3, #0
 80014a6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80014ac:	2300      	movs	r3, #0
 80014ae:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e0be      	b.n	8001638 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d109      	bne.n	80014dc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff fd72 	bl	8000fc0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f000 f9ab 	bl	8001838 <ADC_ConversionStop_Disable>
 80014e2:	4603      	mov	r3, r0
 80014e4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ea:	f003 0310 	and.w	r3, r3, #16
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f040 8099 	bne.w	8001626 <HAL_ADC_Init+0x18e>
 80014f4:	7dfb      	ldrb	r3, [r7, #23]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f040 8095 	bne.w	8001626 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001500:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001504:	f023 0302 	bic.w	r3, r3, #2
 8001508:	f043 0202 	orr.w	r2, r3, #2
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001518:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	7b1b      	ldrb	r3, [r3, #12]
 800151e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001520:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	4313      	orrs	r3, r2
 8001526:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001530:	d003      	beq.n	800153a <HAL_ADC_Init+0xa2>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d102      	bne.n	8001540 <HAL_ADC_Init+0xa8>
 800153a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800153e:	e000      	b.n	8001542 <HAL_ADC_Init+0xaa>
 8001540:	2300      	movs	r3, #0
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4313      	orrs	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	7d1b      	ldrb	r3, [r3, #20]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d119      	bne.n	8001584 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	7b1b      	ldrb	r3, [r3, #12]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d109      	bne.n	800156c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	3b01      	subs	r3, #1
 800155e:	035a      	lsls	r2, r3, #13
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	4313      	orrs	r3, r2
 8001564:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	e00b      	b.n	8001584 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001570:	f043 0220 	orr.w	r2, r3, #32
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157c:	f043 0201 	orr.w	r2, r3, #1
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	430a      	orrs	r2, r1
 8001596:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	4b28      	ldr	r3, [pc, #160]	; (8001640 <HAL_ADC_Init+0x1a8>)
 80015a0:	4013      	ands	r3, r2
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	6812      	ldr	r2, [r2, #0]
 80015a6:	68b9      	ldr	r1, [r7, #8]
 80015a8:	430b      	orrs	r3, r1
 80015aa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015b4:	d003      	beq.n	80015be <HAL_ADC_Init+0x126>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d104      	bne.n	80015c8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	051b      	lsls	r3, r3, #20
 80015c6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ce:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	430a      	orrs	r2, r1
 80015da:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	689a      	ldr	r2, [r3, #8]
 80015e2:	4b18      	ldr	r3, [pc, #96]	; (8001644 <HAL_ADC_Init+0x1ac>)
 80015e4:	4013      	ands	r3, r2
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d10b      	bne.n	8001604 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f6:	f023 0303 	bic.w	r3, r3, #3
 80015fa:	f043 0201 	orr.w	r2, r3, #1
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001602:	e018      	b.n	8001636 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001608:	f023 0312 	bic.w	r3, r3, #18
 800160c:	f043 0210 	orr.w	r2, r3, #16
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001618:	f043 0201 	orr.w	r2, r3, #1
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001624:	e007      	b.n	8001636 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162a:	f043 0210 	orr.w	r2, r3, #16
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001636:	7dfb      	ldrb	r3, [r7, #23]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	ffe1f7fd 	.word	0xffe1f7fd
 8001644:	ff1f0efe 	.word	0xff1f0efe

08001648 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001652:	2300      	movs	r3, #0
 8001654:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001656:	2300      	movs	r3, #0
 8001658:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001660:	2b01      	cmp	r3, #1
 8001662:	d101      	bne.n	8001668 <HAL_ADC_ConfigChannel+0x20>
 8001664:	2302      	movs	r3, #2
 8001666:	e0dc      	b.n	8001822 <HAL_ADC_ConfigChannel+0x1da>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2b06      	cmp	r3, #6
 8001676:	d81c      	bhi.n	80016b2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	4613      	mov	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4413      	add	r3, r2
 8001688:	3b05      	subs	r3, #5
 800168a:	221f      	movs	r2, #31
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	4019      	ands	r1, r3
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	6818      	ldr	r0, [r3, #0]
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	3b05      	subs	r3, #5
 80016a4:	fa00 f203 	lsl.w	r2, r0, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	430a      	orrs	r2, r1
 80016ae:	635a      	str	r2, [r3, #52]	; 0x34
 80016b0:	e03c      	b.n	800172c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b0c      	cmp	r3, #12
 80016b8:	d81c      	bhi.n	80016f4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	4613      	mov	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	3b23      	subs	r3, #35	; 0x23
 80016cc:	221f      	movs	r2, #31
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43db      	mvns	r3, r3
 80016d4:	4019      	ands	r1, r3
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	6818      	ldr	r0, [r3, #0]
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	4613      	mov	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	3b23      	subs	r3, #35	; 0x23
 80016e6:	fa00 f203 	lsl.w	r2, r0, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	631a      	str	r2, [r3, #48]	; 0x30
 80016f2:	e01b      	b.n	800172c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	4613      	mov	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	3b41      	subs	r3, #65	; 0x41
 8001706:	221f      	movs	r2, #31
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	4019      	ands	r1, r3
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	6818      	ldr	r0, [r3, #0]
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	3b41      	subs	r3, #65	; 0x41
 8001720:	fa00 f203 	lsl.w	r2, r0, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	430a      	orrs	r2, r1
 800172a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b09      	cmp	r3, #9
 8001732:	d91c      	bls.n	800176e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	68d9      	ldr	r1, [r3, #12]
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	4613      	mov	r3, r2
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	4413      	add	r3, r2
 8001744:	3b1e      	subs	r3, #30
 8001746:	2207      	movs	r2, #7
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	4019      	ands	r1, r3
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	6898      	ldr	r0, [r3, #8]
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4613      	mov	r3, r2
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4413      	add	r3, r2
 800175e:	3b1e      	subs	r3, #30
 8001760:	fa00 f203 	lsl.w	r2, r0, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	60da      	str	r2, [r3, #12]
 800176c:	e019      	b.n	80017a2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6919      	ldr	r1, [r3, #16]
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4613      	mov	r3, r2
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	4413      	add	r3, r2
 800177e:	2207      	movs	r2, #7
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	4019      	ands	r1, r3
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	6898      	ldr	r0, [r3, #8]
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4613      	mov	r3, r2
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	4413      	add	r3, r2
 8001796:	fa00 f203 	lsl.w	r2, r0, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	430a      	orrs	r2, r1
 80017a0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b10      	cmp	r3, #16
 80017a8:	d003      	beq.n	80017b2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017ae:	2b11      	cmp	r3, #17
 80017b0:	d132      	bne.n	8001818 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a1d      	ldr	r2, [pc, #116]	; (800182c <HAL_ADC_ConfigChannel+0x1e4>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d125      	bne.n	8001808 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d126      	bne.n	8001818 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80017d8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2b10      	cmp	r3, #16
 80017e0:	d11a      	bne.n	8001818 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017e2:	4b13      	ldr	r3, [pc, #76]	; (8001830 <HAL_ADC_ConfigChannel+0x1e8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a13      	ldr	r2, [pc, #76]	; (8001834 <HAL_ADC_ConfigChannel+0x1ec>)
 80017e8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ec:	0c9a      	lsrs	r2, r3, #18
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017f8:	e002      	b.n	8001800 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f9      	bne.n	80017fa <HAL_ADC_ConfigChannel+0x1b2>
 8001806:	e007      	b.n	8001818 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180c:	f043 0220 	orr.w	r2, r3, #32
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001820:	7bfb      	ldrb	r3, [r7, #15]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr
 800182c:	40012400 	.word	0x40012400
 8001830:	20000010 	.word	0x20000010
 8001834:	431bde83 	.word	0x431bde83

08001838 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001840:	2300      	movs	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b01      	cmp	r3, #1
 8001850:	d127      	bne.n	80018a2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 0201 	bic.w	r2, r2, #1
 8001860:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001862:	f7ff fded 	bl	8001440 <HAL_GetTick>
 8001866:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001868:	e014      	b.n	8001894 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800186a:	f7ff fde9 	bl	8001440 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d90d      	bls.n	8001894 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187c:	f043 0210 	orr.w	r2, r3, #16
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001888:	f043 0201 	orr.w	r2, r3, #1
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e007      	b.n	80018a4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d0e3      	beq.n	800186a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <__NVIC_SetPriorityGrouping+0x44>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018c8:	4013      	ands	r3, r2
 80018ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018de:	4a04      	ldr	r2, [pc, #16]	; (80018f0 <__NVIC_SetPriorityGrouping+0x44>)
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	60d3      	str	r3, [r2, #12]
}
 80018e4:	bf00      	nop
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f8:	4b04      	ldr	r3, [pc, #16]	; (800190c <__NVIC_GetPriorityGrouping+0x18>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	0a1b      	lsrs	r3, r3, #8
 80018fe:	f003 0307 	and.w	r3, r3, #7
}
 8001902:	4618      	mov	r0, r3
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	6039      	str	r1, [r7, #0]
 800191a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001920:	2b00      	cmp	r3, #0
 8001922:	db0a      	blt.n	800193a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	b2da      	uxtb	r2, r3
 8001928:	490c      	ldr	r1, [pc, #48]	; (800195c <__NVIC_SetPriority+0x4c>)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	0112      	lsls	r2, r2, #4
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	440b      	add	r3, r1
 8001934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001938:	e00a      	b.n	8001950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4908      	ldr	r1, [pc, #32]	; (8001960 <__NVIC_SetPriority+0x50>)
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	f003 030f 	and.w	r3, r3, #15
 8001946:	3b04      	subs	r3, #4
 8001948:	0112      	lsls	r2, r2, #4
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	440b      	add	r3, r1
 800194e:	761a      	strb	r2, [r3, #24]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	e000e100 	.word	0xe000e100
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001964:	b480      	push	{r7}
 8001966:	b089      	sub	sp, #36	; 0x24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	f1c3 0307 	rsb	r3, r3, #7
 800197e:	2b04      	cmp	r3, #4
 8001980:	bf28      	it	cs
 8001982:	2304      	movcs	r3, #4
 8001984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3304      	adds	r3, #4
 800198a:	2b06      	cmp	r3, #6
 800198c:	d902      	bls.n	8001994 <NVIC_EncodePriority+0x30>
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3b03      	subs	r3, #3
 8001992:	e000      	b.n	8001996 <NVIC_EncodePriority+0x32>
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001998:	f04f 32ff 	mov.w	r2, #4294967295
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43da      	mvns	r2, r3
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	401a      	ands	r2, r3
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019ac:	f04f 31ff 	mov.w	r1, #4294967295
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	fa01 f303 	lsl.w	r3, r1, r3
 80019b6:	43d9      	mvns	r1, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019bc:	4313      	orrs	r3, r2
         );
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3724      	adds	r7, #36	; 0x24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr

080019c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019d8:	d301      	bcc.n	80019de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019da:	2301      	movs	r3, #1
 80019dc:	e00f      	b.n	80019fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019de:	4a0a      	ldr	r2, [pc, #40]	; (8001a08 <SysTick_Config+0x40>)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019e6:	210f      	movs	r1, #15
 80019e8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ec:	f7ff ff90 	bl	8001910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <SysTick_Config+0x40>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019f6:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <SysTick_Config+0x40>)
 80019f8:	2207      	movs	r2, #7
 80019fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	e000e010 	.word	0xe000e010

08001a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff ff49 	bl	80018ac <__NVIC_SetPriorityGrouping>
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b086      	sub	sp, #24
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	4603      	mov	r3, r0
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
 8001a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a34:	f7ff ff5e 	bl	80018f4 <__NVIC_GetPriorityGrouping>
 8001a38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	68b9      	ldr	r1, [r7, #8]
 8001a3e:	6978      	ldr	r0, [r7, #20]
 8001a40:	f7ff ff90 	bl	8001964 <NVIC_EncodePriority>
 8001a44:	4602      	mov	r2, r0
 8001a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a4a:	4611      	mov	r1, r2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff5f 	bl	8001910 <__NVIC_SetPriority>
}
 8001a52:	bf00      	nop
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff ffb0 	bl	80019c8 <SysTick_Config>
 8001a68:	4603      	mov	r3, r0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b08b      	sub	sp, #44	; 0x2c
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a82:	2300      	movs	r3, #0
 8001a84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a86:	e127      	b.n	8001cd8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a88:	2201      	movs	r2, #1
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	69fa      	ldr	r2, [r7, #28]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	f040 8116 	bne.w	8001cd2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b12      	cmp	r3, #18
 8001aac:	d034      	beq.n	8001b18 <HAL_GPIO_Init+0xa4>
 8001aae:	2b12      	cmp	r3, #18
 8001ab0:	d80d      	bhi.n	8001ace <HAL_GPIO_Init+0x5a>
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d02b      	beq.n	8001b0e <HAL_GPIO_Init+0x9a>
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d804      	bhi.n	8001ac4 <HAL_GPIO_Init+0x50>
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d031      	beq.n	8001b22 <HAL_GPIO_Init+0xae>
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d01c      	beq.n	8001afc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ac2:	e048      	b.n	8001b56 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ac4:	2b03      	cmp	r3, #3
 8001ac6:	d043      	beq.n	8001b50 <HAL_GPIO_Init+0xdc>
 8001ac8:	2b11      	cmp	r3, #17
 8001aca:	d01b      	beq.n	8001b04 <HAL_GPIO_Init+0x90>
          break;
 8001acc:	e043      	b.n	8001b56 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ace:	4a89      	ldr	r2, [pc, #548]	; (8001cf4 <HAL_GPIO_Init+0x280>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d026      	beq.n	8001b22 <HAL_GPIO_Init+0xae>
 8001ad4:	4a87      	ldr	r2, [pc, #540]	; (8001cf4 <HAL_GPIO_Init+0x280>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d806      	bhi.n	8001ae8 <HAL_GPIO_Init+0x74>
 8001ada:	4a87      	ldr	r2, [pc, #540]	; (8001cf8 <HAL_GPIO_Init+0x284>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d020      	beq.n	8001b22 <HAL_GPIO_Init+0xae>
 8001ae0:	4a86      	ldr	r2, [pc, #536]	; (8001cfc <HAL_GPIO_Init+0x288>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d01d      	beq.n	8001b22 <HAL_GPIO_Init+0xae>
          break;
 8001ae6:	e036      	b.n	8001b56 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ae8:	4a85      	ldr	r2, [pc, #532]	; (8001d00 <HAL_GPIO_Init+0x28c>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d019      	beq.n	8001b22 <HAL_GPIO_Init+0xae>
 8001aee:	4a85      	ldr	r2, [pc, #532]	; (8001d04 <HAL_GPIO_Init+0x290>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d016      	beq.n	8001b22 <HAL_GPIO_Init+0xae>
 8001af4:	4a84      	ldr	r2, [pc, #528]	; (8001d08 <HAL_GPIO_Init+0x294>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d013      	beq.n	8001b22 <HAL_GPIO_Init+0xae>
          break;
 8001afa:	e02c      	b.n	8001b56 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	623b      	str	r3, [r7, #32]
          break;
 8001b02:	e028      	b.n	8001b56 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	3304      	adds	r3, #4
 8001b0a:	623b      	str	r3, [r7, #32]
          break;
 8001b0c:	e023      	b.n	8001b56 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	3308      	adds	r3, #8
 8001b14:	623b      	str	r3, [r7, #32]
          break;
 8001b16:	e01e      	b.n	8001b56 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	330c      	adds	r3, #12
 8001b1e:	623b      	str	r3, [r7, #32]
          break;
 8001b20:	e019      	b.n	8001b56 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d102      	bne.n	8001b30 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b2a:	2304      	movs	r3, #4
 8001b2c:	623b      	str	r3, [r7, #32]
          break;
 8001b2e:	e012      	b.n	8001b56 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d105      	bne.n	8001b44 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b38:	2308      	movs	r3, #8
 8001b3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	69fa      	ldr	r2, [r7, #28]
 8001b40:	611a      	str	r2, [r3, #16]
          break;
 8001b42:	e008      	b.n	8001b56 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b44:	2308      	movs	r3, #8
 8001b46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69fa      	ldr	r2, [r7, #28]
 8001b4c:	615a      	str	r2, [r3, #20]
          break;
 8001b4e:	e002      	b.n	8001b56 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b50:	2300      	movs	r3, #0
 8001b52:	623b      	str	r3, [r7, #32]
          break;
 8001b54:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	2bff      	cmp	r3, #255	; 0xff
 8001b5a:	d801      	bhi.n	8001b60 <HAL_GPIO_Init+0xec>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	e001      	b.n	8001b64 <HAL_GPIO_Init+0xf0>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3304      	adds	r3, #4
 8001b64:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	2bff      	cmp	r3, #255	; 0xff
 8001b6a:	d802      	bhi.n	8001b72 <HAL_GPIO_Init+0xfe>
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	e002      	b.n	8001b78 <HAL_GPIO_Init+0x104>
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	3b08      	subs	r3, #8
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	210f      	movs	r1, #15
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	fa01 f303 	lsl.w	r3, r1, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	401a      	ands	r2, r3
 8001b8a:	6a39      	ldr	r1, [r7, #32]
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b92:	431a      	orrs	r2, r3
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 8096 	beq.w	8001cd2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ba6:	4b59      	ldr	r3, [pc, #356]	; (8001d0c <HAL_GPIO_Init+0x298>)
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	4a58      	ldr	r2, [pc, #352]	; (8001d0c <HAL_GPIO_Init+0x298>)
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	6193      	str	r3, [r2, #24]
 8001bb2:	4b56      	ldr	r3, [pc, #344]	; (8001d0c <HAL_GPIO_Init+0x298>)
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	60bb      	str	r3, [r7, #8]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bbe:	4a54      	ldr	r2, [pc, #336]	; (8001d10 <HAL_GPIO_Init+0x29c>)
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	089b      	lsrs	r3, r3, #2
 8001bc4:	3302      	adds	r3, #2
 8001bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bca:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	220f      	movs	r2, #15
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	4013      	ands	r3, r2
 8001be0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a4b      	ldr	r2, [pc, #300]	; (8001d14 <HAL_GPIO_Init+0x2a0>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d013      	beq.n	8001c12 <HAL_GPIO_Init+0x19e>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a4a      	ldr	r2, [pc, #296]	; (8001d18 <HAL_GPIO_Init+0x2a4>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d00d      	beq.n	8001c0e <HAL_GPIO_Init+0x19a>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a49      	ldr	r2, [pc, #292]	; (8001d1c <HAL_GPIO_Init+0x2a8>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d007      	beq.n	8001c0a <HAL_GPIO_Init+0x196>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a48      	ldr	r2, [pc, #288]	; (8001d20 <HAL_GPIO_Init+0x2ac>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d101      	bne.n	8001c06 <HAL_GPIO_Init+0x192>
 8001c02:	2303      	movs	r3, #3
 8001c04:	e006      	b.n	8001c14 <HAL_GPIO_Init+0x1a0>
 8001c06:	2304      	movs	r3, #4
 8001c08:	e004      	b.n	8001c14 <HAL_GPIO_Init+0x1a0>
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	e002      	b.n	8001c14 <HAL_GPIO_Init+0x1a0>
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e000      	b.n	8001c14 <HAL_GPIO_Init+0x1a0>
 8001c12:	2300      	movs	r3, #0
 8001c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c16:	f002 0203 	and.w	r2, r2, #3
 8001c1a:	0092      	lsls	r2, r2, #2
 8001c1c:	4093      	lsls	r3, r2
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c24:	493a      	ldr	r1, [pc, #232]	; (8001d10 <HAL_GPIO_Init+0x29c>)
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	089b      	lsrs	r3, r3, #2
 8001c2a:	3302      	adds	r3, #2
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d006      	beq.n	8001c4c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c3e:	4b39      	ldr	r3, [pc, #228]	; (8001d24 <HAL_GPIO_Init+0x2b0>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	4938      	ldr	r1, [pc, #224]	; (8001d24 <HAL_GPIO_Init+0x2b0>)
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	600b      	str	r3, [r1, #0]
 8001c4a:	e006      	b.n	8001c5a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c4c:	4b35      	ldr	r3, [pc, #212]	; (8001d24 <HAL_GPIO_Init+0x2b0>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	43db      	mvns	r3, r3
 8001c54:	4933      	ldr	r1, [pc, #204]	; (8001d24 <HAL_GPIO_Init+0x2b0>)
 8001c56:	4013      	ands	r3, r2
 8001c58:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d006      	beq.n	8001c74 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c66:	4b2f      	ldr	r3, [pc, #188]	; (8001d24 <HAL_GPIO_Init+0x2b0>)
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	492e      	ldr	r1, [pc, #184]	; (8001d24 <HAL_GPIO_Init+0x2b0>)
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	604b      	str	r3, [r1, #4]
 8001c72:	e006      	b.n	8001c82 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c74:	4b2b      	ldr	r3, [pc, #172]	; (8001d24 <HAL_GPIO_Init+0x2b0>)
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	4929      	ldr	r1, [pc, #164]	; (8001d24 <HAL_GPIO_Init+0x2b0>)
 8001c7e:	4013      	ands	r3, r2
 8001c80:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d006      	beq.n	8001c9c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c8e:	4b25      	ldr	r3, [pc, #148]	; (8001d24 <HAL_GPIO_Init+0x2b0>)
 8001c90:	689a      	ldr	r2, [r3, #8]
 8001c92:	4924      	ldr	r1, [pc, #144]	; (8001d24 <HAL_GPIO_Init+0x2b0>)
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	608b      	str	r3, [r1, #8]
 8001c9a:	e006      	b.n	8001caa <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c9c:	4b21      	ldr	r3, [pc, #132]	; (8001d24 <HAL_GPIO_Init+0x2b0>)
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	491f      	ldr	r1, [pc, #124]	; (8001d24 <HAL_GPIO_Init+0x2b0>)
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d006      	beq.n	8001cc4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cb6:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <HAL_GPIO_Init+0x2b0>)
 8001cb8:	68da      	ldr	r2, [r3, #12]
 8001cba:	491a      	ldr	r1, [pc, #104]	; (8001d24 <HAL_GPIO_Init+0x2b0>)
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	60cb      	str	r3, [r1, #12]
 8001cc2:	e006      	b.n	8001cd2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cc4:	4b17      	ldr	r3, [pc, #92]	; (8001d24 <HAL_GPIO_Init+0x2b0>)
 8001cc6:	68da      	ldr	r2, [r3, #12]
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	4915      	ldr	r1, [pc, #84]	; (8001d24 <HAL_GPIO_Init+0x2b0>)
 8001cce:	4013      	ands	r3, r2
 8001cd0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f47f aed0 	bne.w	8001a88 <HAL_GPIO_Init+0x14>
  }
}
 8001ce8:	bf00      	nop
 8001cea:	372c      	adds	r7, #44	; 0x2c
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	10210000 	.word	0x10210000
 8001cf8:	10110000 	.word	0x10110000
 8001cfc:	10120000 	.word	0x10120000
 8001d00:	10310000 	.word	0x10310000
 8001d04:	10320000 	.word	0x10320000
 8001d08:	10220000 	.word	0x10220000
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40010000 	.word	0x40010000
 8001d14:	40010800 	.word	0x40010800
 8001d18:	40010c00 	.word	0x40010c00
 8001d1c:	40011000 	.word	0x40011000
 8001d20:	40011400 	.word	0x40011400
 8001d24:	40010400 	.word	0x40010400

08001d28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	887b      	ldrh	r3, [r7, #2]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d002      	beq.n	8001d46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d40:	2301      	movs	r3, #1
 8001d42:	73fb      	strb	r3, [r7, #15]
 8001d44:	e001      	b.n	8001d4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d46:	2300      	movs	r3, #0
 8001d48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr

08001d56 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
 8001d5e:	460b      	mov	r3, r1
 8001d60:	807b      	strh	r3, [r7, #2]
 8001d62:	4613      	mov	r3, r2
 8001d64:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d66:	787b      	ldrb	r3, [r7, #1]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d6c:	887a      	ldrh	r2, [r7, #2]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d72:	e003      	b.n	8001d7c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d74:	887b      	ldrh	r3, [r7, #2]
 8001d76:	041a      	lsls	r2, r3, #16
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	611a      	str	r2, [r3, #16]
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr
	...

08001d88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e26c      	b.n	8002274 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 8087 	beq.w	8001eb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001da8:	4b92      	ldr	r3, [pc, #584]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 030c 	and.w	r3, r3, #12
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	d00c      	beq.n	8001dce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001db4:	4b8f      	ldr	r3, [pc, #572]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 030c 	and.w	r3, r3, #12
 8001dbc:	2b08      	cmp	r3, #8
 8001dbe:	d112      	bne.n	8001de6 <HAL_RCC_OscConfig+0x5e>
 8001dc0:	4b8c      	ldr	r3, [pc, #560]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dcc:	d10b      	bne.n	8001de6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dce:	4b89      	ldr	r3, [pc, #548]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d06c      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x12c>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d168      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e246      	b.n	8002274 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dee:	d106      	bne.n	8001dfe <HAL_RCC_OscConfig+0x76>
 8001df0:	4b80      	ldr	r3, [pc, #512]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a7f      	ldr	r2, [pc, #508]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dfa:	6013      	str	r3, [r2, #0]
 8001dfc:	e02e      	b.n	8001e5c <HAL_RCC_OscConfig+0xd4>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10c      	bne.n	8001e20 <HAL_RCC_OscConfig+0x98>
 8001e06:	4b7b      	ldr	r3, [pc, #492]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a7a      	ldr	r2, [pc, #488]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e10:	6013      	str	r3, [r2, #0]
 8001e12:	4b78      	ldr	r3, [pc, #480]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a77      	ldr	r2, [pc, #476]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e1c:	6013      	str	r3, [r2, #0]
 8001e1e:	e01d      	b.n	8001e5c <HAL_RCC_OscConfig+0xd4>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e28:	d10c      	bne.n	8001e44 <HAL_RCC_OscConfig+0xbc>
 8001e2a:	4b72      	ldr	r3, [pc, #456]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a71      	ldr	r2, [pc, #452]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	4b6f      	ldr	r3, [pc, #444]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a6e      	ldr	r2, [pc, #440]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e40:	6013      	str	r3, [r2, #0]
 8001e42:	e00b      	b.n	8001e5c <HAL_RCC_OscConfig+0xd4>
 8001e44:	4b6b      	ldr	r3, [pc, #428]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a6a      	ldr	r2, [pc, #424]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	4b68      	ldr	r3, [pc, #416]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a67      	ldr	r2, [pc, #412]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d013      	beq.n	8001e8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e64:	f7ff faec 	bl	8001440 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e6c:	f7ff fae8 	bl	8001440 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b64      	cmp	r3, #100	; 0x64
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e1fa      	b.n	8002274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7e:	4b5d      	ldr	r3, [pc, #372]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0f0      	beq.n	8001e6c <HAL_RCC_OscConfig+0xe4>
 8001e8a:	e014      	b.n	8001eb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8c:	f7ff fad8 	bl	8001440 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e94:	f7ff fad4 	bl	8001440 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b64      	cmp	r3, #100	; 0x64
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e1e6      	b.n	8002274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ea6:	4b53      	ldr	r3, [pc, #332]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f0      	bne.n	8001e94 <HAL_RCC_OscConfig+0x10c>
 8001eb2:	e000      	b.n	8001eb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d063      	beq.n	8001f8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ec2:	4b4c      	ldr	r3, [pc, #304]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 030c 	and.w	r3, r3, #12
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00b      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ece:	4b49      	ldr	r3, [pc, #292]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f003 030c 	and.w	r3, r3, #12
 8001ed6:	2b08      	cmp	r3, #8
 8001ed8:	d11c      	bne.n	8001f14 <HAL_RCC_OscConfig+0x18c>
 8001eda:	4b46      	ldr	r3, [pc, #280]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d116      	bne.n	8001f14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ee6:	4b43      	ldr	r3, [pc, #268]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d005      	beq.n	8001efe <HAL_RCC_OscConfig+0x176>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d001      	beq.n	8001efe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e1ba      	b.n	8002274 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001efe:	4b3d      	ldr	r3, [pc, #244]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	4939      	ldr	r1, [pc, #228]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f12:	e03a      	b.n	8001f8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d020      	beq.n	8001f5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f1c:	4b36      	ldr	r3, [pc, #216]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f22:	f7ff fa8d 	bl	8001440 <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f2a:	f7ff fa89 	bl	8001440 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e19b      	b.n	8002274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3c:	4b2d      	ldr	r3, [pc, #180]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0f0      	beq.n	8001f2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f48:	4b2a      	ldr	r3, [pc, #168]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	4927      	ldr	r1, [pc, #156]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	600b      	str	r3, [r1, #0]
 8001f5c:	e015      	b.n	8001f8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f5e:	4b26      	ldr	r3, [pc, #152]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f64:	f7ff fa6c 	bl	8001440 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f6c:	f7ff fa68 	bl	8001440 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e17a      	b.n	8002274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f7e:	4b1d      	ldr	r3, [pc, #116]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f0      	bne.n	8001f6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d03a      	beq.n	800200c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d019      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f9e:	4b17      	ldr	r3, [pc, #92]	; (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa4:	f7ff fa4c 	bl	8001440 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fac:	f7ff fa48 	bl	8001440 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e15a      	b.n	8002274 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fbe:	4b0d      	ldr	r3, [pc, #52]	; (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0f0      	beq.n	8001fac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fca:	2001      	movs	r0, #1
 8001fcc:	f000 faaa 	bl	8002524 <RCC_Delay>
 8001fd0:	e01c      	b.n	800200c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fd2:	4b0a      	ldr	r3, [pc, #40]	; (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd8:	f7ff fa32 	bl	8001440 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fde:	e00f      	b.n	8002000 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fe0:	f7ff fa2e 	bl	8001440 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d908      	bls.n	8002000 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e140      	b.n	8002274 <HAL_RCC_OscConfig+0x4ec>
 8001ff2:	bf00      	nop
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	42420000 	.word	0x42420000
 8001ffc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002000:	4b9e      	ldr	r3, [pc, #632]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 8002002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1e9      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b00      	cmp	r3, #0
 8002016:	f000 80a6 	beq.w	8002166 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800201a:	2300      	movs	r3, #0
 800201c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800201e:	4b97      	ldr	r3, [pc, #604]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10d      	bne.n	8002046 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800202a:	4b94      	ldr	r3, [pc, #592]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	4a93      	ldr	r2, [pc, #588]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 8002030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002034:	61d3      	str	r3, [r2, #28]
 8002036:	4b91      	ldr	r3, [pc, #580]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203e:	60bb      	str	r3, [r7, #8]
 8002040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002042:	2301      	movs	r3, #1
 8002044:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002046:	4b8e      	ldr	r3, [pc, #568]	; (8002280 <HAL_RCC_OscConfig+0x4f8>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204e:	2b00      	cmp	r3, #0
 8002050:	d118      	bne.n	8002084 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002052:	4b8b      	ldr	r3, [pc, #556]	; (8002280 <HAL_RCC_OscConfig+0x4f8>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a8a      	ldr	r2, [pc, #552]	; (8002280 <HAL_RCC_OscConfig+0x4f8>)
 8002058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800205c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800205e:	f7ff f9ef 	bl	8001440 <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002066:	f7ff f9eb 	bl	8001440 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b64      	cmp	r3, #100	; 0x64
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e0fd      	b.n	8002274 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002078:	4b81      	ldr	r3, [pc, #516]	; (8002280 <HAL_RCC_OscConfig+0x4f8>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0f0      	beq.n	8002066 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d106      	bne.n	800209a <HAL_RCC_OscConfig+0x312>
 800208c:	4b7b      	ldr	r3, [pc, #492]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	4a7a      	ldr	r2, [pc, #488]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	6213      	str	r3, [r2, #32]
 8002098:	e02d      	b.n	80020f6 <HAL_RCC_OscConfig+0x36e>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10c      	bne.n	80020bc <HAL_RCC_OscConfig+0x334>
 80020a2:	4b76      	ldr	r3, [pc, #472]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	4a75      	ldr	r2, [pc, #468]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 80020a8:	f023 0301 	bic.w	r3, r3, #1
 80020ac:	6213      	str	r3, [r2, #32]
 80020ae:	4b73      	ldr	r3, [pc, #460]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	4a72      	ldr	r2, [pc, #456]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 80020b4:	f023 0304 	bic.w	r3, r3, #4
 80020b8:	6213      	str	r3, [r2, #32]
 80020ba:	e01c      	b.n	80020f6 <HAL_RCC_OscConfig+0x36e>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	2b05      	cmp	r3, #5
 80020c2:	d10c      	bne.n	80020de <HAL_RCC_OscConfig+0x356>
 80020c4:	4b6d      	ldr	r3, [pc, #436]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	4a6c      	ldr	r2, [pc, #432]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 80020ca:	f043 0304 	orr.w	r3, r3, #4
 80020ce:	6213      	str	r3, [r2, #32]
 80020d0:	4b6a      	ldr	r3, [pc, #424]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	4a69      	ldr	r2, [pc, #420]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	6213      	str	r3, [r2, #32]
 80020dc:	e00b      	b.n	80020f6 <HAL_RCC_OscConfig+0x36e>
 80020de:	4b67      	ldr	r3, [pc, #412]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	4a66      	ldr	r2, [pc, #408]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 80020e4:	f023 0301 	bic.w	r3, r3, #1
 80020e8:	6213      	str	r3, [r2, #32]
 80020ea:	4b64      	ldr	r3, [pc, #400]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	4a63      	ldr	r2, [pc, #396]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 80020f0:	f023 0304 	bic.w	r3, r3, #4
 80020f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d015      	beq.n	800212a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020fe:	f7ff f99f 	bl	8001440 <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002104:	e00a      	b.n	800211c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002106:	f7ff f99b 	bl	8001440 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	f241 3288 	movw	r2, #5000	; 0x1388
 8002114:	4293      	cmp	r3, r2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e0ab      	b.n	8002274 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800211c:	4b57      	ldr	r3, [pc, #348]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0ee      	beq.n	8002106 <HAL_RCC_OscConfig+0x37e>
 8002128:	e014      	b.n	8002154 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800212a:	f7ff f989 	bl	8001440 <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002130:	e00a      	b.n	8002148 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002132:	f7ff f985 	bl	8001440 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002140:	4293      	cmp	r3, r2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e095      	b.n	8002274 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002148:	4b4c      	ldr	r3, [pc, #304]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1ee      	bne.n	8002132 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002154:	7dfb      	ldrb	r3, [r7, #23]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d105      	bne.n	8002166 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800215a:	4b48      	ldr	r3, [pc, #288]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	4a47      	ldr	r2, [pc, #284]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 8002160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002164:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 8081 	beq.w	8002272 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002170:	4b42      	ldr	r3, [pc, #264]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 030c 	and.w	r3, r3, #12
 8002178:	2b08      	cmp	r3, #8
 800217a:	d061      	beq.n	8002240 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	2b02      	cmp	r3, #2
 8002182:	d146      	bne.n	8002212 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002184:	4b3f      	ldr	r3, [pc, #252]	; (8002284 <HAL_RCC_OscConfig+0x4fc>)
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218a:	f7ff f959 	bl	8001440 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002192:	f7ff f955 	bl	8001440 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e067      	b.n	8002274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a4:	4b35      	ldr	r3, [pc, #212]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1f0      	bne.n	8002192 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021b8:	d108      	bne.n	80021cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021ba:	4b30      	ldr	r3, [pc, #192]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 80021bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021be:	f023 020f 	bic.w	r2, r3, #15
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	492d      	ldr	r1, [pc, #180]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021cc:	4b2b      	ldr	r3, [pc, #172]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a19      	ldr	r1, [r3, #32]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	430b      	orrs	r3, r1
 80021de:	4927      	ldr	r1, [pc, #156]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021e4:	4b27      	ldr	r3, [pc, #156]	; (8002284 <HAL_RCC_OscConfig+0x4fc>)
 80021e6:	2201      	movs	r2, #1
 80021e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ea:	f7ff f929 	bl	8001440 <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f2:	f7ff f925 	bl	8001440 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e037      	b.n	8002274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002204:	4b1d      	ldr	r3, [pc, #116]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0f0      	beq.n	80021f2 <HAL_RCC_OscConfig+0x46a>
 8002210:	e02f      	b.n	8002272 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002212:	4b1c      	ldr	r3, [pc, #112]	; (8002284 <HAL_RCC_OscConfig+0x4fc>)
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002218:	f7ff f912 	bl	8001440 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002220:	f7ff f90e 	bl	8001440 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e020      	b.n	8002274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002232:	4b12      	ldr	r3, [pc, #72]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f0      	bne.n	8002220 <HAL_RCC_OscConfig+0x498>
 800223e:	e018      	b.n	8002272 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d101      	bne.n	800224c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e013      	b.n	8002274 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800224c:	4b0b      	ldr	r3, [pc, #44]	; (800227c <HAL_RCC_OscConfig+0x4f4>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	429a      	cmp	r2, r3
 800225e:	d106      	bne.n	800226e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226a:	429a      	cmp	r2, r3
 800226c:	d001      	beq.n	8002272 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40021000 	.word	0x40021000
 8002280:	40007000 	.word	0x40007000
 8002284:	42420060 	.word	0x42420060

08002288 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e0a0      	b.n	80023de <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d020      	beq.n	80022ea <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d005      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022b4:	4b4c      	ldr	r3, [pc, #304]	; (80023e8 <HAL_RCC_ClockConfig+0x160>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	4a4b      	ldr	r2, [pc, #300]	; (80023e8 <HAL_RCC_ClockConfig+0x160>)
 80022ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0308 	and.w	r3, r3, #8
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d005      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022cc:	4b46      	ldr	r3, [pc, #280]	; (80023e8 <HAL_RCC_ClockConfig+0x160>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	4a45      	ldr	r2, [pc, #276]	; (80023e8 <HAL_RCC_ClockConfig+0x160>)
 80022d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022d8:	4b43      	ldr	r3, [pc, #268]	; (80023e8 <HAL_RCC_ClockConfig+0x160>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	4940      	ldr	r1, [pc, #256]	; (80023e8 <HAL_RCC_ClockConfig+0x160>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d040      	beq.n	8002378 <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d107      	bne.n	800230e <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fe:	4b3a      	ldr	r3, [pc, #232]	; (80023e8 <HAL_RCC_ClockConfig+0x160>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d115      	bne.n	8002336 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e067      	b.n	80023de <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d107      	bne.n	8002326 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002316:	4b34      	ldr	r3, [pc, #208]	; (80023e8 <HAL_RCC_ClockConfig+0x160>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d109      	bne.n	8002336 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e05b      	b.n	80023de <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002326:	4b30      	ldr	r3, [pc, #192]	; (80023e8 <HAL_RCC_ClockConfig+0x160>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e053      	b.n	80023de <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002336:	4b2c      	ldr	r3, [pc, #176]	; (80023e8 <HAL_RCC_ClockConfig+0x160>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f023 0203 	bic.w	r2, r3, #3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	4929      	ldr	r1, [pc, #164]	; (80023e8 <HAL_RCC_ClockConfig+0x160>)
 8002344:	4313      	orrs	r3, r2
 8002346:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002348:	f7ff f87a 	bl	8001440 <HAL_GetTick>
 800234c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234e:	e00a      	b.n	8002366 <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002350:	f7ff f876 	bl	8001440 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	f241 3288 	movw	r2, #5000	; 0x1388
 800235e:	4293      	cmp	r3, r2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e03b      	b.n	80023de <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002366:	4b20      	ldr	r3, [pc, #128]	; (80023e8 <HAL_RCC_ClockConfig+0x160>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f003 020c 	and.w	r2, r3, #12
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	429a      	cmp	r2, r3
 8002376:	d1eb      	bne.n	8002350 <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	d008      	beq.n	8002396 <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002384:	4b18      	ldr	r3, [pc, #96]	; (80023e8 <HAL_RCC_ClockConfig+0x160>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4915      	ldr	r1, [pc, #84]	; (80023e8 <HAL_RCC_ClockConfig+0x160>)
 8002392:	4313      	orrs	r3, r2
 8002394:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0308 	and.w	r3, r3, #8
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d009      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023a2:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <HAL_RCC_ClockConfig+0x160>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	490d      	ldr	r1, [pc, #52]	; (80023e8 <HAL_RCC_ClockConfig+0x160>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023b6:	f000 f81f 	bl	80023f8 <HAL_RCC_GetSysClockFreq>
 80023ba:	4601      	mov	r1, r0
 80023bc:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <HAL_RCC_ClockConfig+0x160>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	091b      	lsrs	r3, r3, #4
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	4a09      	ldr	r2, [pc, #36]	; (80023ec <HAL_RCC_ClockConfig+0x164>)
 80023c8:	5cd3      	ldrb	r3, [r2, r3]
 80023ca:	fa21 f303 	lsr.w	r3, r1, r3
 80023ce:	4a08      	ldr	r2, [pc, #32]	; (80023f0 <HAL_RCC_ClockConfig+0x168>)
 80023d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023d2:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <HAL_RCC_ClockConfig+0x16c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7fe fff0 	bl	80013bc <HAL_InitTick>

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40021000 	.word	0x40021000
 80023ec:	08004570 	.word	0x08004570
 80023f0:	20000010 	.word	0x20000010
 80023f4:	20000014 	.word	0x20000014

080023f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023f8:	b490      	push	{r4, r7}
 80023fa:	b08e      	sub	sp, #56	; 0x38
 80023fc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023fe:	4b2b      	ldr	r3, [pc, #172]	; (80024ac <HAL_RCC_GetSysClockFreq+0xb4>)
 8002400:	f107 0414 	add.w	r4, r7, #20
 8002404:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002406:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 800240a:	4b29      	ldr	r3, [pc, #164]	; (80024b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800240c:	1d3c      	adds	r4, r7, #4
 800240e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002410:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002414:	2300      	movs	r3, #0
 8002416:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002418:	2300      	movs	r3, #0
 800241a:	62bb      	str	r3, [r7, #40]	; 0x28
 800241c:	2300      	movs	r3, #0
 800241e:	637b      	str	r3, [r7, #52]	; 0x34
 8002420:	2300      	movs	r3, #0
 8002422:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002428:	4b22      	ldr	r3, [pc, #136]	; (80024b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800242e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002430:	f003 030c 	and.w	r3, r3, #12
 8002434:	2b04      	cmp	r3, #4
 8002436:	d002      	beq.n	800243e <HAL_RCC_GetSysClockFreq+0x46>
 8002438:	2b08      	cmp	r3, #8
 800243a:	d003      	beq.n	8002444 <HAL_RCC_GetSysClockFreq+0x4c>
 800243c:	e02c      	b.n	8002498 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800243e:	4b1e      	ldr	r3, [pc, #120]	; (80024b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002440:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002442:	e02c      	b.n	800249e <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002446:	0c9b      	lsrs	r3, r3, #18
 8002448:	f003 030f 	and.w	r3, r3, #15
 800244c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002450:	4413      	add	r3, r2
 8002452:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002456:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800245a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d012      	beq.n	8002488 <HAL_RCC_GetSysClockFreq+0x90>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002462:	4b14      	ldr	r3, [pc, #80]	; (80024b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800246e:	4413      	add	r3, r2
 8002470:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8002474:	62bb      	str	r3, [r7, #40]	; 0x28
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	4a0f      	ldr	r2, [pc, #60]	; (80024b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800247a:	fb02 f203 	mul.w	r2, r2, r3
 800247e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002480:	fbb2 f3f3 	udiv	r3, r2, r3
 8002484:	637b      	str	r3, [r7, #52]	; 0x34
 8002486:	e004      	b.n	8002492 <HAL_RCC_GetSysClockFreq+0x9a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	4a0c      	ldr	r2, [pc, #48]	; (80024bc <HAL_RCC_GetSysClockFreq+0xc4>)
 800248c:	fb02 f303 	mul.w	r3, r2, r3
 8002490:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 8002492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002494:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002496:	e002      	b.n	800249e <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002498:	4b07      	ldr	r3, [pc, #28]	; (80024b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800249a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800249c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800249e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3738      	adds	r7, #56	; 0x38
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc90      	pop	{r4, r7}
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	08004530 	.word	0x08004530
 80024b0:	08004540 	.word	0x08004540
 80024b4:	40021000 	.word	0x40021000
 80024b8:	007a1200 	.word	0x007a1200
 80024bc:	003d0900 	.word	0x003d0900

080024c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024c4:	4b02      	ldr	r3, [pc, #8]	; (80024d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80024c6:	681b      	ldr	r3, [r3, #0]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr
 80024d0:	20000010 	.word	0x20000010

080024d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024d8:	f7ff fff2 	bl	80024c0 <HAL_RCC_GetHCLKFreq>
 80024dc:	4601      	mov	r1, r0
 80024de:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	0a1b      	lsrs	r3, r3, #8
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	4a03      	ldr	r2, [pc, #12]	; (80024f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024ea:	5cd3      	ldrb	r3, [r2, r3]
 80024ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40021000 	.word	0x40021000
 80024f8:	08004580 	.word	0x08004580

080024fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002500:	f7ff ffde 	bl	80024c0 <HAL_RCC_GetHCLKFreq>
 8002504:	4601      	mov	r1, r0
 8002506:	4b05      	ldr	r3, [pc, #20]	; (800251c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	0adb      	lsrs	r3, r3, #11
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	4a03      	ldr	r2, [pc, #12]	; (8002520 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002512:	5cd3      	ldrb	r3, [r2, r3]
 8002514:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002518:	4618      	mov	r0, r3
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40021000 	.word	0x40021000
 8002520:	08004580 	.word	0x08004580

08002524 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800252c:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <RCC_Delay+0x34>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a0a      	ldr	r2, [pc, #40]	; (800255c <RCC_Delay+0x38>)
 8002532:	fba2 2303 	umull	r2, r3, r2, r3
 8002536:	0a5b      	lsrs	r3, r3, #9
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	fb02 f303 	mul.w	r3, r2, r3
 800253e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002540:	bf00      	nop
  }
  while (Delay --);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	1e5a      	subs	r2, r3, #1
 8002546:	60fa      	str	r2, [r7, #12]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1f9      	bne.n	8002540 <RCC_Delay+0x1c>
}
 800254c:	bf00      	nop
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	bc80      	pop	{r7}
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	20000010 	.word	0x20000010
 800255c:	10624dd3 	.word	0x10624dd3

08002560 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002568:	2300      	movs	r3, #0
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	2300      	movs	r3, #0
 800256e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	d07d      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800257c:	2300      	movs	r3, #0
 800257e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002580:	4b47      	ldr	r3, [pc, #284]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10d      	bne.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800258c:	4b44      	ldr	r3, [pc, #272]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800258e:	69db      	ldr	r3, [r3, #28]
 8002590:	4a43      	ldr	r2, [pc, #268]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002596:	61d3      	str	r3, [r2, #28]
 8002598:	4b41      	ldr	r3, [pc, #260]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800259a:	69db      	ldr	r3, [r3, #28]
 800259c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a0:	60bb      	str	r3, [r7, #8]
 80025a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025a4:	2301      	movs	r3, #1
 80025a6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a8:	4b3e      	ldr	r3, [pc, #248]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d118      	bne.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025b4:	4b3b      	ldr	r3, [pc, #236]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a3a      	ldr	r2, [pc, #232]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80025ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025c0:	f7fe ff3e 	bl	8001440 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c6:	e008      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025c8:	f7fe ff3a 	bl	8001440 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b64      	cmp	r3, #100	; 0x64
 80025d4:	d901      	bls.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e05e      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x138>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025da:	4b32      	ldr	r3, [pc, #200]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0f0      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025e6:	4b2e      	ldr	r3, [pc, #184]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d02e      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	429a      	cmp	r2, r3
 8002602:	d027      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002604:	4b26      	ldr	r3, [pc, #152]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800260c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800260e:	4b26      	ldr	r3, [pc, #152]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002610:	2201      	movs	r2, #1
 8002612:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002614:	4b24      	ldr	r3, [pc, #144]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800261a:	4a21      	ldr	r2, [pc, #132]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d014      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262a:	f7fe ff09 	bl	8001440 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002630:	e00a      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002632:	f7fe ff05 	bl	8001440 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002640:	4293      	cmp	r3, r2
 8002642:	d901      	bls.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e027      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x138>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002648:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0ee      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002654:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	490f      	ldr	r1, [pc, #60]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002662:	4313      	orrs	r3, r2
 8002664:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002666:	7dfb      	ldrb	r3, [r7, #23]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d105      	bne.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800266c:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	4a0b      	ldr	r2, [pc, #44]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002672:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002676:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d008      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002684:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	4903      	ldr	r1, [pc, #12]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002692:	4313      	orrs	r3, r2
 8002694:	604b      	str	r3, [r1, #4]
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40021000 	.word	0x40021000
 80026a4:	40007000 	.word	0x40007000
 80026a8:	42420440 	.word	0x42420440

080026ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e04b      	b.n	8002756 <HAL_SPI_Init+0xaa>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d106      	bne.n	80026de <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f7fe fcad 	bl	8001038 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2202      	movs	r2, #2
 80026e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026f4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	431a      	orrs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	431a      	orrs	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	431a      	orrs	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	ea42 0103 	orr.w	r1, r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	0c1a      	lsrs	r2, r3, #16
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f002 0204 	and.w	r2, r2, #4
 8002744:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b088      	sub	sp, #32
 8002762:	af00      	add	r7, sp, #0
 8002764:	60f8      	str	r0, [r7, #12]
 8002766:	60b9      	str	r1, [r7, #8]
 8002768:	603b      	str	r3, [r7, #0]
 800276a:	4613      	mov	r3, r2
 800276c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002778:	2b01      	cmp	r3, #1
 800277a:	d101      	bne.n	8002780 <HAL_SPI_Transmit+0x22>
 800277c:	2302      	movs	r3, #2
 800277e:	e11e      	b.n	80029be <HAL_SPI_Transmit+0x260>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002788:	f7fe fe5a 	bl	8001440 <HAL_GetTick>
 800278c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800278e:	88fb      	ldrh	r3, [r7, #6]
 8002790:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b01      	cmp	r3, #1
 800279c:	d002      	beq.n	80027a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800279e:	2302      	movs	r3, #2
 80027a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027a2:	e103      	b.n	80029ac <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d002      	beq.n	80027b0 <HAL_SPI_Transmit+0x52>
 80027aa:	88fb      	ldrh	r3, [r7, #6]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d102      	bne.n	80027b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027b4:	e0fa      	b.n	80029ac <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2203      	movs	r2, #3
 80027ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	88fa      	ldrh	r2, [r7, #6]
 80027ce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	88fa      	ldrh	r2, [r7, #6]
 80027d4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027fc:	d107      	bne.n	800280e <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800280c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002818:	2b40      	cmp	r3, #64	; 0x40
 800281a:	d007      	beq.n	800282c <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800282a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002834:	d14b      	bne.n	80028ce <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d002      	beq.n	8002844 <HAL_SPI_Transmit+0xe6>
 800283e:	8afb      	ldrh	r3, [r7, #22]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d13e      	bne.n	80028c2 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002848:	881a      	ldrh	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002854:	1c9a      	adds	r2, r3, #2
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800285e:	b29b      	uxth	r3, r3
 8002860:	3b01      	subs	r3, #1
 8002862:	b29a      	uxth	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002868:	e02b      	b.n	80028c2 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b02      	cmp	r3, #2
 8002876:	d112      	bne.n	800289e <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287c:	881a      	ldrh	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002888:	1c9a      	adds	r2, r3, #2
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002892:	b29b      	uxth	r3, r3
 8002894:	3b01      	subs	r3, #1
 8002896:	b29a      	uxth	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	86da      	strh	r2, [r3, #54]	; 0x36
 800289c:	e011      	b.n	80028c2 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800289e:	f7fe fdcf 	bl	8001440 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d803      	bhi.n	80028b6 <HAL_SPI_Transmit+0x158>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b4:	d102      	bne.n	80028bc <HAL_SPI_Transmit+0x15e>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d102      	bne.n	80028c2 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80028c0:	e074      	b.n	80029ac <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1ce      	bne.n	800286a <HAL_SPI_Transmit+0x10c>
 80028cc:	e04c      	b.n	8002968 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d002      	beq.n	80028dc <HAL_SPI_Transmit+0x17e>
 80028d6:	8afb      	ldrh	r3, [r7, #22]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d140      	bne.n	800295e <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	330c      	adds	r3, #12
 80028e6:	7812      	ldrb	r2, [r2, #0]
 80028e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	1c5a      	adds	r2, r3, #1
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	3b01      	subs	r3, #1
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002902:	e02c      	b.n	800295e <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b02      	cmp	r3, #2
 8002910:	d113      	bne.n	800293a <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	330c      	adds	r3, #12
 800291c:	7812      	ldrb	r2, [r2, #0]
 800291e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002924:	1c5a      	adds	r2, r3, #1
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800292e:	b29b      	uxth	r3, r3
 8002930:	3b01      	subs	r3, #1
 8002932:	b29a      	uxth	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	86da      	strh	r2, [r3, #54]	; 0x36
 8002938:	e011      	b.n	800295e <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800293a:	f7fe fd81 	bl	8001440 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	429a      	cmp	r2, r3
 8002948:	d803      	bhi.n	8002952 <HAL_SPI_Transmit+0x1f4>
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002950:	d102      	bne.n	8002958 <HAL_SPI_Transmit+0x1fa>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d102      	bne.n	800295e <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800295c:	e026      	b.n	80029ac <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002962:	b29b      	uxth	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1cd      	bne.n	8002904 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	6839      	ldr	r1, [r7, #0]
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 fa43 	bl	8002df8 <SPI_EndRxTxTransaction>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d002      	beq.n	800297e <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2220      	movs	r2, #32
 800297c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10a      	bne.n	800299c <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002986:	2300      	movs	r3, #0
 8002988:	613b      	str	r3, [r7, #16]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	613b      	str	r3, [r7, #16]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	613b      	str	r3, [r7, #16]
 800299a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d002      	beq.n	80029aa <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	77fb      	strb	r3, [r7, #31]
 80029a8:	e000      	b.n	80029ac <HAL_SPI_Transmit+0x24e>
  }

error:
 80029aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80029bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3720      	adds	r7, #32
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b08c      	sub	sp, #48	; 0x30
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	60f8      	str	r0, [r7, #12]
 80029ce:	60b9      	str	r1, [r7, #8]
 80029d0:	607a      	str	r2, [r7, #4]
 80029d2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80029d4:	2301      	movs	r3, #1
 80029d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80029d8:	2300      	movs	r3, #0
 80029da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d101      	bne.n	80029ec <HAL_SPI_TransmitReceive+0x26>
 80029e8:	2302      	movs	r3, #2
 80029ea:	e18a      	b.n	8002d02 <HAL_SPI_TransmitReceive+0x33c>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029f4:	f7fe fd24 	bl	8001440 <HAL_GetTick>
 80029f8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002a0a:	887b      	ldrh	r3, [r7, #2]
 8002a0c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d00f      	beq.n	8002a36 <HAL_SPI_TransmitReceive+0x70>
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a1c:	d107      	bne.n	8002a2e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d103      	bne.n	8002a2e <HAL_SPI_TransmitReceive+0x68>
 8002a26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	d003      	beq.n	8002a36 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a34:	e15b      	b.n	8002cee <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d005      	beq.n	8002a48 <HAL_SPI_TransmitReceive+0x82>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d002      	beq.n	8002a48 <HAL_SPI_TransmitReceive+0x82>
 8002a42:	887b      	ldrh	r3, [r7, #2]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d103      	bne.n	8002a50 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a4e:	e14e      	b.n	8002cee <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d003      	beq.n	8002a64 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2205      	movs	r2, #5
 8002a60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	887a      	ldrh	r2, [r7, #2]
 8002a74:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	887a      	ldrh	r2, [r7, #2]
 8002a7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	887a      	ldrh	r2, [r7, #2]
 8002a86:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	887a      	ldrh	r2, [r7, #2]
 8002a8c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa4:	2b40      	cmp	r3, #64	; 0x40
 8002aa6:	d007      	beq.n	8002ab8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ab6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ac0:	d178      	bne.n	8002bb4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d002      	beq.n	8002ad0 <HAL_SPI_TransmitReceive+0x10a>
 8002aca:	8b7b      	ldrh	r3, [r7, #26]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d166      	bne.n	8002b9e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad4:	881a      	ldrh	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae0:	1c9a      	adds	r2, r3, #2
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002af4:	e053      	b.n	8002b9e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d11b      	bne.n	8002b3c <HAL_SPI_TransmitReceive+0x176>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d016      	beq.n	8002b3c <HAL_SPI_TransmitReceive+0x176>
 8002b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d113      	bne.n	8002b3c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b18:	881a      	ldrh	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b24:	1c9a      	adds	r2, r3, #2
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	3b01      	subs	r3, #1
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d119      	bne.n	8002b7e <HAL_SPI_TransmitReceive+0x1b8>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d014      	beq.n	8002b7e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5e:	b292      	uxth	r2, r2
 8002b60:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b66:	1c9a      	adds	r2, r3, #2
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	3b01      	subs	r3, #1
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b7e:	f7fe fc5f 	bl	8001440 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d807      	bhi.n	8002b9e <HAL_SPI_TransmitReceive+0x1d8>
 8002b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b94:	d003      	beq.n	8002b9e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002b9c:	e0a7      	b.n	8002cee <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1a6      	bne.n	8002af6 <HAL_SPI_TransmitReceive+0x130>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1a1      	bne.n	8002af6 <HAL_SPI_TransmitReceive+0x130>
 8002bb2:	e07c      	b.n	8002cae <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d002      	beq.n	8002bc2 <HAL_SPI_TransmitReceive+0x1fc>
 8002bbc:	8b7b      	ldrh	r3, [r7, #26]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d16b      	bne.n	8002c9a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	330c      	adds	r3, #12
 8002bcc:	7812      	ldrb	r2, [r2, #0]
 8002bce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd4:	1c5a      	adds	r2, r3, #1
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	3b01      	subs	r3, #1
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002be8:	e057      	b.n	8002c9a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d11c      	bne.n	8002c32 <HAL_SPI_TransmitReceive+0x26c>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d017      	beq.n	8002c32 <HAL_SPI_TransmitReceive+0x26c>
 8002c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d114      	bne.n	8002c32 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	330c      	adds	r3, #12
 8002c12:	7812      	ldrb	r2, [r2, #0]
 8002c14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	1c5a      	adds	r2, r3, #1
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	3b01      	subs	r3, #1
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d119      	bne.n	8002c74 <HAL_SPI_TransmitReceive+0x2ae>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d014      	beq.n	8002c74 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68da      	ldr	r2, [r3, #12]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5c:	1c5a      	adds	r2, r3, #1
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c70:	2301      	movs	r3, #1
 8002c72:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002c74:	f7fe fbe4 	bl	8001440 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d803      	bhi.n	8002c8c <HAL_SPI_TransmitReceive+0x2c6>
 8002c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8a:	d102      	bne.n	8002c92 <HAL_SPI_TransmitReceive+0x2cc>
 8002c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d103      	bne.n	8002c9a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002c98:	e029      	b.n	8002cee <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1a2      	bne.n	8002bea <HAL_SPI_TransmitReceive+0x224>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d19d      	bne.n	8002bea <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 f8a0 	bl	8002df8 <SPI_EndRxTxTransaction>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d006      	beq.n	8002ccc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002cca:	e010      	b.n	8002cee <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10b      	bne.n	8002cec <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	617b      	str	r3, [r7, #20]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	e000      	b.n	8002cee <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002cec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002cfe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3730      	adds	r7, #48	; 0x30
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d18:	b2db      	uxtb	r3, r3
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	4613      	mov	r3, r2
 8002d32:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d34:	e04c      	b.n	8002dd0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3c:	d048      	beq.n	8002dd0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002d3e:	f7fe fb7f 	bl	8001440 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d902      	bls.n	8002d54 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d13d      	bne.n	8002dd0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d62:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d6c:	d111      	bne.n	8002d92 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d76:	d004      	beq.n	8002d82 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d80:	d107      	bne.n	8002d92 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d90:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d9a:	d10f      	bne.n	8002dbc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e00f      	b.n	8002df0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689a      	ldr	r2, [r3, #8]
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	bf0c      	ite	eq
 8002de0:	2301      	moveq	r3, #1
 8002de2:	2300      	movne	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	461a      	mov	r2, r3
 8002de8:	79fb      	ldrb	r3, [r7, #7]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d1a3      	bne.n	8002d36 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af02      	add	r7, sp, #8
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	2180      	movs	r1, #128	; 0x80
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f7ff ff88 	bl	8002d24 <SPI_WaitFlagStateUntilTimeout>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d007      	beq.n	8002e2a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1e:	f043 0220 	orr.w	r2, r3, #32
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e000      	b.n	8002e2c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e01d      	b.n	8002e82 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d106      	bne.n	8002e60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7fe f936 	bl	80010cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2202      	movs	r2, #2
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3304      	adds	r3, #4
 8002e70:	4619      	mov	r1, r3
 8002e72:	4610      	mov	r0, r2
 8002e74:	f000 f9bc 	bl	80031f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e01d      	b.n	8002ed8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d106      	bne.n	8002eb6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 f815 	bl	8002ee0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2202      	movs	r2, #2
 8002eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4610      	mov	r0, r2
 8002eca:	f000 f991 	bl	80031f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bc80      	pop	{r7}
 8002ef0:	4770      	bx	lr
	...

08002ef4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d101      	bne.n	8002f0e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	e0b4      	b.n	8003078 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2202      	movs	r2, #2
 8002f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b0c      	cmp	r3, #12
 8002f22:	f200 809f 	bhi.w	8003064 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002f26:	a201      	add	r2, pc, #4	; (adr r2, 8002f2c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f2c:	08002f61 	.word	0x08002f61
 8002f30:	08003065 	.word	0x08003065
 8002f34:	08003065 	.word	0x08003065
 8002f38:	08003065 	.word	0x08003065
 8002f3c:	08002fa1 	.word	0x08002fa1
 8002f40:	08003065 	.word	0x08003065
 8002f44:	08003065 	.word	0x08003065
 8002f48:	08003065 	.word	0x08003065
 8002f4c:	08002fe3 	.word	0x08002fe3
 8002f50:	08003065 	.word	0x08003065
 8002f54:	08003065 	.word	0x08003065
 8002f58:	08003065 	.word	0x08003065
 8002f5c:	08003023 	.word	0x08003023
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68b9      	ldr	r1, [r7, #8]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 f9c2 	bl	80032f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699a      	ldr	r2, [r3, #24]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0208 	orr.w	r2, r2, #8
 8002f7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	699a      	ldr	r2, [r3, #24]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0204 	bic.w	r2, r2, #4
 8002f8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6999      	ldr	r1, [r3, #24]
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	691a      	ldr	r2, [r3, #16]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	619a      	str	r2, [r3, #24]
      break;
 8002f9e:	e062      	b.n	8003066 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68b9      	ldr	r1, [r7, #8]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 fa26 	bl	80033f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699a      	ldr	r2, [r3, #24]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699a      	ldr	r2, [r3, #24]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6999      	ldr	r1, [r3, #24]
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	021a      	lsls	r2, r3, #8
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	619a      	str	r2, [r3, #24]
      break;
 8002fe0:	e041      	b.n	8003066 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68b9      	ldr	r1, [r7, #8]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f000 fa81 	bl	80034f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	69da      	ldr	r2, [r3, #28]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f042 0208 	orr.w	r2, r2, #8
 8002ffc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	69da      	ldr	r2, [r3, #28]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0204 	bic.w	r2, r2, #4
 800300c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	69d9      	ldr	r1, [r3, #28]
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	691a      	ldr	r2, [r3, #16]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	430a      	orrs	r2, r1
 800301e:	61da      	str	r2, [r3, #28]
      break;
 8003020:	e021      	b.n	8003066 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68b9      	ldr	r1, [r7, #8]
 8003028:	4618      	mov	r0, r3
 800302a:	f000 fadd 	bl	80035e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	69da      	ldr	r2, [r3, #28]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800303c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	69da      	ldr	r2, [r3, #28]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800304c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	69d9      	ldr	r1, [r3, #28]
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	021a      	lsls	r2, r3, #8
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	61da      	str	r2, [r3, #28]
      break;
 8003062:	e000      	b.n	8003066 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003064:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003090:	2b01      	cmp	r3, #1
 8003092:	d101      	bne.n	8003098 <HAL_TIM_ConfigClockSource+0x18>
 8003094:	2302      	movs	r3, #2
 8003096:	e0a6      	b.n	80031e6 <HAL_TIM_ConfigClockSource+0x166>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2202      	movs	r2, #2
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b40      	cmp	r3, #64	; 0x40
 80030ce:	d067      	beq.n	80031a0 <HAL_TIM_ConfigClockSource+0x120>
 80030d0:	2b40      	cmp	r3, #64	; 0x40
 80030d2:	d80b      	bhi.n	80030ec <HAL_TIM_ConfigClockSource+0x6c>
 80030d4:	2b10      	cmp	r3, #16
 80030d6:	d073      	beq.n	80031c0 <HAL_TIM_ConfigClockSource+0x140>
 80030d8:	2b10      	cmp	r3, #16
 80030da:	d802      	bhi.n	80030e2 <HAL_TIM_ConfigClockSource+0x62>
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d06f      	beq.n	80031c0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80030e0:	e078      	b.n	80031d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80030e2:	2b20      	cmp	r3, #32
 80030e4:	d06c      	beq.n	80031c0 <HAL_TIM_ConfigClockSource+0x140>
 80030e6:	2b30      	cmp	r3, #48	; 0x30
 80030e8:	d06a      	beq.n	80031c0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80030ea:	e073      	b.n	80031d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80030ec:	2b70      	cmp	r3, #112	; 0x70
 80030ee:	d00d      	beq.n	800310c <HAL_TIM_ConfigClockSource+0x8c>
 80030f0:	2b70      	cmp	r3, #112	; 0x70
 80030f2:	d804      	bhi.n	80030fe <HAL_TIM_ConfigClockSource+0x7e>
 80030f4:	2b50      	cmp	r3, #80	; 0x50
 80030f6:	d033      	beq.n	8003160 <HAL_TIM_ConfigClockSource+0xe0>
 80030f8:	2b60      	cmp	r3, #96	; 0x60
 80030fa:	d041      	beq.n	8003180 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80030fc:	e06a      	b.n	80031d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80030fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003102:	d066      	beq.n	80031d2 <HAL_TIM_ConfigClockSource+0x152>
 8003104:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003108:	d017      	beq.n	800313a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800310a:	e063      	b.n	80031d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6818      	ldr	r0, [r3, #0]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	6899      	ldr	r1, [r3, #8]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	f000 fb3b 	bl	8003796 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800312e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	609a      	str	r2, [r3, #8]
      break;
 8003138:	e04c      	b.n	80031d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6818      	ldr	r0, [r3, #0]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	6899      	ldr	r1, [r3, #8]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f000 fb24 	bl	8003796 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800315c:	609a      	str	r2, [r3, #8]
      break;
 800315e:	e039      	b.n	80031d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6818      	ldr	r0, [r3, #0]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	6859      	ldr	r1, [r3, #4]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	461a      	mov	r2, r3
 800316e:	f000 fa9b 	bl	80036a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2150      	movs	r1, #80	; 0x50
 8003178:	4618      	mov	r0, r3
 800317a:	f000 faf2 	bl	8003762 <TIM_ITRx_SetConfig>
      break;
 800317e:	e029      	b.n	80031d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6818      	ldr	r0, [r3, #0]
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	6859      	ldr	r1, [r3, #4]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	461a      	mov	r2, r3
 800318e:	f000 fab9 	bl	8003704 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2160      	movs	r1, #96	; 0x60
 8003198:	4618      	mov	r0, r3
 800319a:	f000 fae2 	bl	8003762 <TIM_ITRx_SetConfig>
      break;
 800319e:	e019      	b.n	80031d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6818      	ldr	r0, [r3, #0]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	6859      	ldr	r1, [r3, #4]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	461a      	mov	r2, r3
 80031ae:	f000 fa7b 	bl	80036a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2140      	movs	r1, #64	; 0x40
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 fad2 	bl	8003762 <TIM_ITRx_SetConfig>
      break;
 80031be:	e009      	b.n	80031d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4619      	mov	r1, r3
 80031ca:	4610      	mov	r0, r2
 80031cc:	f000 fac9 	bl	8003762 <TIM_ITRx_SetConfig>
      break;
 80031d0:	e000      	b.n	80031d4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80031d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
	...

080031f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a35      	ldr	r2, [pc, #212]	; (80032d8 <TIM_Base_SetConfig+0xe8>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d00b      	beq.n	8003220 <TIM_Base_SetConfig+0x30>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800320e:	d007      	beq.n	8003220 <TIM_Base_SetConfig+0x30>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a32      	ldr	r2, [pc, #200]	; (80032dc <TIM_Base_SetConfig+0xec>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d003      	beq.n	8003220 <TIM_Base_SetConfig+0x30>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a31      	ldr	r2, [pc, #196]	; (80032e0 <TIM_Base_SetConfig+0xf0>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d108      	bne.n	8003232 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003226:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	4313      	orrs	r3, r2
 8003230:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a28      	ldr	r2, [pc, #160]	; (80032d8 <TIM_Base_SetConfig+0xe8>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d017      	beq.n	800326a <TIM_Base_SetConfig+0x7a>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003240:	d013      	beq.n	800326a <TIM_Base_SetConfig+0x7a>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a25      	ldr	r2, [pc, #148]	; (80032dc <TIM_Base_SetConfig+0xec>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d00f      	beq.n	800326a <TIM_Base_SetConfig+0x7a>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a24      	ldr	r2, [pc, #144]	; (80032e0 <TIM_Base_SetConfig+0xf0>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d00b      	beq.n	800326a <TIM_Base_SetConfig+0x7a>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a23      	ldr	r2, [pc, #140]	; (80032e4 <TIM_Base_SetConfig+0xf4>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d007      	beq.n	800326a <TIM_Base_SetConfig+0x7a>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a22      	ldr	r2, [pc, #136]	; (80032e8 <TIM_Base_SetConfig+0xf8>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d003      	beq.n	800326a <TIM_Base_SetConfig+0x7a>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a21      	ldr	r2, [pc, #132]	; (80032ec <TIM_Base_SetConfig+0xfc>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d108      	bne.n	800327c <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003270:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	4313      	orrs	r3, r2
 800327a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	4313      	orrs	r3, r2
 8003288:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	689a      	ldr	r2, [r3, #8]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a0d      	ldr	r2, [pc, #52]	; (80032d8 <TIM_Base_SetConfig+0xe8>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d00b      	beq.n	80032c0 <TIM_Base_SetConfig+0xd0>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a0e      	ldr	r2, [pc, #56]	; (80032e4 <TIM_Base_SetConfig+0xf4>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d007      	beq.n	80032c0 <TIM_Base_SetConfig+0xd0>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a0d      	ldr	r2, [pc, #52]	; (80032e8 <TIM_Base_SetConfig+0xf8>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d003      	beq.n	80032c0 <TIM_Base_SetConfig+0xd0>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a0c      	ldr	r2, [pc, #48]	; (80032ec <TIM_Base_SetConfig+0xfc>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d103      	bne.n	80032c8 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	691a      	ldr	r2, [r3, #16]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	615a      	str	r2, [r3, #20]
}
 80032ce:	bf00      	nop
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr
 80032d8:	40012c00 	.word	0x40012c00
 80032dc:	40000400 	.word	0x40000400
 80032e0:	40000800 	.word	0x40000800
 80032e4:	40014000 	.word	0x40014000
 80032e8:	40014400 	.word	0x40014400
 80032ec:	40014800 	.word	0x40014800

080032f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b087      	sub	sp, #28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	f023 0201 	bic.w	r2, r3, #1
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800331e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f023 0303 	bic.w	r3, r3, #3
 8003326:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	4313      	orrs	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f023 0302 	bic.w	r3, r3, #2
 8003338:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	4313      	orrs	r3, r2
 8003342:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a28      	ldr	r2, [pc, #160]	; (80033e8 <TIM_OC1_SetConfig+0xf8>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d00b      	beq.n	8003364 <TIM_OC1_SetConfig+0x74>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a27      	ldr	r2, [pc, #156]	; (80033ec <TIM_OC1_SetConfig+0xfc>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d007      	beq.n	8003364 <TIM_OC1_SetConfig+0x74>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a26      	ldr	r2, [pc, #152]	; (80033f0 <TIM_OC1_SetConfig+0x100>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d003      	beq.n	8003364 <TIM_OC1_SetConfig+0x74>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a25      	ldr	r2, [pc, #148]	; (80033f4 <TIM_OC1_SetConfig+0x104>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d10c      	bne.n	800337e <TIM_OC1_SetConfig+0x8e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	f023 0308 	bic.w	r3, r3, #8
 800336a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	4313      	orrs	r3, r2
 8003374:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f023 0304 	bic.w	r3, r3, #4
 800337c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a19      	ldr	r2, [pc, #100]	; (80033e8 <TIM_OC1_SetConfig+0xf8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d00b      	beq.n	800339e <TIM_OC1_SetConfig+0xae>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a18      	ldr	r2, [pc, #96]	; (80033ec <TIM_OC1_SetConfig+0xfc>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d007      	beq.n	800339e <TIM_OC1_SetConfig+0xae>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a17      	ldr	r2, [pc, #92]	; (80033f0 <TIM_OC1_SetConfig+0x100>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d003      	beq.n	800339e <TIM_OC1_SetConfig+0xae>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a16      	ldr	r2, [pc, #88]	; (80033f4 <TIM_OC1_SetConfig+0x104>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d111      	bne.n	80033c2 <TIM_OC1_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	4313      	orrs	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	621a      	str	r2, [r3, #32]
}
 80033dc:	bf00      	nop
 80033de:	371c      	adds	r7, #28
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bc80      	pop	{r7}
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	40012c00 	.word	0x40012c00
 80033ec:	40014000 	.word	0x40014000
 80033f0:	40014400 	.word	0x40014400
 80033f4:	40014800 	.word	0x40014800

080033f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b087      	sub	sp, #28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	f023 0210 	bic.w	r2, r3, #16
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800342e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	021b      	lsls	r3, r3, #8
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	4313      	orrs	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f023 0320 	bic.w	r3, r3, #32
 8003442:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	011b      	lsls	r3, r3, #4
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	4313      	orrs	r3, r2
 800344e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a23      	ldr	r2, [pc, #140]	; (80034e0 <TIM_OC2_SetConfig+0xe8>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d10d      	bne.n	8003474 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800345e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	4313      	orrs	r3, r2
 800346a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003472:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a1a      	ldr	r2, [pc, #104]	; (80034e0 <TIM_OC2_SetConfig+0xe8>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d00b      	beq.n	8003494 <TIM_OC2_SetConfig+0x9c>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a19      	ldr	r2, [pc, #100]	; (80034e4 <TIM_OC2_SetConfig+0xec>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d007      	beq.n	8003494 <TIM_OC2_SetConfig+0x9c>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a18      	ldr	r2, [pc, #96]	; (80034e8 <TIM_OC2_SetConfig+0xf0>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d003      	beq.n	8003494 <TIM_OC2_SetConfig+0x9c>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a17      	ldr	r2, [pc, #92]	; (80034ec <TIM_OC2_SetConfig+0xf4>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d113      	bne.n	80034bc <TIM_OC2_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800349a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	621a      	str	r2, [r3, #32]
}
 80034d6:	bf00      	nop
 80034d8:	371c      	adds	r7, #28
 80034da:	46bd      	mov	sp, r7
 80034dc:	bc80      	pop	{r7}
 80034de:	4770      	bx	lr
 80034e0:	40012c00 	.word	0x40012c00
 80034e4:	40014000 	.word	0x40014000
 80034e8:	40014400 	.word	0x40014400
 80034ec:	40014800 	.word	0x40014800

080034f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f023 0303 	bic.w	r3, r3, #3
 8003526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	4313      	orrs	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003538:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	021b      	lsls	r3, r3, #8
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	4313      	orrs	r3, r2
 8003544:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a23      	ldr	r2, [pc, #140]	; (80035d8 <TIM_OC3_SetConfig+0xe8>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d10d      	bne.n	800356a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003554:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	021b      	lsls	r3, r3, #8
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	4313      	orrs	r3, r2
 8003560:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003568:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a1a      	ldr	r2, [pc, #104]	; (80035d8 <TIM_OC3_SetConfig+0xe8>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d00b      	beq.n	800358a <TIM_OC3_SetConfig+0x9a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a19      	ldr	r2, [pc, #100]	; (80035dc <TIM_OC3_SetConfig+0xec>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d007      	beq.n	800358a <TIM_OC3_SetConfig+0x9a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a18      	ldr	r2, [pc, #96]	; (80035e0 <TIM_OC3_SetConfig+0xf0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d003      	beq.n	800358a <TIM_OC3_SetConfig+0x9a>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a17      	ldr	r2, [pc, #92]	; (80035e4 <TIM_OC3_SetConfig+0xf4>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d113      	bne.n	80035b2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003590:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003598:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	621a      	str	r2, [r3, #32]
}
 80035cc:	bf00      	nop
 80035ce:	371c      	adds	r7, #28
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bc80      	pop	{r7}
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	40012c00 	.word	0x40012c00
 80035dc:	40014000 	.word	0x40014000
 80035e0:	40014400 	.word	0x40014400
 80035e4:	40014800 	.word	0x40014800

080035e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b087      	sub	sp, #28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800361e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	021b      	lsls	r3, r3, #8
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	4313      	orrs	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003632:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	031b      	lsls	r3, r3, #12
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	4313      	orrs	r3, r2
 800363e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a15      	ldr	r2, [pc, #84]	; (8003698 <TIM_OC4_SetConfig+0xb0>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d00b      	beq.n	8003660 <TIM_OC4_SetConfig+0x78>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a14      	ldr	r2, [pc, #80]	; (800369c <TIM_OC4_SetConfig+0xb4>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d007      	beq.n	8003660 <TIM_OC4_SetConfig+0x78>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a13      	ldr	r2, [pc, #76]	; (80036a0 <TIM_OC4_SetConfig+0xb8>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d003      	beq.n	8003660 <TIM_OC4_SetConfig+0x78>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a12      	ldr	r2, [pc, #72]	; (80036a4 <TIM_OC4_SetConfig+0xbc>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d109      	bne.n	8003674 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003666:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	019b      	lsls	r3, r3, #6
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	4313      	orrs	r3, r2
 8003672:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	621a      	str	r2, [r3, #32]
}
 800368e:	bf00      	nop
 8003690:	371c      	adds	r7, #28
 8003692:	46bd      	mov	sp, r7
 8003694:	bc80      	pop	{r7}
 8003696:	4770      	bx	lr
 8003698:	40012c00 	.word	0x40012c00
 800369c:	40014000 	.word	0x40014000
 80036a0:	40014400 	.word	0x40014400
 80036a4:	40014800 	.word	0x40014800

080036a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b087      	sub	sp, #28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	f023 0201 	bic.w	r2, r3, #1
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	011b      	lsls	r3, r3, #4
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	4313      	orrs	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f023 030a 	bic.w	r3, r3, #10
 80036e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	621a      	str	r2, [r3, #32]
}
 80036fa:	bf00      	nop
 80036fc:	371c      	adds	r7, #28
 80036fe:	46bd      	mov	sp, r7
 8003700:	bc80      	pop	{r7}
 8003702:	4770      	bx	lr

08003704 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	f023 0210 	bic.w	r2, r3, #16
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800372e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	031b      	lsls	r3, r3, #12
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	4313      	orrs	r3, r2
 8003738:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003740:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	011b      	lsls	r3, r3, #4
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	4313      	orrs	r3, r2
 800374a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	621a      	str	r2, [r3, #32]
}
 8003758:	bf00      	nop
 800375a:	371c      	adds	r7, #28
 800375c:	46bd      	mov	sp, r7
 800375e:	bc80      	pop	{r7}
 8003760:	4770      	bx	lr

08003762 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003762:	b480      	push	{r7}
 8003764:	b085      	sub	sp, #20
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
 800376a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003778:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4313      	orrs	r3, r2
 8003780:	f043 0307 	orr.w	r3, r3, #7
 8003784:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	609a      	str	r2, [r3, #8]
}
 800378c:	bf00      	nop
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	bc80      	pop	{r7}
 8003794:	4770      	bx	lr

08003796 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003796:	b480      	push	{r7}
 8003798:	b087      	sub	sp, #28
 800379a:	af00      	add	r7, sp, #0
 800379c:	60f8      	str	r0, [r7, #12]
 800379e:	60b9      	str	r1, [r7, #8]
 80037a0:	607a      	str	r2, [r7, #4]
 80037a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	021a      	lsls	r2, r3, #8
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	431a      	orrs	r2, r3
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	4313      	orrs	r3, r2
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	609a      	str	r2, [r3, #8]
}
 80037ca:	bf00      	nop
 80037cc:	371c      	adds	r7, #28
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bc80      	pop	{r7}
 80037d2:	4770      	bx	lr

080037d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d101      	bne.n	80037ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037e8:	2302      	movs	r3, #2
 80037ea:	e032      	b.n	8003852 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2202      	movs	r2, #2
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003812:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	4313      	orrs	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003824:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	4313      	orrs	r3, r2
 800382e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr

0800385c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e03f      	b.n	80038ee <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d106      	bne.n	8003888 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7fd fc84 	bl	8001190 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2224      	movs	r2, #36	; 0x24
 800388c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800389e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f829 	bl	80038f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	691a      	ldr	r2, [r3, #16]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	695a      	ldr	r2, [r3, #20]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68da      	ldr	r2, [r3, #12]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2220      	movs	r2, #32
 80038e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2220      	movs	r2, #32
 80038e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
	...

080038f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	611a      	str	r2, [r3, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

#if defined(USART_CR1_OVER8)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689a      	ldr	r2, [r3, #8]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	431a      	orrs	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	431a      	orrs	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003938:	f023 030c 	bic.w	r3, r3, #12
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6812      	ldr	r2, [r2, #0]
 8003940:	68f9      	ldr	r1, [r7, #12]
 8003942:	430b      	orrs	r3, r1
 8003944:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	699a      	ldr	r2, [r3, #24]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	615a      	str	r2, [r3, #20]

#if defined(USART_CR1_OVER8)
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003964:	f040 80a5 	bne.w	8003ab2 <UART_SetConfig+0x1ba>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if(huart->Instance == USART1)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4aa4      	ldr	r2, [pc, #656]	; (8003c00 <UART_SetConfig+0x308>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d14f      	bne.n	8003a12 <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003972:	f7fe fdc3 	bl	80024fc <HAL_RCC_GetPCLK2Freq>
 8003976:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	4613      	mov	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4413      	add	r3, r2
 8003980:	009a      	lsls	r2, r3, #2
 8003982:	441a      	add	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	fbb2 f3f3 	udiv	r3, r2, r3
 800398e:	4a9d      	ldr	r2, [pc, #628]	; (8003c04 <UART_SetConfig+0x30c>)
 8003990:	fba2 2303 	umull	r2, r3, r2, r3
 8003994:	095b      	lsrs	r3, r3, #5
 8003996:	0119      	lsls	r1, r3, #4
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	4613      	mov	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	009a      	lsls	r2, r3, #2
 80039a2:	441a      	add	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80039ae:	4b95      	ldr	r3, [pc, #596]	; (8003c04 <UART_SetConfig+0x30c>)
 80039b0:	fba3 0302 	umull	r0, r3, r3, r2
 80039b4:	095b      	lsrs	r3, r3, #5
 80039b6:	2064      	movs	r0, #100	; 0x64
 80039b8:	fb00 f303 	mul.w	r3, r0, r3
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	3332      	adds	r3, #50	; 0x32
 80039c2:	4a90      	ldr	r2, [pc, #576]	; (8003c04 <UART_SetConfig+0x30c>)
 80039c4:	fba2 2303 	umull	r2, r3, r2, r3
 80039c8:	095b      	lsrs	r3, r3, #5
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039d0:	4419      	add	r1, r3
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	4613      	mov	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	009a      	lsls	r2, r3, #2
 80039dc:	441a      	add	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80039e8:	4b86      	ldr	r3, [pc, #536]	; (8003c04 <UART_SetConfig+0x30c>)
 80039ea:	fba3 0302 	umull	r0, r3, r3, r2
 80039ee:	095b      	lsrs	r3, r3, #5
 80039f0:	2064      	movs	r0, #100	; 0x64
 80039f2:	fb00 f303 	mul.w	r3, r0, r3
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	3332      	adds	r3, #50	; 0x32
 80039fc:	4a81      	ldr	r2, [pc, #516]	; (8003c04 <UART_SetConfig+0x30c>)
 80039fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003a02:	095b      	lsrs	r3, r3, #5
 8003a04:	f003 0207 	and.w	r2, r3, #7
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	440a      	add	r2, r1
 8003a0e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003a10:	e0f1      	b.n	8003bf6 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a12:	f7fe fd5f 	bl	80024d4 <HAL_RCC_GetPCLK1Freq>
 8003a16:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	009a      	lsls	r2, r3, #2
 8003a22:	441a      	add	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2e:	4a75      	ldr	r2, [pc, #468]	; (8003c04 <UART_SetConfig+0x30c>)
 8003a30:	fba2 2303 	umull	r2, r3, r2, r3
 8003a34:	095b      	lsrs	r3, r3, #5
 8003a36:	0119      	lsls	r1, r3, #4
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	009a      	lsls	r2, r3, #2
 8003a42:	441a      	add	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a4e:	4b6d      	ldr	r3, [pc, #436]	; (8003c04 <UART_SetConfig+0x30c>)
 8003a50:	fba3 0302 	umull	r0, r3, r3, r2
 8003a54:	095b      	lsrs	r3, r3, #5
 8003a56:	2064      	movs	r0, #100	; 0x64
 8003a58:	fb00 f303 	mul.w	r3, r0, r3
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	3332      	adds	r3, #50	; 0x32
 8003a62:	4a68      	ldr	r2, [pc, #416]	; (8003c04 <UART_SetConfig+0x30c>)
 8003a64:	fba2 2303 	umull	r2, r3, r2, r3
 8003a68:	095b      	lsrs	r3, r3, #5
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a70:	4419      	add	r1, r3
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	4613      	mov	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4413      	add	r3, r2
 8003a7a:	009a      	lsls	r2, r3, #2
 8003a7c:	441a      	add	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a88:	4b5e      	ldr	r3, [pc, #376]	; (8003c04 <UART_SetConfig+0x30c>)
 8003a8a:	fba3 0302 	umull	r0, r3, r3, r2
 8003a8e:	095b      	lsrs	r3, r3, #5
 8003a90:	2064      	movs	r0, #100	; 0x64
 8003a92:	fb00 f303 	mul.w	r3, r0, r3
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	3332      	adds	r3, #50	; 0x32
 8003a9c:	4a59      	ldr	r2, [pc, #356]	; (8003c04 <UART_SetConfig+0x30c>)
 8003a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa2:	095b      	lsrs	r3, r3, #5
 8003aa4:	f003 0207 	and.w	r2, r3, #7
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	440a      	add	r2, r1
 8003aae:	609a      	str	r2, [r3, #8]
}
 8003ab0:	e0a1      	b.n	8003bf6 <UART_SetConfig+0x2fe>
    if(huart->Instance == USART1)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a52      	ldr	r2, [pc, #328]	; (8003c00 <UART_SetConfig+0x308>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d14e      	bne.n	8003b5a <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003abc:	f7fe fd1e 	bl	80024fc <HAL_RCC_GetPCLK2Freq>
 8003ac0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	009a      	lsls	r2, r3, #2
 8003acc:	441a      	add	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad8:	4a4a      	ldr	r2, [pc, #296]	; (8003c04 <UART_SetConfig+0x30c>)
 8003ada:	fba2 2303 	umull	r2, r3, r2, r3
 8003ade:	095b      	lsrs	r3, r3, #5
 8003ae0:	0119      	lsls	r1, r3, #4
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	009a      	lsls	r2, r3, #2
 8003aec:	441a      	add	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003af8:	4b42      	ldr	r3, [pc, #264]	; (8003c04 <UART_SetConfig+0x30c>)
 8003afa:	fba3 0302 	umull	r0, r3, r3, r2
 8003afe:	095b      	lsrs	r3, r3, #5
 8003b00:	2064      	movs	r0, #100	; 0x64
 8003b02:	fb00 f303 	mul.w	r3, r0, r3
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	011b      	lsls	r3, r3, #4
 8003b0a:	3332      	adds	r3, #50	; 0x32
 8003b0c:	4a3d      	ldr	r2, [pc, #244]	; (8003c04 <UART_SetConfig+0x30c>)
 8003b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b12:	095b      	lsrs	r3, r3, #5
 8003b14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b18:	4419      	add	r1, r3
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	009a      	lsls	r2, r3, #2
 8003b24:	441a      	add	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b30:	4b34      	ldr	r3, [pc, #208]	; (8003c04 <UART_SetConfig+0x30c>)
 8003b32:	fba3 0302 	umull	r0, r3, r3, r2
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	2064      	movs	r0, #100	; 0x64
 8003b3a:	fb00 f303 	mul.w	r3, r0, r3
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	3332      	adds	r3, #50	; 0x32
 8003b44:	4a2f      	ldr	r2, [pc, #188]	; (8003c04 <UART_SetConfig+0x30c>)
 8003b46:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4a:	095b      	lsrs	r3, r3, #5
 8003b4c:	f003 020f 	and.w	r2, r3, #15
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	440a      	add	r2, r1
 8003b56:	609a      	str	r2, [r3, #8]
}
 8003b58:	e04d      	b.n	8003bf6 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b5a:	f7fe fcbb 	bl	80024d4 <HAL_RCC_GetPCLK1Freq>
 8003b5e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	4613      	mov	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4413      	add	r3, r2
 8003b68:	009a      	lsls	r2, r3, #2
 8003b6a:	441a      	add	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b76:	4a23      	ldr	r2, [pc, #140]	; (8003c04 <UART_SetConfig+0x30c>)
 8003b78:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7c:	095b      	lsrs	r3, r3, #5
 8003b7e:	0119      	lsls	r1, r3, #4
 8003b80:	68ba      	ldr	r2, [r7, #8]
 8003b82:	4613      	mov	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4413      	add	r3, r2
 8003b88:	009a      	lsls	r2, r3, #2
 8003b8a:	441a      	add	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b96:	4b1b      	ldr	r3, [pc, #108]	; (8003c04 <UART_SetConfig+0x30c>)
 8003b98:	fba3 0302 	umull	r0, r3, r3, r2
 8003b9c:	095b      	lsrs	r3, r3, #5
 8003b9e:	2064      	movs	r0, #100	; 0x64
 8003ba0:	fb00 f303 	mul.w	r3, r0, r3
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	011b      	lsls	r3, r3, #4
 8003ba8:	3332      	adds	r3, #50	; 0x32
 8003baa:	4a16      	ldr	r2, [pc, #88]	; (8003c04 <UART_SetConfig+0x30c>)
 8003bac:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb0:	095b      	lsrs	r3, r3, #5
 8003bb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bb6:	4419      	add	r1, r3
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4413      	add	r3, r2
 8003bc0:	009a      	lsls	r2, r3, #2
 8003bc2:	441a      	add	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bce:	4b0d      	ldr	r3, [pc, #52]	; (8003c04 <UART_SetConfig+0x30c>)
 8003bd0:	fba3 0302 	umull	r0, r3, r3, r2
 8003bd4:	095b      	lsrs	r3, r3, #5
 8003bd6:	2064      	movs	r0, #100	; 0x64
 8003bd8:	fb00 f303 	mul.w	r3, r0, r3
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	011b      	lsls	r3, r3, #4
 8003be0:	3332      	adds	r3, #50	; 0x32
 8003be2:	4a08      	ldr	r2, [pc, #32]	; (8003c04 <UART_SetConfig+0x30c>)
 8003be4:	fba2 2303 	umull	r2, r3, r2, r3
 8003be8:	095b      	lsrs	r3, r3, #5
 8003bea:	f003 020f 	and.w	r2, r3, #15
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	440a      	add	r2, r1
 8003bf4:	609a      	str	r2, [r3, #8]
}
 8003bf6:	bf00      	nop
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	40013800 	.word	0x40013800
 8003c04:	51eb851f 	.word	0x51eb851f

08003c08 <__errno>:
 8003c08:	4b01      	ldr	r3, [pc, #4]	; (8003c10 <__errno+0x8>)
 8003c0a:	6818      	ldr	r0, [r3, #0]
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	2000001c 	.word	0x2000001c

08003c14 <__libc_init_array>:
 8003c14:	b570      	push	{r4, r5, r6, lr}
 8003c16:	2500      	movs	r5, #0
 8003c18:	4e0c      	ldr	r6, [pc, #48]	; (8003c4c <__libc_init_array+0x38>)
 8003c1a:	4c0d      	ldr	r4, [pc, #52]	; (8003c50 <__libc_init_array+0x3c>)
 8003c1c:	1ba4      	subs	r4, r4, r6
 8003c1e:	10a4      	asrs	r4, r4, #2
 8003c20:	42a5      	cmp	r5, r4
 8003c22:	d109      	bne.n	8003c38 <__libc_init_array+0x24>
 8003c24:	f000 fc50 	bl	80044c8 <_init>
 8003c28:	2500      	movs	r5, #0
 8003c2a:	4e0a      	ldr	r6, [pc, #40]	; (8003c54 <__libc_init_array+0x40>)
 8003c2c:	4c0a      	ldr	r4, [pc, #40]	; (8003c58 <__libc_init_array+0x44>)
 8003c2e:	1ba4      	subs	r4, r4, r6
 8003c30:	10a4      	asrs	r4, r4, #2
 8003c32:	42a5      	cmp	r5, r4
 8003c34:	d105      	bne.n	8003c42 <__libc_init_array+0x2e>
 8003c36:	bd70      	pop	{r4, r5, r6, pc}
 8003c38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c3c:	4798      	blx	r3
 8003c3e:	3501      	adds	r5, #1
 8003c40:	e7ee      	b.n	8003c20 <__libc_init_array+0xc>
 8003c42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c46:	4798      	blx	r3
 8003c48:	3501      	adds	r5, #1
 8003c4a:	e7f2      	b.n	8003c32 <__libc_init_array+0x1e>
 8003c4c:	080045bc 	.word	0x080045bc
 8003c50:	080045bc 	.word	0x080045bc
 8003c54:	080045bc 	.word	0x080045bc
 8003c58:	080045c0 	.word	0x080045c0

08003c5c <memcpy>:
 8003c5c:	b510      	push	{r4, lr}
 8003c5e:	1e43      	subs	r3, r0, #1
 8003c60:	440a      	add	r2, r1
 8003c62:	4291      	cmp	r1, r2
 8003c64:	d100      	bne.n	8003c68 <memcpy+0xc>
 8003c66:	bd10      	pop	{r4, pc}
 8003c68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c70:	e7f7      	b.n	8003c62 <memcpy+0x6>

08003c72 <memset>:
 8003c72:	4603      	mov	r3, r0
 8003c74:	4402      	add	r2, r0
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d100      	bne.n	8003c7c <memset+0xa>
 8003c7a:	4770      	bx	lr
 8003c7c:	f803 1b01 	strb.w	r1, [r3], #1
 8003c80:	e7f9      	b.n	8003c76 <memset+0x4>

08003c82 <_vsniprintf_r>:
 8003c82:	b530      	push	{r4, r5, lr}
 8003c84:	1e14      	subs	r4, r2, #0
 8003c86:	4605      	mov	r5, r0
 8003c88:	b09b      	sub	sp, #108	; 0x6c
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	da05      	bge.n	8003c9a <_vsniprintf_r+0x18>
 8003c8e:	238b      	movs	r3, #139	; 0x8b
 8003c90:	f04f 30ff 	mov.w	r0, #4294967295
 8003c94:	602b      	str	r3, [r5, #0]
 8003c96:	b01b      	add	sp, #108	; 0x6c
 8003c98:	bd30      	pop	{r4, r5, pc}
 8003c9a:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003c9e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003ca2:	bf0c      	ite	eq
 8003ca4:	4623      	moveq	r3, r4
 8003ca6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003caa:	9302      	str	r3, [sp, #8]
 8003cac:	9305      	str	r3, [sp, #20]
 8003cae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003cb2:	9100      	str	r1, [sp, #0]
 8003cb4:	9104      	str	r1, [sp, #16]
 8003cb6:	f8ad 300e 	strh.w	r3, [sp, #14]
 8003cba:	4602      	mov	r2, r0
 8003cbc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003cbe:	4669      	mov	r1, sp
 8003cc0:	4628      	mov	r0, r5
 8003cc2:	f000 f873 	bl	8003dac <_svfiprintf_r>
 8003cc6:	1c43      	adds	r3, r0, #1
 8003cc8:	bfbc      	itt	lt
 8003cca:	238b      	movlt	r3, #139	; 0x8b
 8003ccc:	602b      	strlt	r3, [r5, #0]
 8003cce:	2c00      	cmp	r4, #0
 8003cd0:	d0e1      	beq.n	8003c96 <_vsniprintf_r+0x14>
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	9b00      	ldr	r3, [sp, #0]
 8003cd6:	701a      	strb	r2, [r3, #0]
 8003cd8:	e7dd      	b.n	8003c96 <_vsniprintf_r+0x14>
	...

08003cdc <vsniprintf>:
 8003cdc:	b507      	push	{r0, r1, r2, lr}
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	460a      	mov	r2, r1
 8003ce4:	4601      	mov	r1, r0
 8003ce6:	4803      	ldr	r0, [pc, #12]	; (8003cf4 <vsniprintf+0x18>)
 8003ce8:	6800      	ldr	r0, [r0, #0]
 8003cea:	f7ff ffca 	bl	8003c82 <_vsniprintf_r>
 8003cee:	b003      	add	sp, #12
 8003cf0:	f85d fb04 	ldr.w	pc, [sp], #4
 8003cf4:	2000001c 	.word	0x2000001c

08003cf8 <__ssputs_r>:
 8003cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cfc:	688e      	ldr	r6, [r1, #8]
 8003cfe:	4682      	mov	sl, r0
 8003d00:	429e      	cmp	r6, r3
 8003d02:	460c      	mov	r4, r1
 8003d04:	4690      	mov	r8, r2
 8003d06:	4699      	mov	r9, r3
 8003d08:	d837      	bhi.n	8003d7a <__ssputs_r+0x82>
 8003d0a:	898a      	ldrh	r2, [r1, #12]
 8003d0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d10:	d031      	beq.n	8003d76 <__ssputs_r+0x7e>
 8003d12:	2302      	movs	r3, #2
 8003d14:	6825      	ldr	r5, [r4, #0]
 8003d16:	6909      	ldr	r1, [r1, #16]
 8003d18:	1a6f      	subs	r7, r5, r1
 8003d1a:	6965      	ldr	r5, [r4, #20]
 8003d1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d20:	fb95 f5f3 	sdiv	r5, r5, r3
 8003d24:	f109 0301 	add.w	r3, r9, #1
 8003d28:	443b      	add	r3, r7
 8003d2a:	429d      	cmp	r5, r3
 8003d2c:	bf38      	it	cc
 8003d2e:	461d      	movcc	r5, r3
 8003d30:	0553      	lsls	r3, r2, #21
 8003d32:	d530      	bpl.n	8003d96 <__ssputs_r+0x9e>
 8003d34:	4629      	mov	r1, r5
 8003d36:	f000 fb2d 	bl	8004394 <_malloc_r>
 8003d3a:	4606      	mov	r6, r0
 8003d3c:	b950      	cbnz	r0, 8003d54 <__ssputs_r+0x5c>
 8003d3e:	230c      	movs	r3, #12
 8003d40:	f04f 30ff 	mov.w	r0, #4294967295
 8003d44:	f8ca 3000 	str.w	r3, [sl]
 8003d48:	89a3      	ldrh	r3, [r4, #12]
 8003d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d4e:	81a3      	strh	r3, [r4, #12]
 8003d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d54:	463a      	mov	r2, r7
 8003d56:	6921      	ldr	r1, [r4, #16]
 8003d58:	f7ff ff80 	bl	8003c5c <memcpy>
 8003d5c:	89a3      	ldrh	r3, [r4, #12]
 8003d5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d66:	81a3      	strh	r3, [r4, #12]
 8003d68:	6126      	str	r6, [r4, #16]
 8003d6a:	443e      	add	r6, r7
 8003d6c:	6026      	str	r6, [r4, #0]
 8003d6e:	464e      	mov	r6, r9
 8003d70:	6165      	str	r5, [r4, #20]
 8003d72:	1bed      	subs	r5, r5, r7
 8003d74:	60a5      	str	r5, [r4, #8]
 8003d76:	454e      	cmp	r6, r9
 8003d78:	d900      	bls.n	8003d7c <__ssputs_r+0x84>
 8003d7a:	464e      	mov	r6, r9
 8003d7c:	4632      	mov	r2, r6
 8003d7e:	4641      	mov	r1, r8
 8003d80:	6820      	ldr	r0, [r4, #0]
 8003d82:	f000 faa1 	bl	80042c8 <memmove>
 8003d86:	68a3      	ldr	r3, [r4, #8]
 8003d88:	2000      	movs	r0, #0
 8003d8a:	1b9b      	subs	r3, r3, r6
 8003d8c:	60a3      	str	r3, [r4, #8]
 8003d8e:	6823      	ldr	r3, [r4, #0]
 8003d90:	441e      	add	r6, r3
 8003d92:	6026      	str	r6, [r4, #0]
 8003d94:	e7dc      	b.n	8003d50 <__ssputs_r+0x58>
 8003d96:	462a      	mov	r2, r5
 8003d98:	f000 fb56 	bl	8004448 <_realloc_r>
 8003d9c:	4606      	mov	r6, r0
 8003d9e:	2800      	cmp	r0, #0
 8003da0:	d1e2      	bne.n	8003d68 <__ssputs_r+0x70>
 8003da2:	6921      	ldr	r1, [r4, #16]
 8003da4:	4650      	mov	r0, sl
 8003da6:	f000 faa9 	bl	80042fc <_free_r>
 8003daa:	e7c8      	b.n	8003d3e <__ssputs_r+0x46>

08003dac <_svfiprintf_r>:
 8003dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003db0:	461d      	mov	r5, r3
 8003db2:	898b      	ldrh	r3, [r1, #12]
 8003db4:	b09d      	sub	sp, #116	; 0x74
 8003db6:	061f      	lsls	r7, r3, #24
 8003db8:	4680      	mov	r8, r0
 8003dba:	460c      	mov	r4, r1
 8003dbc:	4616      	mov	r6, r2
 8003dbe:	d50f      	bpl.n	8003de0 <_svfiprintf_r+0x34>
 8003dc0:	690b      	ldr	r3, [r1, #16]
 8003dc2:	b96b      	cbnz	r3, 8003de0 <_svfiprintf_r+0x34>
 8003dc4:	2140      	movs	r1, #64	; 0x40
 8003dc6:	f000 fae5 	bl	8004394 <_malloc_r>
 8003dca:	6020      	str	r0, [r4, #0]
 8003dcc:	6120      	str	r0, [r4, #16]
 8003dce:	b928      	cbnz	r0, 8003ddc <_svfiprintf_r+0x30>
 8003dd0:	230c      	movs	r3, #12
 8003dd2:	f8c8 3000 	str.w	r3, [r8]
 8003dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8003dda:	e0c8      	b.n	8003f6e <_svfiprintf_r+0x1c2>
 8003ddc:	2340      	movs	r3, #64	; 0x40
 8003dde:	6163      	str	r3, [r4, #20]
 8003de0:	2300      	movs	r3, #0
 8003de2:	9309      	str	r3, [sp, #36]	; 0x24
 8003de4:	2320      	movs	r3, #32
 8003de6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003dea:	2330      	movs	r3, #48	; 0x30
 8003dec:	f04f 0b01 	mov.w	fp, #1
 8003df0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003df4:	9503      	str	r5, [sp, #12]
 8003df6:	4637      	mov	r7, r6
 8003df8:	463d      	mov	r5, r7
 8003dfa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003dfe:	b10b      	cbz	r3, 8003e04 <_svfiprintf_r+0x58>
 8003e00:	2b25      	cmp	r3, #37	; 0x25
 8003e02:	d13e      	bne.n	8003e82 <_svfiprintf_r+0xd6>
 8003e04:	ebb7 0a06 	subs.w	sl, r7, r6
 8003e08:	d00b      	beq.n	8003e22 <_svfiprintf_r+0x76>
 8003e0a:	4653      	mov	r3, sl
 8003e0c:	4632      	mov	r2, r6
 8003e0e:	4621      	mov	r1, r4
 8003e10:	4640      	mov	r0, r8
 8003e12:	f7ff ff71 	bl	8003cf8 <__ssputs_r>
 8003e16:	3001      	adds	r0, #1
 8003e18:	f000 80a4 	beq.w	8003f64 <_svfiprintf_r+0x1b8>
 8003e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e1e:	4453      	add	r3, sl
 8003e20:	9309      	str	r3, [sp, #36]	; 0x24
 8003e22:	783b      	ldrb	r3, [r7, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 809d 	beq.w	8003f64 <_svfiprintf_r+0x1b8>
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e34:	9304      	str	r3, [sp, #16]
 8003e36:	9307      	str	r3, [sp, #28]
 8003e38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e3c:	931a      	str	r3, [sp, #104]	; 0x68
 8003e3e:	462f      	mov	r7, r5
 8003e40:	2205      	movs	r2, #5
 8003e42:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003e46:	4850      	ldr	r0, [pc, #320]	; (8003f88 <_svfiprintf_r+0x1dc>)
 8003e48:	f000 fa30 	bl	80042ac <memchr>
 8003e4c:	9b04      	ldr	r3, [sp, #16]
 8003e4e:	b9d0      	cbnz	r0, 8003e86 <_svfiprintf_r+0xda>
 8003e50:	06d9      	lsls	r1, r3, #27
 8003e52:	bf44      	itt	mi
 8003e54:	2220      	movmi	r2, #32
 8003e56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e5a:	071a      	lsls	r2, r3, #28
 8003e5c:	bf44      	itt	mi
 8003e5e:	222b      	movmi	r2, #43	; 0x2b
 8003e60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e64:	782a      	ldrb	r2, [r5, #0]
 8003e66:	2a2a      	cmp	r2, #42	; 0x2a
 8003e68:	d015      	beq.n	8003e96 <_svfiprintf_r+0xea>
 8003e6a:	462f      	mov	r7, r5
 8003e6c:	2000      	movs	r0, #0
 8003e6e:	250a      	movs	r5, #10
 8003e70:	9a07      	ldr	r2, [sp, #28]
 8003e72:	4639      	mov	r1, r7
 8003e74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e78:	3b30      	subs	r3, #48	; 0x30
 8003e7a:	2b09      	cmp	r3, #9
 8003e7c:	d94d      	bls.n	8003f1a <_svfiprintf_r+0x16e>
 8003e7e:	b1b8      	cbz	r0, 8003eb0 <_svfiprintf_r+0x104>
 8003e80:	e00f      	b.n	8003ea2 <_svfiprintf_r+0xf6>
 8003e82:	462f      	mov	r7, r5
 8003e84:	e7b8      	b.n	8003df8 <_svfiprintf_r+0x4c>
 8003e86:	4a40      	ldr	r2, [pc, #256]	; (8003f88 <_svfiprintf_r+0x1dc>)
 8003e88:	463d      	mov	r5, r7
 8003e8a:	1a80      	subs	r0, r0, r2
 8003e8c:	fa0b f000 	lsl.w	r0, fp, r0
 8003e90:	4318      	orrs	r0, r3
 8003e92:	9004      	str	r0, [sp, #16]
 8003e94:	e7d3      	b.n	8003e3e <_svfiprintf_r+0x92>
 8003e96:	9a03      	ldr	r2, [sp, #12]
 8003e98:	1d11      	adds	r1, r2, #4
 8003e9a:	6812      	ldr	r2, [r2, #0]
 8003e9c:	9103      	str	r1, [sp, #12]
 8003e9e:	2a00      	cmp	r2, #0
 8003ea0:	db01      	blt.n	8003ea6 <_svfiprintf_r+0xfa>
 8003ea2:	9207      	str	r2, [sp, #28]
 8003ea4:	e004      	b.n	8003eb0 <_svfiprintf_r+0x104>
 8003ea6:	4252      	negs	r2, r2
 8003ea8:	f043 0302 	orr.w	r3, r3, #2
 8003eac:	9207      	str	r2, [sp, #28]
 8003eae:	9304      	str	r3, [sp, #16]
 8003eb0:	783b      	ldrb	r3, [r7, #0]
 8003eb2:	2b2e      	cmp	r3, #46	; 0x2e
 8003eb4:	d10c      	bne.n	8003ed0 <_svfiprintf_r+0x124>
 8003eb6:	787b      	ldrb	r3, [r7, #1]
 8003eb8:	2b2a      	cmp	r3, #42	; 0x2a
 8003eba:	d133      	bne.n	8003f24 <_svfiprintf_r+0x178>
 8003ebc:	9b03      	ldr	r3, [sp, #12]
 8003ebe:	3702      	adds	r7, #2
 8003ec0:	1d1a      	adds	r2, r3, #4
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	9203      	str	r2, [sp, #12]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	bfb8      	it	lt
 8003eca:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ece:	9305      	str	r3, [sp, #20]
 8003ed0:	4d2e      	ldr	r5, [pc, #184]	; (8003f8c <_svfiprintf_r+0x1e0>)
 8003ed2:	2203      	movs	r2, #3
 8003ed4:	7839      	ldrb	r1, [r7, #0]
 8003ed6:	4628      	mov	r0, r5
 8003ed8:	f000 f9e8 	bl	80042ac <memchr>
 8003edc:	b138      	cbz	r0, 8003eee <_svfiprintf_r+0x142>
 8003ede:	2340      	movs	r3, #64	; 0x40
 8003ee0:	1b40      	subs	r0, r0, r5
 8003ee2:	fa03 f000 	lsl.w	r0, r3, r0
 8003ee6:	9b04      	ldr	r3, [sp, #16]
 8003ee8:	3701      	adds	r7, #1
 8003eea:	4303      	orrs	r3, r0
 8003eec:	9304      	str	r3, [sp, #16]
 8003eee:	7839      	ldrb	r1, [r7, #0]
 8003ef0:	2206      	movs	r2, #6
 8003ef2:	4827      	ldr	r0, [pc, #156]	; (8003f90 <_svfiprintf_r+0x1e4>)
 8003ef4:	1c7e      	adds	r6, r7, #1
 8003ef6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003efa:	f000 f9d7 	bl	80042ac <memchr>
 8003efe:	2800      	cmp	r0, #0
 8003f00:	d038      	beq.n	8003f74 <_svfiprintf_r+0x1c8>
 8003f02:	4b24      	ldr	r3, [pc, #144]	; (8003f94 <_svfiprintf_r+0x1e8>)
 8003f04:	bb13      	cbnz	r3, 8003f4c <_svfiprintf_r+0x1a0>
 8003f06:	9b03      	ldr	r3, [sp, #12]
 8003f08:	3307      	adds	r3, #7
 8003f0a:	f023 0307 	bic.w	r3, r3, #7
 8003f0e:	3308      	adds	r3, #8
 8003f10:	9303      	str	r3, [sp, #12]
 8003f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f14:	444b      	add	r3, r9
 8003f16:	9309      	str	r3, [sp, #36]	; 0x24
 8003f18:	e76d      	b.n	8003df6 <_svfiprintf_r+0x4a>
 8003f1a:	fb05 3202 	mla	r2, r5, r2, r3
 8003f1e:	2001      	movs	r0, #1
 8003f20:	460f      	mov	r7, r1
 8003f22:	e7a6      	b.n	8003e72 <_svfiprintf_r+0xc6>
 8003f24:	2300      	movs	r3, #0
 8003f26:	250a      	movs	r5, #10
 8003f28:	4619      	mov	r1, r3
 8003f2a:	3701      	adds	r7, #1
 8003f2c:	9305      	str	r3, [sp, #20]
 8003f2e:	4638      	mov	r0, r7
 8003f30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f34:	3a30      	subs	r2, #48	; 0x30
 8003f36:	2a09      	cmp	r2, #9
 8003f38:	d903      	bls.n	8003f42 <_svfiprintf_r+0x196>
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0c8      	beq.n	8003ed0 <_svfiprintf_r+0x124>
 8003f3e:	9105      	str	r1, [sp, #20]
 8003f40:	e7c6      	b.n	8003ed0 <_svfiprintf_r+0x124>
 8003f42:	fb05 2101 	mla	r1, r5, r1, r2
 8003f46:	2301      	movs	r3, #1
 8003f48:	4607      	mov	r7, r0
 8003f4a:	e7f0      	b.n	8003f2e <_svfiprintf_r+0x182>
 8003f4c:	ab03      	add	r3, sp, #12
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	4622      	mov	r2, r4
 8003f52:	4b11      	ldr	r3, [pc, #68]	; (8003f98 <_svfiprintf_r+0x1ec>)
 8003f54:	a904      	add	r1, sp, #16
 8003f56:	4640      	mov	r0, r8
 8003f58:	f3af 8000 	nop.w
 8003f5c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003f60:	4681      	mov	r9, r0
 8003f62:	d1d6      	bne.n	8003f12 <_svfiprintf_r+0x166>
 8003f64:	89a3      	ldrh	r3, [r4, #12]
 8003f66:	065b      	lsls	r3, r3, #25
 8003f68:	f53f af35 	bmi.w	8003dd6 <_svfiprintf_r+0x2a>
 8003f6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f6e:	b01d      	add	sp, #116	; 0x74
 8003f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f74:	ab03      	add	r3, sp, #12
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	4622      	mov	r2, r4
 8003f7a:	4b07      	ldr	r3, [pc, #28]	; (8003f98 <_svfiprintf_r+0x1ec>)
 8003f7c:	a904      	add	r1, sp, #16
 8003f7e:	4640      	mov	r0, r8
 8003f80:	f000 f882 	bl	8004088 <_printf_i>
 8003f84:	e7ea      	b.n	8003f5c <_svfiprintf_r+0x1b0>
 8003f86:	bf00      	nop
 8003f88:	08004588 	.word	0x08004588
 8003f8c:	0800458e 	.word	0x0800458e
 8003f90:	08004592 	.word	0x08004592
 8003f94:	00000000 	.word	0x00000000
 8003f98:	08003cf9 	.word	0x08003cf9

08003f9c <_printf_common>:
 8003f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fa0:	4691      	mov	r9, r2
 8003fa2:	461f      	mov	r7, r3
 8003fa4:	688a      	ldr	r2, [r1, #8]
 8003fa6:	690b      	ldr	r3, [r1, #16]
 8003fa8:	4606      	mov	r6, r0
 8003faa:	4293      	cmp	r3, r2
 8003fac:	bfb8      	it	lt
 8003fae:	4613      	movlt	r3, r2
 8003fb0:	f8c9 3000 	str.w	r3, [r9]
 8003fb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003fb8:	460c      	mov	r4, r1
 8003fba:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003fbe:	b112      	cbz	r2, 8003fc6 <_printf_common+0x2a>
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	f8c9 3000 	str.w	r3, [r9]
 8003fc6:	6823      	ldr	r3, [r4, #0]
 8003fc8:	0699      	lsls	r1, r3, #26
 8003fca:	bf42      	ittt	mi
 8003fcc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003fd0:	3302      	addmi	r3, #2
 8003fd2:	f8c9 3000 	strmi.w	r3, [r9]
 8003fd6:	6825      	ldr	r5, [r4, #0]
 8003fd8:	f015 0506 	ands.w	r5, r5, #6
 8003fdc:	d107      	bne.n	8003fee <_printf_common+0x52>
 8003fde:	f104 0a19 	add.w	sl, r4, #25
 8003fe2:	68e3      	ldr	r3, [r4, #12]
 8003fe4:	f8d9 2000 	ldr.w	r2, [r9]
 8003fe8:	1a9b      	subs	r3, r3, r2
 8003fea:	42ab      	cmp	r3, r5
 8003fec:	dc29      	bgt.n	8004042 <_printf_common+0xa6>
 8003fee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003ff2:	6822      	ldr	r2, [r4, #0]
 8003ff4:	3300      	adds	r3, #0
 8003ff6:	bf18      	it	ne
 8003ff8:	2301      	movne	r3, #1
 8003ffa:	0692      	lsls	r2, r2, #26
 8003ffc:	d42e      	bmi.n	800405c <_printf_common+0xc0>
 8003ffe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004002:	4639      	mov	r1, r7
 8004004:	4630      	mov	r0, r6
 8004006:	47c0      	blx	r8
 8004008:	3001      	adds	r0, #1
 800400a:	d021      	beq.n	8004050 <_printf_common+0xb4>
 800400c:	6823      	ldr	r3, [r4, #0]
 800400e:	68e5      	ldr	r5, [r4, #12]
 8004010:	f003 0306 	and.w	r3, r3, #6
 8004014:	2b04      	cmp	r3, #4
 8004016:	bf18      	it	ne
 8004018:	2500      	movne	r5, #0
 800401a:	f8d9 2000 	ldr.w	r2, [r9]
 800401e:	f04f 0900 	mov.w	r9, #0
 8004022:	bf08      	it	eq
 8004024:	1aad      	subeq	r5, r5, r2
 8004026:	68a3      	ldr	r3, [r4, #8]
 8004028:	6922      	ldr	r2, [r4, #16]
 800402a:	bf08      	it	eq
 800402c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004030:	4293      	cmp	r3, r2
 8004032:	bfc4      	itt	gt
 8004034:	1a9b      	subgt	r3, r3, r2
 8004036:	18ed      	addgt	r5, r5, r3
 8004038:	341a      	adds	r4, #26
 800403a:	454d      	cmp	r5, r9
 800403c:	d11a      	bne.n	8004074 <_printf_common+0xd8>
 800403e:	2000      	movs	r0, #0
 8004040:	e008      	b.n	8004054 <_printf_common+0xb8>
 8004042:	2301      	movs	r3, #1
 8004044:	4652      	mov	r2, sl
 8004046:	4639      	mov	r1, r7
 8004048:	4630      	mov	r0, r6
 800404a:	47c0      	blx	r8
 800404c:	3001      	adds	r0, #1
 800404e:	d103      	bne.n	8004058 <_printf_common+0xbc>
 8004050:	f04f 30ff 	mov.w	r0, #4294967295
 8004054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004058:	3501      	adds	r5, #1
 800405a:	e7c2      	b.n	8003fe2 <_printf_common+0x46>
 800405c:	2030      	movs	r0, #48	; 0x30
 800405e:	18e1      	adds	r1, r4, r3
 8004060:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004064:	1c5a      	adds	r2, r3, #1
 8004066:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800406a:	4422      	add	r2, r4
 800406c:	3302      	adds	r3, #2
 800406e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004072:	e7c4      	b.n	8003ffe <_printf_common+0x62>
 8004074:	2301      	movs	r3, #1
 8004076:	4622      	mov	r2, r4
 8004078:	4639      	mov	r1, r7
 800407a:	4630      	mov	r0, r6
 800407c:	47c0      	blx	r8
 800407e:	3001      	adds	r0, #1
 8004080:	d0e6      	beq.n	8004050 <_printf_common+0xb4>
 8004082:	f109 0901 	add.w	r9, r9, #1
 8004086:	e7d8      	b.n	800403a <_printf_common+0x9e>

08004088 <_printf_i>:
 8004088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800408c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004090:	460c      	mov	r4, r1
 8004092:	7e09      	ldrb	r1, [r1, #24]
 8004094:	b085      	sub	sp, #20
 8004096:	296e      	cmp	r1, #110	; 0x6e
 8004098:	4617      	mov	r7, r2
 800409a:	4606      	mov	r6, r0
 800409c:	4698      	mov	r8, r3
 800409e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80040a0:	f000 80b3 	beq.w	800420a <_printf_i+0x182>
 80040a4:	d822      	bhi.n	80040ec <_printf_i+0x64>
 80040a6:	2963      	cmp	r1, #99	; 0x63
 80040a8:	d036      	beq.n	8004118 <_printf_i+0x90>
 80040aa:	d80a      	bhi.n	80040c2 <_printf_i+0x3a>
 80040ac:	2900      	cmp	r1, #0
 80040ae:	f000 80b9 	beq.w	8004224 <_printf_i+0x19c>
 80040b2:	2958      	cmp	r1, #88	; 0x58
 80040b4:	f000 8083 	beq.w	80041be <_printf_i+0x136>
 80040b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80040c0:	e032      	b.n	8004128 <_printf_i+0xa0>
 80040c2:	2964      	cmp	r1, #100	; 0x64
 80040c4:	d001      	beq.n	80040ca <_printf_i+0x42>
 80040c6:	2969      	cmp	r1, #105	; 0x69
 80040c8:	d1f6      	bne.n	80040b8 <_printf_i+0x30>
 80040ca:	6820      	ldr	r0, [r4, #0]
 80040cc:	6813      	ldr	r3, [r2, #0]
 80040ce:	0605      	lsls	r5, r0, #24
 80040d0:	f103 0104 	add.w	r1, r3, #4
 80040d4:	d52a      	bpl.n	800412c <_printf_i+0xa4>
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6011      	str	r1, [r2, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	da03      	bge.n	80040e6 <_printf_i+0x5e>
 80040de:	222d      	movs	r2, #45	; 0x2d
 80040e0:	425b      	negs	r3, r3
 80040e2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80040e6:	486f      	ldr	r0, [pc, #444]	; (80042a4 <_printf_i+0x21c>)
 80040e8:	220a      	movs	r2, #10
 80040ea:	e039      	b.n	8004160 <_printf_i+0xd8>
 80040ec:	2973      	cmp	r1, #115	; 0x73
 80040ee:	f000 809d 	beq.w	800422c <_printf_i+0x1a4>
 80040f2:	d808      	bhi.n	8004106 <_printf_i+0x7e>
 80040f4:	296f      	cmp	r1, #111	; 0x6f
 80040f6:	d020      	beq.n	800413a <_printf_i+0xb2>
 80040f8:	2970      	cmp	r1, #112	; 0x70
 80040fa:	d1dd      	bne.n	80040b8 <_printf_i+0x30>
 80040fc:	6823      	ldr	r3, [r4, #0]
 80040fe:	f043 0320 	orr.w	r3, r3, #32
 8004102:	6023      	str	r3, [r4, #0]
 8004104:	e003      	b.n	800410e <_printf_i+0x86>
 8004106:	2975      	cmp	r1, #117	; 0x75
 8004108:	d017      	beq.n	800413a <_printf_i+0xb2>
 800410a:	2978      	cmp	r1, #120	; 0x78
 800410c:	d1d4      	bne.n	80040b8 <_printf_i+0x30>
 800410e:	2378      	movs	r3, #120	; 0x78
 8004110:	4865      	ldr	r0, [pc, #404]	; (80042a8 <_printf_i+0x220>)
 8004112:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004116:	e055      	b.n	80041c4 <_printf_i+0x13c>
 8004118:	6813      	ldr	r3, [r2, #0]
 800411a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800411e:	1d19      	adds	r1, r3, #4
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6011      	str	r1, [r2, #0]
 8004124:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004128:	2301      	movs	r3, #1
 800412a:	e08c      	b.n	8004246 <_printf_i+0x1be>
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004132:	6011      	str	r1, [r2, #0]
 8004134:	bf18      	it	ne
 8004136:	b21b      	sxthne	r3, r3
 8004138:	e7cf      	b.n	80040da <_printf_i+0x52>
 800413a:	6813      	ldr	r3, [r2, #0]
 800413c:	6825      	ldr	r5, [r4, #0]
 800413e:	1d18      	adds	r0, r3, #4
 8004140:	6010      	str	r0, [r2, #0]
 8004142:	0628      	lsls	r0, r5, #24
 8004144:	d501      	bpl.n	800414a <_printf_i+0xc2>
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	e002      	b.n	8004150 <_printf_i+0xc8>
 800414a:	0668      	lsls	r0, r5, #25
 800414c:	d5fb      	bpl.n	8004146 <_printf_i+0xbe>
 800414e:	881b      	ldrh	r3, [r3, #0]
 8004150:	296f      	cmp	r1, #111	; 0x6f
 8004152:	bf14      	ite	ne
 8004154:	220a      	movne	r2, #10
 8004156:	2208      	moveq	r2, #8
 8004158:	4852      	ldr	r0, [pc, #328]	; (80042a4 <_printf_i+0x21c>)
 800415a:	2100      	movs	r1, #0
 800415c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004160:	6865      	ldr	r5, [r4, #4]
 8004162:	2d00      	cmp	r5, #0
 8004164:	60a5      	str	r5, [r4, #8]
 8004166:	f2c0 8095 	blt.w	8004294 <_printf_i+0x20c>
 800416a:	6821      	ldr	r1, [r4, #0]
 800416c:	f021 0104 	bic.w	r1, r1, #4
 8004170:	6021      	str	r1, [r4, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d13d      	bne.n	80041f2 <_printf_i+0x16a>
 8004176:	2d00      	cmp	r5, #0
 8004178:	f040 808e 	bne.w	8004298 <_printf_i+0x210>
 800417c:	4665      	mov	r5, ip
 800417e:	2a08      	cmp	r2, #8
 8004180:	d10b      	bne.n	800419a <_printf_i+0x112>
 8004182:	6823      	ldr	r3, [r4, #0]
 8004184:	07db      	lsls	r3, r3, #31
 8004186:	d508      	bpl.n	800419a <_printf_i+0x112>
 8004188:	6923      	ldr	r3, [r4, #16]
 800418a:	6862      	ldr	r2, [r4, #4]
 800418c:	429a      	cmp	r2, r3
 800418e:	bfde      	ittt	le
 8004190:	2330      	movle	r3, #48	; 0x30
 8004192:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004196:	f105 35ff 	addle.w	r5, r5, #4294967295
 800419a:	ebac 0305 	sub.w	r3, ip, r5
 800419e:	6123      	str	r3, [r4, #16]
 80041a0:	f8cd 8000 	str.w	r8, [sp]
 80041a4:	463b      	mov	r3, r7
 80041a6:	aa03      	add	r2, sp, #12
 80041a8:	4621      	mov	r1, r4
 80041aa:	4630      	mov	r0, r6
 80041ac:	f7ff fef6 	bl	8003f9c <_printf_common>
 80041b0:	3001      	adds	r0, #1
 80041b2:	d14d      	bne.n	8004250 <_printf_i+0x1c8>
 80041b4:	f04f 30ff 	mov.w	r0, #4294967295
 80041b8:	b005      	add	sp, #20
 80041ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80041be:	4839      	ldr	r0, [pc, #228]	; (80042a4 <_printf_i+0x21c>)
 80041c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80041c4:	6813      	ldr	r3, [r2, #0]
 80041c6:	6821      	ldr	r1, [r4, #0]
 80041c8:	1d1d      	adds	r5, r3, #4
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6015      	str	r5, [r2, #0]
 80041ce:	060a      	lsls	r2, r1, #24
 80041d0:	d50b      	bpl.n	80041ea <_printf_i+0x162>
 80041d2:	07ca      	lsls	r2, r1, #31
 80041d4:	bf44      	itt	mi
 80041d6:	f041 0120 	orrmi.w	r1, r1, #32
 80041da:	6021      	strmi	r1, [r4, #0]
 80041dc:	b91b      	cbnz	r3, 80041e6 <_printf_i+0x15e>
 80041de:	6822      	ldr	r2, [r4, #0]
 80041e0:	f022 0220 	bic.w	r2, r2, #32
 80041e4:	6022      	str	r2, [r4, #0]
 80041e6:	2210      	movs	r2, #16
 80041e8:	e7b7      	b.n	800415a <_printf_i+0xd2>
 80041ea:	064d      	lsls	r5, r1, #25
 80041ec:	bf48      	it	mi
 80041ee:	b29b      	uxthmi	r3, r3
 80041f0:	e7ef      	b.n	80041d2 <_printf_i+0x14a>
 80041f2:	4665      	mov	r5, ip
 80041f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80041f8:	fb02 3311 	mls	r3, r2, r1, r3
 80041fc:	5cc3      	ldrb	r3, [r0, r3]
 80041fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004202:	460b      	mov	r3, r1
 8004204:	2900      	cmp	r1, #0
 8004206:	d1f5      	bne.n	80041f4 <_printf_i+0x16c>
 8004208:	e7b9      	b.n	800417e <_printf_i+0xf6>
 800420a:	6813      	ldr	r3, [r2, #0]
 800420c:	6825      	ldr	r5, [r4, #0]
 800420e:	1d18      	adds	r0, r3, #4
 8004210:	6961      	ldr	r1, [r4, #20]
 8004212:	6010      	str	r0, [r2, #0]
 8004214:	0628      	lsls	r0, r5, #24
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	d501      	bpl.n	800421e <_printf_i+0x196>
 800421a:	6019      	str	r1, [r3, #0]
 800421c:	e002      	b.n	8004224 <_printf_i+0x19c>
 800421e:	066a      	lsls	r2, r5, #25
 8004220:	d5fb      	bpl.n	800421a <_printf_i+0x192>
 8004222:	8019      	strh	r1, [r3, #0]
 8004224:	2300      	movs	r3, #0
 8004226:	4665      	mov	r5, ip
 8004228:	6123      	str	r3, [r4, #16]
 800422a:	e7b9      	b.n	80041a0 <_printf_i+0x118>
 800422c:	6813      	ldr	r3, [r2, #0]
 800422e:	1d19      	adds	r1, r3, #4
 8004230:	6011      	str	r1, [r2, #0]
 8004232:	681d      	ldr	r5, [r3, #0]
 8004234:	6862      	ldr	r2, [r4, #4]
 8004236:	2100      	movs	r1, #0
 8004238:	4628      	mov	r0, r5
 800423a:	f000 f837 	bl	80042ac <memchr>
 800423e:	b108      	cbz	r0, 8004244 <_printf_i+0x1bc>
 8004240:	1b40      	subs	r0, r0, r5
 8004242:	6060      	str	r0, [r4, #4]
 8004244:	6863      	ldr	r3, [r4, #4]
 8004246:	6123      	str	r3, [r4, #16]
 8004248:	2300      	movs	r3, #0
 800424a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800424e:	e7a7      	b.n	80041a0 <_printf_i+0x118>
 8004250:	6923      	ldr	r3, [r4, #16]
 8004252:	462a      	mov	r2, r5
 8004254:	4639      	mov	r1, r7
 8004256:	4630      	mov	r0, r6
 8004258:	47c0      	blx	r8
 800425a:	3001      	adds	r0, #1
 800425c:	d0aa      	beq.n	80041b4 <_printf_i+0x12c>
 800425e:	6823      	ldr	r3, [r4, #0]
 8004260:	079b      	lsls	r3, r3, #30
 8004262:	d413      	bmi.n	800428c <_printf_i+0x204>
 8004264:	68e0      	ldr	r0, [r4, #12]
 8004266:	9b03      	ldr	r3, [sp, #12]
 8004268:	4298      	cmp	r0, r3
 800426a:	bfb8      	it	lt
 800426c:	4618      	movlt	r0, r3
 800426e:	e7a3      	b.n	80041b8 <_printf_i+0x130>
 8004270:	2301      	movs	r3, #1
 8004272:	464a      	mov	r2, r9
 8004274:	4639      	mov	r1, r7
 8004276:	4630      	mov	r0, r6
 8004278:	47c0      	blx	r8
 800427a:	3001      	adds	r0, #1
 800427c:	d09a      	beq.n	80041b4 <_printf_i+0x12c>
 800427e:	3501      	adds	r5, #1
 8004280:	68e3      	ldr	r3, [r4, #12]
 8004282:	9a03      	ldr	r2, [sp, #12]
 8004284:	1a9b      	subs	r3, r3, r2
 8004286:	42ab      	cmp	r3, r5
 8004288:	dcf2      	bgt.n	8004270 <_printf_i+0x1e8>
 800428a:	e7eb      	b.n	8004264 <_printf_i+0x1dc>
 800428c:	2500      	movs	r5, #0
 800428e:	f104 0919 	add.w	r9, r4, #25
 8004292:	e7f5      	b.n	8004280 <_printf_i+0x1f8>
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1ac      	bne.n	80041f2 <_printf_i+0x16a>
 8004298:	7803      	ldrb	r3, [r0, #0]
 800429a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800429e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042a2:	e76c      	b.n	800417e <_printf_i+0xf6>
 80042a4:	08004599 	.word	0x08004599
 80042a8:	080045aa 	.word	0x080045aa

080042ac <memchr>:
 80042ac:	b510      	push	{r4, lr}
 80042ae:	b2c9      	uxtb	r1, r1
 80042b0:	4402      	add	r2, r0
 80042b2:	4290      	cmp	r0, r2
 80042b4:	4603      	mov	r3, r0
 80042b6:	d101      	bne.n	80042bc <memchr+0x10>
 80042b8:	2300      	movs	r3, #0
 80042ba:	e003      	b.n	80042c4 <memchr+0x18>
 80042bc:	781c      	ldrb	r4, [r3, #0]
 80042be:	3001      	adds	r0, #1
 80042c0:	428c      	cmp	r4, r1
 80042c2:	d1f6      	bne.n	80042b2 <memchr+0x6>
 80042c4:	4618      	mov	r0, r3
 80042c6:	bd10      	pop	{r4, pc}

080042c8 <memmove>:
 80042c8:	4288      	cmp	r0, r1
 80042ca:	b510      	push	{r4, lr}
 80042cc:	eb01 0302 	add.w	r3, r1, r2
 80042d0:	d807      	bhi.n	80042e2 <memmove+0x1a>
 80042d2:	1e42      	subs	r2, r0, #1
 80042d4:	4299      	cmp	r1, r3
 80042d6:	d00a      	beq.n	80042ee <memmove+0x26>
 80042d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042dc:	f802 4f01 	strb.w	r4, [r2, #1]!
 80042e0:	e7f8      	b.n	80042d4 <memmove+0xc>
 80042e2:	4283      	cmp	r3, r0
 80042e4:	d9f5      	bls.n	80042d2 <memmove+0xa>
 80042e6:	1881      	adds	r1, r0, r2
 80042e8:	1ad2      	subs	r2, r2, r3
 80042ea:	42d3      	cmn	r3, r2
 80042ec:	d100      	bne.n	80042f0 <memmove+0x28>
 80042ee:	bd10      	pop	{r4, pc}
 80042f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80042f4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80042f8:	e7f7      	b.n	80042ea <memmove+0x22>
	...

080042fc <_free_r>:
 80042fc:	b538      	push	{r3, r4, r5, lr}
 80042fe:	4605      	mov	r5, r0
 8004300:	2900      	cmp	r1, #0
 8004302:	d043      	beq.n	800438c <_free_r+0x90>
 8004304:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004308:	1f0c      	subs	r4, r1, #4
 800430a:	2b00      	cmp	r3, #0
 800430c:	bfb8      	it	lt
 800430e:	18e4      	addlt	r4, r4, r3
 8004310:	f000 f8d0 	bl	80044b4 <__malloc_lock>
 8004314:	4a1e      	ldr	r2, [pc, #120]	; (8004390 <_free_r+0x94>)
 8004316:	6813      	ldr	r3, [r2, #0]
 8004318:	4610      	mov	r0, r2
 800431a:	b933      	cbnz	r3, 800432a <_free_r+0x2e>
 800431c:	6063      	str	r3, [r4, #4]
 800431e:	6014      	str	r4, [r2, #0]
 8004320:	4628      	mov	r0, r5
 8004322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004326:	f000 b8c6 	b.w	80044b6 <__malloc_unlock>
 800432a:	42a3      	cmp	r3, r4
 800432c:	d90b      	bls.n	8004346 <_free_r+0x4a>
 800432e:	6821      	ldr	r1, [r4, #0]
 8004330:	1862      	adds	r2, r4, r1
 8004332:	4293      	cmp	r3, r2
 8004334:	bf01      	itttt	eq
 8004336:	681a      	ldreq	r2, [r3, #0]
 8004338:	685b      	ldreq	r3, [r3, #4]
 800433a:	1852      	addeq	r2, r2, r1
 800433c:	6022      	streq	r2, [r4, #0]
 800433e:	6063      	str	r3, [r4, #4]
 8004340:	6004      	str	r4, [r0, #0]
 8004342:	e7ed      	b.n	8004320 <_free_r+0x24>
 8004344:	4613      	mov	r3, r2
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	b10a      	cbz	r2, 800434e <_free_r+0x52>
 800434a:	42a2      	cmp	r2, r4
 800434c:	d9fa      	bls.n	8004344 <_free_r+0x48>
 800434e:	6819      	ldr	r1, [r3, #0]
 8004350:	1858      	adds	r0, r3, r1
 8004352:	42a0      	cmp	r0, r4
 8004354:	d10b      	bne.n	800436e <_free_r+0x72>
 8004356:	6820      	ldr	r0, [r4, #0]
 8004358:	4401      	add	r1, r0
 800435a:	1858      	adds	r0, r3, r1
 800435c:	4282      	cmp	r2, r0
 800435e:	6019      	str	r1, [r3, #0]
 8004360:	d1de      	bne.n	8004320 <_free_r+0x24>
 8004362:	6810      	ldr	r0, [r2, #0]
 8004364:	6852      	ldr	r2, [r2, #4]
 8004366:	4401      	add	r1, r0
 8004368:	6019      	str	r1, [r3, #0]
 800436a:	605a      	str	r2, [r3, #4]
 800436c:	e7d8      	b.n	8004320 <_free_r+0x24>
 800436e:	d902      	bls.n	8004376 <_free_r+0x7a>
 8004370:	230c      	movs	r3, #12
 8004372:	602b      	str	r3, [r5, #0]
 8004374:	e7d4      	b.n	8004320 <_free_r+0x24>
 8004376:	6820      	ldr	r0, [r4, #0]
 8004378:	1821      	adds	r1, r4, r0
 800437a:	428a      	cmp	r2, r1
 800437c:	bf01      	itttt	eq
 800437e:	6811      	ldreq	r1, [r2, #0]
 8004380:	6852      	ldreq	r2, [r2, #4]
 8004382:	1809      	addeq	r1, r1, r0
 8004384:	6021      	streq	r1, [r4, #0]
 8004386:	6062      	str	r2, [r4, #4]
 8004388:	605c      	str	r4, [r3, #4]
 800438a:	e7c9      	b.n	8004320 <_free_r+0x24>
 800438c:	bd38      	pop	{r3, r4, r5, pc}
 800438e:	bf00      	nop
 8004390:	200000a0 	.word	0x200000a0

08004394 <_malloc_r>:
 8004394:	b570      	push	{r4, r5, r6, lr}
 8004396:	1ccd      	adds	r5, r1, #3
 8004398:	f025 0503 	bic.w	r5, r5, #3
 800439c:	3508      	adds	r5, #8
 800439e:	2d0c      	cmp	r5, #12
 80043a0:	bf38      	it	cc
 80043a2:	250c      	movcc	r5, #12
 80043a4:	2d00      	cmp	r5, #0
 80043a6:	4606      	mov	r6, r0
 80043a8:	db01      	blt.n	80043ae <_malloc_r+0x1a>
 80043aa:	42a9      	cmp	r1, r5
 80043ac:	d903      	bls.n	80043b6 <_malloc_r+0x22>
 80043ae:	230c      	movs	r3, #12
 80043b0:	6033      	str	r3, [r6, #0]
 80043b2:	2000      	movs	r0, #0
 80043b4:	bd70      	pop	{r4, r5, r6, pc}
 80043b6:	f000 f87d 	bl	80044b4 <__malloc_lock>
 80043ba:	4a21      	ldr	r2, [pc, #132]	; (8004440 <_malloc_r+0xac>)
 80043bc:	6814      	ldr	r4, [r2, #0]
 80043be:	4621      	mov	r1, r4
 80043c0:	b991      	cbnz	r1, 80043e8 <_malloc_r+0x54>
 80043c2:	4c20      	ldr	r4, [pc, #128]	; (8004444 <_malloc_r+0xb0>)
 80043c4:	6823      	ldr	r3, [r4, #0]
 80043c6:	b91b      	cbnz	r3, 80043d0 <_malloc_r+0x3c>
 80043c8:	4630      	mov	r0, r6
 80043ca:	f000 f863 	bl	8004494 <_sbrk_r>
 80043ce:	6020      	str	r0, [r4, #0]
 80043d0:	4629      	mov	r1, r5
 80043d2:	4630      	mov	r0, r6
 80043d4:	f000 f85e 	bl	8004494 <_sbrk_r>
 80043d8:	1c43      	adds	r3, r0, #1
 80043da:	d124      	bne.n	8004426 <_malloc_r+0x92>
 80043dc:	230c      	movs	r3, #12
 80043de:	4630      	mov	r0, r6
 80043e0:	6033      	str	r3, [r6, #0]
 80043e2:	f000 f868 	bl	80044b6 <__malloc_unlock>
 80043e6:	e7e4      	b.n	80043b2 <_malloc_r+0x1e>
 80043e8:	680b      	ldr	r3, [r1, #0]
 80043ea:	1b5b      	subs	r3, r3, r5
 80043ec:	d418      	bmi.n	8004420 <_malloc_r+0x8c>
 80043ee:	2b0b      	cmp	r3, #11
 80043f0:	d90f      	bls.n	8004412 <_malloc_r+0x7e>
 80043f2:	600b      	str	r3, [r1, #0]
 80043f4:	18cc      	adds	r4, r1, r3
 80043f6:	50cd      	str	r5, [r1, r3]
 80043f8:	4630      	mov	r0, r6
 80043fa:	f000 f85c 	bl	80044b6 <__malloc_unlock>
 80043fe:	f104 000b 	add.w	r0, r4, #11
 8004402:	1d23      	adds	r3, r4, #4
 8004404:	f020 0007 	bic.w	r0, r0, #7
 8004408:	1ac3      	subs	r3, r0, r3
 800440a:	d0d3      	beq.n	80043b4 <_malloc_r+0x20>
 800440c:	425a      	negs	r2, r3
 800440e:	50e2      	str	r2, [r4, r3]
 8004410:	e7d0      	b.n	80043b4 <_malloc_r+0x20>
 8004412:	684b      	ldr	r3, [r1, #4]
 8004414:	428c      	cmp	r4, r1
 8004416:	bf16      	itet	ne
 8004418:	6063      	strne	r3, [r4, #4]
 800441a:	6013      	streq	r3, [r2, #0]
 800441c:	460c      	movne	r4, r1
 800441e:	e7eb      	b.n	80043f8 <_malloc_r+0x64>
 8004420:	460c      	mov	r4, r1
 8004422:	6849      	ldr	r1, [r1, #4]
 8004424:	e7cc      	b.n	80043c0 <_malloc_r+0x2c>
 8004426:	1cc4      	adds	r4, r0, #3
 8004428:	f024 0403 	bic.w	r4, r4, #3
 800442c:	42a0      	cmp	r0, r4
 800442e:	d005      	beq.n	800443c <_malloc_r+0xa8>
 8004430:	1a21      	subs	r1, r4, r0
 8004432:	4630      	mov	r0, r6
 8004434:	f000 f82e 	bl	8004494 <_sbrk_r>
 8004438:	3001      	adds	r0, #1
 800443a:	d0cf      	beq.n	80043dc <_malloc_r+0x48>
 800443c:	6025      	str	r5, [r4, #0]
 800443e:	e7db      	b.n	80043f8 <_malloc_r+0x64>
 8004440:	200000a0 	.word	0x200000a0
 8004444:	200000a4 	.word	0x200000a4

08004448 <_realloc_r>:
 8004448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800444a:	4607      	mov	r7, r0
 800444c:	4614      	mov	r4, r2
 800444e:	460e      	mov	r6, r1
 8004450:	b921      	cbnz	r1, 800445c <_realloc_r+0x14>
 8004452:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004456:	4611      	mov	r1, r2
 8004458:	f7ff bf9c 	b.w	8004394 <_malloc_r>
 800445c:	b922      	cbnz	r2, 8004468 <_realloc_r+0x20>
 800445e:	f7ff ff4d 	bl	80042fc <_free_r>
 8004462:	4625      	mov	r5, r4
 8004464:	4628      	mov	r0, r5
 8004466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004468:	f000 f826 	bl	80044b8 <_malloc_usable_size_r>
 800446c:	42a0      	cmp	r0, r4
 800446e:	d20f      	bcs.n	8004490 <_realloc_r+0x48>
 8004470:	4621      	mov	r1, r4
 8004472:	4638      	mov	r0, r7
 8004474:	f7ff ff8e 	bl	8004394 <_malloc_r>
 8004478:	4605      	mov	r5, r0
 800447a:	2800      	cmp	r0, #0
 800447c:	d0f2      	beq.n	8004464 <_realloc_r+0x1c>
 800447e:	4631      	mov	r1, r6
 8004480:	4622      	mov	r2, r4
 8004482:	f7ff fbeb 	bl	8003c5c <memcpy>
 8004486:	4631      	mov	r1, r6
 8004488:	4638      	mov	r0, r7
 800448a:	f7ff ff37 	bl	80042fc <_free_r>
 800448e:	e7e9      	b.n	8004464 <_realloc_r+0x1c>
 8004490:	4635      	mov	r5, r6
 8004492:	e7e7      	b.n	8004464 <_realloc_r+0x1c>

08004494 <_sbrk_r>:
 8004494:	b538      	push	{r3, r4, r5, lr}
 8004496:	2300      	movs	r3, #0
 8004498:	4c05      	ldr	r4, [pc, #20]	; (80044b0 <_sbrk_r+0x1c>)
 800449a:	4605      	mov	r5, r0
 800449c:	4608      	mov	r0, r1
 800449e:	6023      	str	r3, [r4, #0]
 80044a0:	f7fc feec 	bl	800127c <_sbrk>
 80044a4:	1c43      	adds	r3, r0, #1
 80044a6:	d102      	bne.n	80044ae <_sbrk_r+0x1a>
 80044a8:	6823      	ldr	r3, [r4, #0]
 80044aa:	b103      	cbz	r3, 80044ae <_sbrk_r+0x1a>
 80044ac:	602b      	str	r3, [r5, #0]
 80044ae:	bd38      	pop	{r3, r4, r5, pc}
 80044b0:	200001b4 	.word	0x200001b4

080044b4 <__malloc_lock>:
 80044b4:	4770      	bx	lr

080044b6 <__malloc_unlock>:
 80044b6:	4770      	bx	lr

080044b8 <_malloc_usable_size_r>:
 80044b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044bc:	1f18      	subs	r0, r3, #4
 80044be:	2b00      	cmp	r3, #0
 80044c0:	bfbc      	itt	lt
 80044c2:	580b      	ldrlt	r3, [r1, r0]
 80044c4:	18c0      	addlt	r0, r0, r3
 80044c6:	4770      	bx	lr

080044c8 <_init>:
 80044c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ca:	bf00      	nop
 80044cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ce:	bc08      	pop	{r3}
 80044d0:	469e      	mov	lr, r3
 80044d2:	4770      	bx	lr

080044d4 <_fini>:
 80044d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d6:	bf00      	nop
 80044d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044da:	bc08      	pop	{r3}
 80044dc:	469e      	mov	lr, r3
 80044de:	4770      	bx	lr
